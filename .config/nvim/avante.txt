      ---@type AvanteProvider
      straico = {
        endpoint = "https://api.straico.com/v1/prompt/completion",
        model = { "anthropic/claude-3.5-sonnet" },
        max_tokens = 4096,
        api_key_name = "STRAICO_API_KEY",
        parse_curl_args = function(opts, code_opts)
          local function parse_message(x)
            local user_prompt_table = {x.base_prompt}
              if opts.selected_code_content ~= nil then
                table.insert(user_prompt_table, "\n\n<CODE CONTEXT>\n" .. "```")
                table.insert(user_prompt_table, x.code_lang .. "\n")
                table.insert(user_prompt_table, x.code_content)
                table.insert(user_prompt_table, "\n\n</CODE CONTEXT>\n```")
                table.insert(user_prompt_table, "\n\n<CODE>\n")
                table.insert(user_prompt_table, "```" .. x.code_lang .. "\n")
                table.insert(user_prompt_table, x.selected_code_content)
                table.insert(user_prompt_table, "\n\n</CODE>\n```")
              else
                table.insert(user_prompt_table, "\n\n<CODE>\n" .. "```")
                table.insert(user_prompt_table,  x.code_lang .. "\n")
                table.insert(user_prompt_table, x.code_content)
                table.insert(user_prompt_table, "\n\n</CODE>\n")
              end
              table.insert(user_prompt_table, "\n\n<QUESTION>\n")
              table.insert(user_prompt_table, x.question)
              table.insert(user_prompt_table, "\n\n</QUESTION>\n")
              return {
                "<system>" .. x.system_prompt .. "</system>"
                .. "<user>" .. table.concat(user_prompt_table) .. "</user>"
            }
            end
          return {
            url = opts.endpoint,
            headers = {
              ["Accept"] = "application/json",
              ["Content-Type"] = "application/json",
              ["Authorization"] = "Bearer" .. os.getenv(opts.api_key_name),
            },
            body = {
              models = opts.model,
              message = parse_message(code_opts),
              stream = false,
            },
          }
        end,
        parse_response_data = function(data_stream, _, opts)
          local json = vim.json.decode(data_stream)
          if json.data.completions["anthopic/claude-3.5-sonnet"].choices[1] then
            opts.on_chunk(json.choices[1].message.content)
          end
        end
    }
