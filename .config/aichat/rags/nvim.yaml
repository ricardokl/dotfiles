embedding_model: jina:jina-embeddings-v2-base-code
chunk_size: 1000
chunk_overlap: 50
reranker_model: jina:jina-reranker-v2-base-multilingual
top_k: 10
batch_size: null
next_file_id: 16
document_paths:
- /data/data/com.termux/files/home/.config/nvim/lua/**/*.lua
files:
  0:
    hash: 6f081baeaeedbc888f60579ea0778416dc3ed7e70ddb93d4d37a28cb446e2679
    path: /data/data/com.termux/files/home/.config/nvim/lua/plugins/lsp-config.lua
    documents:
    - page_content: |-
        return {
          {
            "williamboman/mason.nvim",
            config = function()
              require("mason").setup()
            end
          },
          {
            "williamboman/mason-lspconfig.nvim",
            opt = { ensure_installed = { "lua_ls" } }
          },
          {
            "neovim/nvim-lspconfig",
            config = function()
              local servers = { 'pyright', 'vimls' }
              local capabilities = require("cmp_nvim_lsp").default_capabilities()
              local lspconfig = require("lspconfig")
              for _, lsp in ipairs(servers) do
                lspconfig[lsp].setup({
                  capabilities = capabilities,
                })
              end
              lspconfig.rust_analyzer.setup({
                capabilities = capabilities,
                settings = {
                  ['rust-analyzer'] = {
                    checkOnSave = { enable = false },
                    diagnostics = { enable = false },
                    inlayHints = { enable = true },
                  }
                },
              })
              lspconfig.bacon_ls.setup({
                settings = {
                  ['bacon-ls'] = {
                    waitTimeSeconds = 1,
                  }
                }
              })
      metadata: {}
    - page_content: |-
        }
                }
              })
              lspconfig.lua_ls.setup({
                capabilities = capabilities,
                settings = {
                  Lua = {
                    diagnostics = {
                      globals = { 'vim' },
                    }
                  }
                }
              })
              -- lspconfig.texlab.setup({
              --   chktek = { onOpenAndSave = true },
              -- })
            end
          },
        }
      metadata: {}
  1:
    hash: 5231324ced6e8470543e23c2f73d117dece4c5808b64a944694a417221bb2ce4
    path: /data/data/com.termux/files/home/.config/nvim/lua/plugins/none-ls.lua
    documents:
    - page_content: |-
        return {
          "nvimtools/none-ls.nvim",
          config = function()
            local null_ls = require("null-ls")
            null_ls.setup({
              source = {
                -- Install stylua, black and isort via mason
                null_ls.builtins.formatting.stylua,
                -- null_ls.builtins.formatting.black,
                -- null_ls.builtins.formatting.isort,
              }
            })
          end
        }
      metadata: {}
  2:
    hash: 89bbd29550a73b0f5dafa6bcb52c5e9d78cf541243e49e266c562e7ee510bc34
    path: /data/data/com.termux/files/home/.config/nvim/lua/plugins/gitsigns.lua
    documents:
    - page_content: |-
        return {
          {
            -- "airblade/vim-gitgutter"
          "lewis6991/gitsigns.nvim",
            config = function ()
              require('gitsigns').setup({
                on_attach = function(bufnr)
                  local gitsigns = require('gitsigns')

                  local function map(mode, l, r, opts)
                    opts = opts or {}
                    opts.buffer = bufnr
                    vim.keymap.set(mode, l, r, opts)
                  end

                  -- Navigation
                  map('n', ']h', function()
                    if vim.wo.diff then
                      vim.cmd.normal({']c', bang = true})
                    else
                      gitsigns.nav_hunk('next')
                    end
                  end)

                  map('n', '[h', function()
                    if vim.wo.diff then
                      vim.cmd.normal({'[c', bang = true})
                    else
                      gitsigns.nav_hunk('prev')
                    end
                  end)
      metadata: {}
    - page_content: |-
        -- Actions
                  map('n', '<leader>hs', ':Gitsigns stage_hunk<cr>')
                  map('n', '<leader>hr', ':Gitsigns reset_hunk<cr>')
                  map('n', '<leader>hS', ':Gitsigns stage_buffer<cr>')
                  map('n', '<leader>hu', ':Gitsigns undo_stage_hunk<cr>')
                  map('n', '<leader>hR', ':Gitsigns reset_buffer<cr>')
                  map('n', '<leader>hp', ':Gitsigns preview_hunk<cr>')
                  map('n', '<leader>hd', ':Gitsigns diffthis<cr>')
                  map('n', '<leader>hD', function() gitsigns.diffthis('~') end)

                  -- Text object
                  map({'o', 'x'}, 'ih', ':<C-U>Gitsigns select_hunk<CR>')
                end})
            end
          },
        }
      metadata: {}
  3:
    hash: 92a15e53eb5e58b3dd8c4f8c9f85a841a6b8667307e86907f5c54a92ea077f80
    path: /data/data/com.termux/files/home/.config/nvim/lua/plugins/telescope.lua
    documents:
    - page_content: |-
        return {
          {
            "nvim-telescope/telescope.nvim",
            branch = '0.1.x',
            dependencies = {
              "nvim-lua/plenary.nvim",
              "nvim-telescope/telescope-ui-select.nvim"
            },
            lazy = false,
            config = function()
              require("telescope").setup({
                extensions = {
                  ["ui-select"] = { require("telescope.themes").get_dropdown {} }
                }
              })
              require("telescope").load_extension("ui-select")
            end
          },
        }
      metadata: {}
  4:
    hash: df9d883e4af84502548ceaa37248f12e25bd91c84e9371f38c6b3f5ff1dc0012
    path: /data/data/com.termux/files/home/.config/nvim/lua/plugins/various.lua
    documents:
    - page_content: |-
        return {
          {
            "tpope/vim-surround",
            event = "VeryLazy",
          },
          {
            "jiangmiao/auto-pairs",
          },
          {
            "numToStr/Navigator.nvim",
            config = function()
              require('Navigator').setup({})
            end
          },
          -- {
            -- "airblade/vim-gitgutter"
          -- "lewis6991/gitsigns.nvim",
          --   config = function ()
          --     require('gitsigns').setup({
          --       on_attach = function(bufnr)
          --         local gitsigns = require('gitsigns')
          --
          --         local function map(mode, l, r, opts)
          --           opts = opts or {}
          --           opts.buffer = bufnr
          --           vim.keymap.set(mode, l, r, opts)
          --         end
          --
          --         -- Navigation
          --         map('n', ']h', function()
          --           if vim.wo.diff then
          --             vim.cmd.normal({']c', bang = true})
          --           else
          --             gitsigns.nav_hunk('next')
          --           end
          --         end)
          --
          --         map('n', '[h', function()
          --           if vim.wo.diff then
      metadata: {}
    - page_content: |-
        --           if vim.wo.diff then
          --             vim.cmd.normal({'[c', bang = true})
          --           else
          --             gitsigns.nav_hunk('prev')
          --           end
          --         end)
          --
          --         -- Actions
          --         map('n', '<leader>hs', ':Gitsigns stage_hunk<cr>')
          --         map('n', '<leader>hr', ':Gitsigns reset_hunk<cr>')
          --         map('n', '<leader>hS', ':Gitsigns stage_buffer<cr>')
          --         map('n', '<leader>hu', ':Gitsigns undo_stage_hunk<cr>')
          --         map('n', '<leader>hR', ':Gitsigns reset_buffer<cr>')
          --         map('n', '<leader>hp', ':Gitsigns preview_hunk<cr>')
          --         map('n', '<leader>hd', ':Gitsigns diffthis<cr>')
          --         map('n', '<leader>hD', function() gitsigns.diffthis('~') end)
          --
          --         -- Text object
          --         map({'o', 'x'}, 'ih', ':<C-U>Gitsigns select_hunk<CR>')
          --       end})
          --   end
          -- },
          -- Use "laststatus=3" for a global  statusline
          -- Incline will add floating info about each split
          -- {
      metadata: {}
    - page_content: |-
        -- {
          --   "b0o/incline.nvim",
          --   config = function()
          --     require('incline').setup()
          --   end,
          --   -- Optional: Lazy load Incline
          --   event = 'VeryLazy',
          -- },
        }
      metadata: {}
  5:
    hash: 9b6f546082dcf7627efae0bf421f1022fe4b1f009249c71c7b21a3430dc39372
    path: /data/data/com.termux/files/home/.config/nvim/lua/plugins/supermaven.lua
    documents:
    - page_content: |-
        return {
          {
            "supermaven-inc/supermaven-nvim",
            lazy = false,
            config = function()
              require("supermaven-nvim").setup({
                disable_inline_completion = true
              })
            end
          },

          -- {
          --   "aliaksandr-trush/codeium.nvim", -- forked repo
          --   -- "Exafunction/codeium.nvim",
          --   dependencies = {
          --     "nvim-lua/plenary.nvim", "hrsh7th/nvim-cmp",
          --   },
          --   config = function()
          --     require("codeium").setup({
          --     })
          --   end
          -- }
        }
      metadata: {}
  6:
    hash: c95cca039aa5854273ddaba4865650ef6ff3cc90c1b490a8cc3a7820f474bdab
    path: /data/data/com.termux/files/home/.config/nvim/lua/plugins/completions.lua
    documents:
    - page_content: |-
        return {
          {
            "hrsh7th/nvim-cmp",
            dependencies = {
              "hrsh7th/cmp-nvim-lsp",
              "hrsh7th/cmp-path",
              "hrsh7th/cmp-buffer",
              "hrsh7th/cmp-cmdline"
            },
            config = function()
              require("luasnip.loaders.from_vscode").lazy_load()
              local cmp = require("cmp")
              cmp.setup({
                snippet = {
                  expand = function(args)
                    require("luasnip").lsp_expand(args.body)
                  end,
                },
                experimental = { ghost_text = true },
                mapping = cmp.mapping.preset.insert({
                  ['<C-b>'] = cmp.mapping.scroll_docs(-4),
                  ['<C-f>'] = cmp.mapping.scroll_docs(4),
                  ['<C-Space>'] = cmp.mapping.complete(),
                  ['<C-e>'] = cmp.mapping.abort(),
                  ['<CR>'] = cmp.mapping.confirm({ select = true }),
                }),
                sources = cmp.config.sources({
                  { name = 'nvim_lsp', keyword_lengh = 1 },
                  -- { name = 'supermaven' },
                  -- { name = 'codeium' },
                  { name = 'path' },
      metadata: {}
    - page_content: |-
        { name = 'path' },
                  { name = 'luasnip',  keyword_lengh = 2 },
                  { name = 'cmdline',  keyword_lengh = 2 },
                  { name = 'buffer',   keyword_lengh = 3 },
                }, {
                  -- { name = 'vsnip' },
                })
              })
              cmp.setup.cmdline('/', {
                mapping = cmp.mapping.preset.cmdline(),
                sources = {
                  { name = 'buffer' }
                }
              })
              cmp.setup.cmdline(':', {
                mapping = cmp.mapping.preset.cmdline(),
                sources = cmp.config.sources({
                  { name = 'path' }
                }, {
                  { name = 'cmdline' }
                }),
                matching = { disallow_symbol_nonprefix_matching = false }
              })
            end
          },
          {
            "L3MON4D3/LuaSnip",
            dependencies = {
              "saadparwaiz1/cmp_luasnip",
              "rafamadriz/friendly-snippets"
            }
          },
        }
      metadata: {}
  7:
    hash: 1531ffa6fe28b648329b8b15dbe88b2a6e7da31f0f19ba45fa3d8cd742e1d644
    path: /data/data/com.termux/files/home/.config/nvim/lua/plugins/treesitter.lua
    documents:
    - page_content: |-
        return {
          {
            "nvim-treesitter/nvim-treesitter", build = ":TSUpdate",
            dependencies = {   "nvim-treesitter/nvim-treesitter-textobjects" },
            config = function()
              local config = require("nvim-treesitter.configs")
              config.setup({
                auto_install = true,
                highlight = { enable = true },
                indent = { enable = true },
                ensure_installed = { "python", "r", "lua", "latex", "bibtex", "bash", "yaml", "json", "html", "css","rust", "markdown","markdown_inline"},
                incremental_selection = {
                  enable = true,
                  keymaps = {
                    init_selection = "gnn",
                    node_incremental = "gnm",
                    node_decremental = "gnd",
                    scope_incremental = "gsm"
                  },
                },
                textobjects = {
                  select = {
                    enable = true,
                    lookahead = true,
                    keymaps = {
                      ["ab"] = "@block.outer",
                      ["ib"] = "@block.inner",
                      ["af"] = "@function.outer",
      metadata: {}
    - page_content: |-
        ["af"] = "@function.outer",
                      ["if"] = "@function.inner",
                      ["ac"] = "@call.outer",
                      ["ic"] = "@call.inner",
                      ["aa"] = "@parameter.outer",
                      ["ia"] = "@parameter.inner",
                      ["io"] = "@class.inner",
                      ["ao"] = "@class.outer",
                      ["ir"] = "@return.inner",
                      ["ar"] = "@return.outer",
                    },
                  },
                  move = {
                    enable = true,
                    set_jumps = true, -- whether to set jumps in the jumplist
                    goto_next = {
                      ["]b"] = { query = "@block.outer", desc = "Next block" },
                      ["]f"] = { query = "@function.outer", desc = "Next function"},
                      ["]c"] = { query = "@call.outer", desc = "Next call"},
                      ["]a"] = { query = "@parameter.inner", desc = "Next argument"},
                      ["]o"] = { query = "@class.inner", desc = "Next object"},
      metadata: {}
    - page_content: |-
        ["]r"] = { query = "@return.inner", desc = "Next return"},
                    },
                    goto_previous = {
                      ["[b"] = { query = "@block.outer", desc = "Previous block"},
                      ["[f"] = { query = "@function.outer", desc = "Previous function"},
                      ["[c"] = { query = "@call.outer", desc = "Previous call"},
                      ["[a"] = { query = "@parameter.inner", desc = "Previous argument"},
                      ["[o"] = { query = "@class.inner", desc = "Previous object"},
                      ["[r"] = { query = "@return.inner", desc = "Previous return"},
                    },
                  },
                },
              })
            end
          },
        }
      metadata: {}
  8:
    hash: 2f0aca468e2e2e65033847f16c69f59e3955781d89a430046a20c89cdb6b59ed
    path: /data/data/com.termux/files/home/.config/nvim/lua/plugins/trouble.lua
    documents:
    - page_content: |-
        return {
          "folke/trouble.nvim",
          lazy = true,
          opts = {}, -- for default options, refer to the configuration section for custom setup.
          cmd = "Trouble",
          keys = {
            {
              "<leader>xx",
              "<cmd>Trouble diagnostics toggle<cr>",
              desc = "Diagnostics (Trouble)",
            },
            {
              "<leader>xX",
              "<cmd>Trouble diagnostics toggle filter.buf=0<cr>",
              desc = "Buffer Diagnostics (Trouble)",
            },
            {
              "<leader>cs",
              "<cmd>Trouble symbols toggle focus=false<cr>",
              desc = "Symbols (Trouble)",
            },
            {
              "<leader>cl",
              "<cmd>Trouble lsp toggle focus=false win.position=right<cr>",
              desc = "LSP Definitions / references / ... (Trouble)",
            },
            {
              "<leader>xL",
              "<cmd>Trouble loclist toggle<cr>",
              desc = "Location List (Trouble)",
            },
            {
              "<leader>xQ",
              "<cmd>Trouble qflist toggle<cr>",
              desc = "Quickfix List (Trouble)",
            },
          },
        }
      metadata: {}
  9:
    hash: cbd9844d4590e411f8b922cb0d811705982c75a2142d48e42ead2f07c8c8f873
    path: /data/data/com.termux/files/home/.config/nvim/lua/plugins/indentline.lua
    documents:
    - page_content: "return {\n  \"lukas-reineke/indent-blankline.nvim\",\n  -- config =function ()\n  -- \trequire('ibl').setup()\n  -- end\n}"
      metadata: {}
  10:
    hash: 8ef4171693dd032f1ed50430ab74c5d7e63bfe920f0d098ffcc60c833d1bdd49
    path: /data/data/com.termux/files/home/.config/nvim/lua/plugins/avante.lua
    documents:
    - page_content: |-
        return {
          "yetone/avante.nvim",
          event = "VeryLazy",
          lazy = false,
          opts = {
            provider = "groq",
            vendors = {
              straico = {
                __inherited_from = "openai",
                api_key_name = "STRAICO_API_KEY",
                endpoint = "http://127.0.0.1:8000/v1/",
                model = "anthropic/claude-3.5-sonnet",
                -- model = "openai/o1",
                temperature = 0,
              },
              groq = {
                __inherited_from = "openai",
                api_key_name = "GROQ_API_KEY",
                endpoint = "https://api.groq.com/openai/v1/",
                model = "llama-3.3-70b-versatile",
              },
            },
          },
          build = "make BUILD_FROM_SOURCE=true",
          -- build = "make",
          hints = { enabled = false },
          dependencies = {
            "stevearc/dressing.nvim",
            "nvim-lua/plenary.nvim",
            "MunifTanjim/nui.nvim",
            --- The below dependencies are optional,
            "hrsh7th/nvim-cmp",            -- autocompletion for avante commands and mentions
            "nvim-tree/nvim-web-devicons", -- or echasnovski/mini.icons
      metadata: {}
    - page_content: |-
        -- "zbirenbaum/copilot.lua", -- for providers='copilot'
            {
              -- Make sure to set this up properly if you have lazy=true
              "MeanderingProgrammer/render-markdown.nvim",
              opts = {
                file_types = { "markdown", "Avante" },
              },
              ft = { "markdown", "Avante" },
            },
          },
        }
      metadata: {}
  11:
    hash: 76d618a9a29a8cec62825b44d41c08ac0414f0562c05949ece79b506921654a1
    path: /data/data/com.termux/files/home/.config/nvim/lua/plugins/conform.lua
    documents:
    - page_content: |-
        return {
          {

            "stevearc/conform.nvim",
            opts = {
              formatters_by_ft = {
                -- lua = { "stylua" },
                -- You can customize some of the format options for the filetype (:help conform.format)
                rust = { "rustfmt", lsp_format = "fallback" },
              },
              format_on_save = {
                -- These options will be passed to conform.format()
                timeout_ms = 500,
                lsp_format = "fallback",
              },
            },
          }
        }
      metadata: {}
  12:
    hash: 2ac3bcf88c470881597ad62ec7539ea634a5b160c1e356fb79a1847296d1cb34
    path: /data/data/com.termux/files/home/.config/nvim/lua/plugins/which-key.lua
    documents:
    - page_content: |-
        return {
          "folke/which-key.nvim",
          dependencies = {
            "nvim-tree/nvim-web-devicons",
          }
          ,
          event = "VeryLazy",
          opts = {},
          keys = {
            {
              "<leader>?",
              function()
                require("which-key").show({ global = false })
              end,
              desc = "Buffer Local Keymaps (which-key)",
            },
          },
        }
      metadata: {}
  13:
    hash: 69d4b7f27bd43b093dc64c7198eadc8634c44da8b6900f6aed6caef20b15db1b
    path: /data/data/com.termux/files/home/.config/nvim/lua/plugins/onedark.lua
    documents:
    - page_content: |-
        return {
          "navarasu/onedark.nvim",
          opts = {
            style = "dark",
            code_style = {
              functions = "underline",
              variables = "bold"
            }
          }
        }
      metadata: {}
  14:
    hash: 9e380324a70fcdfaf19470a8e0ee998c1529e5c6bb5bd1eb99abcf92808c8005
    path: /data/data/com.termux/files/home/.config/nvim/lua/plugins/noice.lua
    documents:
    - page_content: |-
        return {
          {
            "folke/noice.nvim",
            event = "VeryLazy",
            opts = {
              lsp = {
                -- override markdown rendering so that **cmp** and other plugins use **Treesitter**
                override = {
                  ["vim.lsp.util.convert_input_to_markdown_lines"] = true,
                  ["vim.lsp.util.stylize_markdown"] = true,
                  ["cmp.entry.get_documentation"] = true, -- requires hrsh7th/nvim-cmp
                },
              },
              presets = {
                -- command_palette = true, -- position the cmdline and popupmenu together
                long_message_to_split = true, -- long messages will be sent to a split
              },
            },
            dependencies = {
              "MunifTanjim/nui.nvim",
              -- "rcarriga/nvim-notify",
            }
          },
      metadata: {}
    - page_content: |-
        {
            "folke/snacks.nvim",
            priority = 1000,
            lazy = false,
            ---@type snacks.Config
            opts = {
              words = { enabled = false },
              scope = { enabled = false },
              dashboard = { enabled = false },
              statuscolumn = { enabled = true },
              quickfile = { enabled = true },
              bigfile = { enabled = true },
              scroll = { enabled = true },
              input = { enabled = true },
              indent = {
                enabled = true,
                chunk = {
                  enabled = true,
                  char = {
                    corner_top = "╭",
                    corner_bottom = "╰",
                    horizontal = "─",
                    vertical = "│",
                    arrow = ">",
                  },
                },
              },
              notifier = {
                -- style = "minimal",
                style = "compact",
                enabled = true,
                timeout = 3000,
              },
              styles = {
                notification = {
                  -- wo = { wrap = true } -- Wrap notifications
                }
              }
            },
            keys = {
      metadata: {}
    - page_content: |-
        }
              }
            },
            keys = {
              { "<leader>z",  function() Snacks.zen() end,                   desc = "Toggle Zen Mode" },
              { "<leader>Z",  function() Snacks.zen.zoom() end,              desc = "Toggle Zoom" },
              { "<leader>n",  function() Snacks.notifier.show_history() end, desc = "Notification History" },
              { "<leader>un", function() Snacks.notifier.hide() end,         desc = "Dismiss All Notifications" },
            },
            init = function()
              vim.api.nvim_create_autocmd("User", {
                pattern = "VeryLazy",
                callback = function()
                  Snacks.toggle.option("spell", { name = "Spelling" }):map("<leader>us")
                  Snacks.toggle.option("wrap", { name = "Wrap" }):map("<leader>uw")
                  Snacks.toggle.inlay_hints():map("<leader>ui")
                end,
              })
            end,
          }
        }
      metadata: {}
  15:
    hash: 3dfb2cbee17bc04d23af3c59682931bcac2720237f2f1750029a796cfbf5f18c
    path: /data/data/com.termux/files/home/.config/nvim/lua/config/lazy.lua
    documents:
    - page_content: |-
        -- Bootstrap lazy.nvim
        local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
        if not (vim.uv or vim.loop).fs_stat(lazypath) then
          local lazyrepo = "https://github.com/folke/lazy.nvim.git"
          local out = vim.fn.system({ "git", "clone", "--filter=blob:none", "--branch=stable", lazyrepo, lazypath })
          if vim.v.shell_error ~= 0 then
            vim.api.nvim_echo({
              { "Failed to clone lazy.nvim:\n", "ErrorMsg" },
              { out,                            "WarningMsg" },
              { "\nPress any key to exit..." },
            }, true, {})
            vim.fn.getchar()
            os.exit(1)
          end
        end
        vim.opt.rtp:prepend(lazypath)

        -- Make sure to setup `mapleader` and `maplocalleader` before
        -- loading lazy.nvim so that mappings are correct.
        -- This is also a good place to setup other settings (vim.opt)
        vim.g.mapleader = " "
        vim.g.maplocalleader = "\\"
      metadata: {}
    - page_content: |-
        vim.api.nvim_create_autocmd('LspAttach', {
          desc = "LSP keybindings",
          callback = function()
            local opts = { noremap = true, silent = true }
            local function map(m, a, b, d)
              vim.api.nvim_buf_set_keymap(0, m, a, b, vim.tbl_extend(
                'keep', opts, { desc = d }
              ))
            end
      metadata: {}
    - page_content: |-
        map('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', "Goto definition")
            map('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', "Find implementations")
            map('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', "Find references")
            map('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', "Hover")
            map('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', "Signature help")
            map('v', '<leader>=', '<cmd>lua vim.lsp.buf.formatting()<CR>', "LSP Format")
            map('n', '<leader>r', '<cmd>lua vim.lsp.buf.rename()<CR>', "Rename")
            map('n', '<leader>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', "Code actions")
            map('n', '<leader>d', '<cmd>lua vim.diagnostic.open_float()<CR>', "Diagnostics float")
            map('n', '[d', '<cmd>lua vim.diagnostic.goto_prev()<CR>', "Goto next diagnostic")
            map('n', ']d', '<cmd>lua vim.diagnostic.goto_next()<CR>', "Goto previous diagnostic")
          end
        })
      metadata: {}
    - page_content: |-
        --{{{ Movendo nos splits
        local function splits_map(a, b, d)
          vim.api.nvim_set_keymap('n', a, b, vim.tbl_extend(
            'keep', { noremap = true }, { desc = d }
          ))
        end

        splits_map('<c-h>', '<cmd>navigatorleft<cr>', "navigator move left")
        splits_map('<c-j>', '<cmd>navigatordown<cr>', "navigator move down")
        splits_map('<c-k>', '<cmd>navigatorup<cr>', "navigator move up")
        splits_map('<c-l>', '<cmd>navigatorright<cr>', "navigator move right")
        splits_map('<c-p>', '<cmd>navigatorprevious<cr>', "navigator move previous")
        splits_map('<c-left>', '<c-w>h', "move to split left")
        splits_map('<c-down>', '<c-w>j', "move to split down")
        splits_map('<c-up>', '<c-w>k', "move to split up")
        splits_map('<c-right>', '<c-w>l', "move to split right")
        --}}}

        --{{{ Movendo entre bufers
        vim.api.nvim_set_keymap('n', '[B', ':bprevious<cr>', { silent = true })
        vim.api.nvim_set_keymap('n', ']B', ':bnext<cr>', { silent = true })
        --}}}
      metadata: {}
    - page_content: |-
        --{{{ Telescope
        vim.api.nvim_set_keymap('n', '<Space>ff', ':Telescope find_files<cr>', {})
        vim.api.nvim_set_keymap('n', '<Space>fd', ':Telescope fd<cr>', {})
        vim.api.nvim_set_keymap('n', '<Space>fl', ':Telescope loclist<cr>', {})
        vim.api.nvim_set_keymap('n', '<Space>bb', ':Telescope buffers<cr>', {})
        --}}}
      metadata: {}
    - page_content: |-
        vim.opt.termguicolors   = true
        vim.opt.autoindent      = true -- maintain indent of current line
        vim.opt.backspace       = 'indent,start,eol' -- allow unrestricted backspacing in insert mode
        vim.opt.belloff         = 'all' -- never ring the bell for any reason
        vim.opt.clipboard       = 'unnamedplus' -- Sincronizar com sistema
        vim.opt.completeopt     = { 'menu', 'menuone', 'noselect' }
        vim.opt.cursorline      = true -- highlight current line
        vim.opt.conceallevel    = 2 -- Hide * markup for bold and italic, but not markers with substitutions
        vim.opt.emoji           = false -- don't assume all emoji are double width
        vim.opt.expandtab       = true -- always use spaces instead of tabs
        vim.opt.fillchars       = {
          diff = '∙', -- BULLET OPERATOR (U+2219, UTF-8: E2 88 99)
          eob  = ' ', -- NO-BREAK SPACE (U+00A0, UTF-8: C2 A0)
          fold = '·', -- MIDDLE DOT (U+00B7, UTF-8: C2 B7)
          vert = '┃', -- BOX DRAWINGS HEAVY VERTICAL
        }
      metadata: {}
    - page_content: |-
        vert = '┃', -- BOX DRAWINGS HEAVY VERTICAL
        }
        -- vim.opt.foldlevelstart = 99                                -- start unfolded
        vim.opt.foldmethod      = 'marker' -- not as cool as syntax, but faster
        vim.opt.formatoptions   = vim.opt.formatoptions + 'j' -- remove comment leader when joining comment lines
        vim.opt.formatoptions   = vim.opt.formatoptions + 'n' -- smart auto-indenting inside numbered lists
        vim.opt.hidden          = true -- hide buffers with unsaved changes
        vim.opt.inccommand      = 'split' -- live preview of :s results
        vim.opt.laststatus      = 2 -- always show status line
        vim.opt.list            = true -- show whitespace
        vim.opt.listchars       = {
          nbsp     = '⦸', -- Non-break space
          extends  = '»', -- Em caso de não ter wrap
          precedes = '«', -- Em caso de não ter wrap
          tab      = '▷┅', -- Tab
          trail    = '•', -- Espaços em branco no final da linha
        }
        vim.opt.modelines       = 5 -- Quantas linhas procurar por modeline
      metadata: {}
    - page_content: |-
        vim.opt.mouse           = 'a' -- Mouse
        vim.opt.scrolloff       = 10 -- Deixar 10 linhas no topo e em baixo
        vim.opt.shell           = 'zsh' -- shell to use for `!`, `:!`, `system()` etc.
        vim.opt.shiftround      = false -- don't always indent by multiple of shiftwidth
        vim.opt.shiftwidth      = 2 -- spaces per tab (when shifting)
        vim.opt.shortmess       = vim.opt.shortmess + 'A' -- ignore annoying swapfile messages
        vim.opt.shortmess       = vim.opt.shortmess + 'O' -- file-read message overwrites previous
        vim.opt.shortmess       = vim.opt.shortmess + 'c' -- completion messages
        vim.opt.showbreak       = '↳ ' -- Final da linha em wrap
        vim.opt.showcmd         = false -- don't show extra info at end of command line
        vim.opt.smarttab        = true -- <tab>/<BS> indent/dedent in leading whitespace
        vim.opt.splitbelow      = true -- Split para baixo
        vim.opt.splitright      = true -- Split para direita
        vim.opt.swapfile        = false -- Não criar swap files
      metadata: {}
    - page_content: |-
        vim.opt.switchbuf       = 'usetab' -- try to reuse windows/tabs when switching buffers
        vim.opt.tabstop         = 2 -- spaces per tab
        vim.opt.updatecount     = 80 -- update swapfiles every 80 typed chars
        vim.opt.updatetime      = 2000 -- CursorHold interval
        vim.opt.virtualedit     = 'block' -- Cursor anda por colunas virtuais
        vim.opt.visualbell      = true -- stop annoying beeping for non-error errors
        vim.opt.whichwrap       = 'b,h,l,s,<,>,[,],~' -- Permite passar de linhas com estes comandos
        vim.opt.timeoutlen      = 500
        vim.opt.ttimeoutlen     = 10
        vim.opt.spell           = true                          -- Enable spell checking
        vim.opt.spelllang       = { "en_us", "pt_br", "de_de" } -- Use US English, Portuguese (Brazil), and German
        vim.g.python3_host_prog = '/bin/python3'
        vim.opt.number          = true                          -- Show line numbers
      metadata: {}
    - page_content: |-
        -- Setup lazy.nvim
        require("lazy").setup({
          spec = {
            -- import your plugins
            { import = "plugins" },
          },
          -- Configure any other settings here. See the documentation for more details.
          -- colorscheme that will be used when installing plugins.
          install = { colorscheme = { "habamax" } },
          -- automatically check for plugin updates
          checker = { enabled = true },
          diff = {
            -- diff command <d> can be one of:
            -- * browser: opens the github compare view. Note that this is always mapped to <K> as well,
            --   so you can have a different command for diff <d>
            -- * git: will run git diff and open a buffer with filetype git
            -- * terminal_git: will open a pseudo terminal with git diff
            -- * diffview.nvim: will open Diffview to show the diff
            cmd = "git",
          },
          performance = {
            rtp = {
              disabled_plugins = {
                "gzip",
                "matchit",
                "matchparen",
                "netrwPlugin",
                "tarPlugin",
                "tohtml",
                "tutor",
      metadata: {}
    - page_content: |-
        "tohtml",
                "tutor",
                "zipPlugin",
              },
            },
          },
        })
      metadata: {}
    - page_content: vim.cmd.colorscheme("onedark")
      metadata: {}
vectors:
  0-0: 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
  0-1: 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
  1-0: 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
  2-0: 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
  2-1: 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
  3-0: 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
  4-0: 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
  4-1: 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
  4-2: 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
  5-0: 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
  6-0: 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
  6-1: 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
  7-0: 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
  7-1: 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
  7-2: HrArvBWGRr3TMry8vP7RPL3NhL2GIki8oDUrvRM0MLxrx9g8v0OWvbUGrjxLlAq9ACKBPCisiDxkLGG9BkemPLzFuTy5FLA8TNpkvMr0w7u+RTS9g5tsPcslQz2T2RY9a+EMPBb5FD3FzZS7AcXhu4xe7bviIQO9TOtYvRFyur2DkwW9bXc3O7RZgzzR7eG8FQPZvIt2yzwqorG92++NuucGSrzcKWW9ViZpvUOpFb3Nq6w8duDRvMBG8zwkNE+9jvA9PSPsNL0iG5s9MsO6O9YPdzzsVJ68xZI1uyLyZbvPutu8FScYPGrxcDnlwBE9HoqAPRRcOzx35hu9/cq3PWKIHTydAHW79G40PJDMVLzgB6G9p5UPvSCPYr1x5ss8fZi6vOSxbby3V3C9YdG5vdbEPb1AbdS7NKnSOxfuYbwZvbG8EPJIvPCMNb1ScBW9SrzvPM912Doy1SQ9LMoOPDidLr3RZvU8MYt3veqYATzIw728G53rPBU1Hjwh4N87KZNPPXcXfbymQ927tDqAvRexGT3Fdu26zJR3vGDEi7zID1w8CWXhvBV0/rwX+yi8CIlfPbobDb28P/e8IA6evYiwS73HVOe70jMCPY4boTx+5II8gy/UPCGf87ywsIC8s+GuPRr1g70tpmK9er42u2HSRDwmiNK8eySGPTuPojzgPJa8dAQYvPZQYD2INay8bFdYvXWr9ToSnuQ8NfVLPczK8jwzjZm8627DvbXlhTuYYAw8j7GqPNuiML1SJMe7knUovVtlHL1bVqU8A0DAux4qgzuDGQm8eK3gPCNFyLy6llk8L3UpPSAfprwWXd48wifNvIQWeLyzSD69cpxTvZJfuzz4BEO9pbuTvE9tFL1sYKM8jnfAuyTM3byv9/s7ENWGvZrj4jwsnjE8xxMJPW2larvKMeO7jCV+vX83Oj0TjoC8vLs/PaCHVDyNWjC9oIeAO5BZkDrXRKK81OURvSM2djylnTa9ENEsPX2VGrzDTR49UE7APCDlOL2QKM67fxOMPStI4Tyme6k80WKGvKlK0buSCbk9qAE+PQpvFTwP8Xm9F77cOzGb7DuxK4e84qQOupVuqD26IaE820spPZyNYr2qWp06fA2WvaoZgDwDVmo9CTWcPHfs2DoqyQm8tms7PRtTYT2ucOk8BdVVPfIvQD3/2p+9YE31OeLQhL0IBxU9j1mhvFHgBbx6lO07YaflOgr9qb16Xj67as5RvSC0RT1gis280uRMPSgHKLyYWCa9mr8UvD1ddLyqUj058Wu+vEW2bz0ueyk8Azn3PC4WD7yKdwU8V/yJPYnKnTweMIs7hqlCO+7qgbxxXjC81YC9OpEZfDxT/Um7kqGevJzHYD0xK7I79fCFPYNY8jzPxRI9aXYMvA/dVLzsRcy7aPUcPH8pJT3QsKM8Nx8/vEayyDtkZy09QpIiPut/YLtQdN68PyU2PUTlh7zc+5O8xaxoOhCNrDwYTbK96o+kvS/KiTzXEos8bP2cvdqB6jt+4Hm8ok4UvD7IlDuwUHa8YWnMPKsuXjuVPSw9QTW2vEU9CD06aw29YGqaPQE9XjtsZdC8ItoSvLsptbozgpA8Lp8GPQIwjr1SE4Q9Af50PDrpRL31Wog9qlJVPccB9DuQG6y84OmjvTzaB73keCA9QKpSPDvc8bx3paG90kt7vTZVsLzqNUS8GH5mPWg6cz3ARYK9eRESPMOjUT3ftfC6D80WPYBU8rzzLxa99LYbPdLwILxbHuy8LPjTu3SfJb2/U4e7FSGhPMrJm72Ycey6cqslvY7GuDwsts+7eLMvvbwK2T0ZQLy9HABJPNcCJbxlikM9732fvP5Ypz3rNTO8obJrPU94QD087A47AWbYPBH3Rz07uyA9WL1rPaBR9DvNLCI8kw6AvdRNITxAWVQ7pSi7PckeNT1kxEq90HRJPctkqTwcBSG9un6evDMsWz2f9RE8YuAGvdMal7xqD4W95mGfPX/OcjxT/Am9/rLZusCirzypHeQ7EAqvvDtfIry75g49kp71PCoR1rxG0JI8D9oHPYGFuzxdaY27ULkUvLmkqTzImw096hHPO3VUV7ygymw88JwCu8YHm7z0ov68GqO4PFfsKL0vp469CoePvUfZZD0To/U6pgegvLcUKbzrECc9bVaHvb9C4TyHizc8iBOJvCLTNrwksTe9Gps7vQlLzr2Peye8xRf7O3q+pjxArro70jCXPX4BTjvr5LA8pupJPFKUubx77hw9owwvPd3RmDyllQw8urj+vKD8Kr0nIKS8FvUmPW1sEryhB7O9rcgEPdpOrbw+LVS7i06jOFqgWr0nAum8gbGcPdiJJj3isAE94QgLPcElBr3hv3e89wLdvNAfAb0raRA8gpOlvDGFBrzVZbu8l4KCvAXXYzuZ91Y95MAQvP2vTTw9wey8D6+MvbBdujyrMCi8bkZfO2r0oDz4n4E85aAsPXkxjT2v2yU80/H4PIjWtTz1FSI8cvSevc/eTL3SOjm99xiEvSkN1L2b80g8GxQYPR57Z7x6fRG97+t5vWPHmTzAcPC8F9sSvUK3tr0n/rY87+vAOpNiDrxOqea7tKjhPCeknbwhGzq8lZagvOSKFr1Udlk8F67fPIpgyzx2CAY8AaLBPINKGj1xJ6g86Y9Du6jB6ryDu848aqN+vITcv7z/kJe947nuPAYQH7wfIVk9efFJvGAhWrxLGBk9IQwIPWSg9jpHaIQ8HHRiPbIiZb0bJVq8FbNfPDR3JD3gvlA9q/OvO7SyOD1BSii994UaPW7kqbu1+pg8xdDIPBT3nLoxGn67Y+EEvBwT7zzA6Fq8Q6IzPPkdGT2aels8O+DhvKpEkDsYEvs7DgaNu1teqrx1BCk8vRYOPd/OtTwnEn+90NdFPOYdtDxCwCm7CraZvF7r97xIk9u8OLlBPBtBTjpKOdG8lY/CPIxCvDzAo8+7+hHePAFG0btF7nw8TqoqPWcgr7sqaou7u1WfPKpDUrwIx469Wr8+OgzpwTxqpDc9FCYbugkMhTnqvAw9ul6XPJLwszz+m4g9FADqPArlqzsrqJ+7Xn79O8wVRTsrrAU8+BAovatjTT2Jc6i8JwS2PEkmBrpeUYa8R7kUPUF6FL1QSZE833mZu5MAOT1BfDK9ArJ9OxWzLL3XYBi8ALsLPQQHFz1G10c83gr4PBDRfrzvxS08tVRdvU1QRT2ZO8888oLTPP6hUbzAdJA8xNqtPLx6cLs4eXS8e2ExPNCENj1rDDG9nRH1vGA2gzytdpC96ugGvLMTl7t5zKM8BFXkO+WXgz28SGq9LySnOxVl97zSJOU8I3tUvRWrxDyXyjY9vNiBvTRotTzP0Ng6WikZvcSCmDwlSFM9jFpzvV9OO7oz0X+84+xePZNMEbtQ3pe9jyoDvcnxQL03wkk9QT2CvLBSdzym9Gs8f0IiPJo8MLyy9hm9OHKUPUYADT3d4sc8x8nGPQ/jk7uR2BY9hCPkvC1Yjzy6PY08K2AhPU4ORjwgix69c3CDvP9y6bws51e9x/IbvJMuKLyqlMs8un/HOys1kDw10iU9kuzcvAy27jooNZo7CA4jPLMO2bwvKUk64h0xvfd/9TyE+Ii8u822OrNa+rxSkyC9fVO+PHoHI7x46NU7RrfduFGIZT2bXZk8jU/JPDtzsDwf19283LG0vFYX1rzcoZA77Wc7PT2Kh714WcA8qKpCvbMZuL1CIWM7ePMRvemNcT0fZxE81j2OO4BihL3IYIC7xIytPMb/kT2Qo5C9c8mUPOqvSDxJAdw7l/vNPLolfbyTXc47Rj24O37txzvB5ea8VjXCPFirgrzICm89hbXmvBmPdjzQ+c08tKOEPIJLHDpVt+k89H9XvCEUATyzkSu9FhHxOkRGRb1kwqC8+utTvJKB2DuagBM8FwE+vV90ADwJDOc7M6+hPKzOBLse1gG98mlGPb1ecb0DjT28z2lhvIMIGLxQYQc9xkBiPAuppzxL5w29HhhCPX4CiLuTTSA9qVXqvCyJ8ryvxK08HgQqPLEKDj1HhYe8HB1qO/Efdb2A5eU7ufw/PYtTZT2QU388VP16vLegW7txjgI9
  8-0: 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
  9-0: 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
  10-0: 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
  10-1: 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
  11-0: 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
  12-0: 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
  13-0: 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
  14-0: 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
  14-1: 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
  14-2: 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
  15-0: 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
  15-1: E5owPXLQgb2ma5O8Csy2PO462LyyIPw8HouAPJvIwrwwiQ49C64BPIGjsr1qe7m9p3EEvUX5Tjywl1S9CL0Fu34Aozxbo1a7Ki++vHRLkL1NyGc9qojGPBABDj3fPru8yB8mvdktUjyB7X08pauvukU/CD35Cre8um1kPB5Mdr3KeVM8ANIBu7FNBzvsF728zbsYPS23dT1NeVg8Lm5FvfAiczwK4eY8qHDPu22UhLsjaAk9L0ZVPZ+LCTydDHQ6qdvSPQOqqDy2T3g8kzQLvZ8Wpjmjzje99iuPvVq/5jyp+4w8bGZXPdoRhL1j3Gi9tA6jPBDyi7ypjYC7OksWPZMZOD262LC7KScdvKJhuryRtmM77iS+vAZOhb2swYy9pe6SvU0LBzzB6h88IoORPNSOHr0iSZo8DuxxO6bwc7z/QgK9M4s1vJNHEjv54Vs9wqiGvBxeCD1fbDc9rvjCPKrxZT0C5S+9jJR5vGZvXj1WLhe9MRGoPQ23KDxYfK67gb3JPGBDPjwnCc28uKeJOYQfljpbo7c8x0EQPQyVl7vd7ZG7qycMvdE5WjzuGg09JFWpvOZNuzySmRS9cJEpvIFT0DyGDQw8Q0thOs4tBT0UNgY9fFZIPZ1FPD1a4oW8KDDzvH357bx8nL69lbZevfYusTyD5fk8+9lTPXQKTjyeh708facpvBq1Rb0R5pW8L4RYvbcKCj33ITo9cwKHvR9UqbyvVPi5OTE0PcRzMT3YUoC9EMYjPByx6rs04Ac8sz1hvF6qqju9UtI8Ihvru8zjRjxPWq48KEmtPOP3BLw7X0G9Skh1PfQ7vzw94IY9/awgvE5zabzllQw8YBaNu4EsDD22IRy9iimHvKgynztYKKE7CbopvZsIQLurYqO8DekjvFdIED3RuhK9AlUhO0jySD3p9W46RDG8PZUhxjxu7gq9LgpEPKQ8yDyr4HC8jia8uuswLD0xcZU8L/UFPX+uh7y2scE9M9OWOh8qIju4Rbi8982cPP+hVjziZa68kVebPKaTDL16fpq80LE1PYws57vG+Ji7GPOKvZvvtjzGwE+8BB5CvVGg4rx032A9mEA9PaEnOzymXIk8pj4UPJ7UBT0YUhW8IiqrvOnzr7x8aKA8QZAmO5kgHj2qfmm9/EXYvcPigT0m3BA9hDzHPBUQIz0WHhW911Y7vfCkpTwI7Zq8Kx6iPNiSJ7yq95K8HxtVPK/guDzgE8Y7CoecvMhYlL11WEY8EgdbPcgPhLx6dUW8LULmPGNGUrrA+IK8PlwGOoknyT1ck4c8VkoCPbXaK7xpias8CTJouVATLbxQfmA8lY8xPcYDMjyWbC+93+OtOn7HUz04NQO883QGvf1iY73kCbA8/FzjvKKRNL0tkRK9hpkMPaHzOr28Waw8Bwd6PcX6PT2b/g68o2FKO/ESs7xQZx+9wVWUPSbsOT2HVCC9qvz3O2Bc8zs2swI9dOx2vPWU4jx67b+8jqcLvaOdnT0qTJs7X6hWvDgLBz3q3XK7uuMbPSGqAr3qbQe9WHz6u0jIJ71kow89+QKnPX0P2j0tRgg9PcVoPVagBz2WfWk87okrPfDdybvTz5s88kMZPYiAJr1/d0M9EutvPcOZn7q/FqW8tzeYvKA3PbvkFq87uUEdvfK69byZCX094PoxvdO6WD2WOpS8fYgzPDzxmbynuW48sCi/O6yX6TyIJP683KMWvaDK1rseS7A7v5rxO95orryliLs9WifOvLAfRD1YOwE9tObuuyAFhzrI0ES7FxGtPJfiqL1n4646byvSvEocN7yLpTy8xls1vYBiHD0W1r68bi/PvAlEKb21QiM9zYHIO3fdEDxt4LY84WgDvMcGibzTAd88HpY7vTnYL7sFbZk8VEWSPWPBhDw0iXi79d0tvPzt6zwEez+9PJ3FPDg8TzzJlFO94Dg1vXceULzaHys9hdoSvTfN3rymWwg95H3aPPOSobtU4Ee8hJd7PNHYrT17jTu9ADgCvZWoPr0QMOO7XjW0vD+LgDxtdgq8y3vGvCn7xT2kdvo8Ew6IuQaUArpoRg09TRpcvHFuLT3BQSO7E68QPdYcNDyAH2c9G38HPbLkgLwsF3+8FAdJvH4V6bw0qtI8lIwtvNHdcD0Ai7i7eOZUvdfDPTwNwJM8XBlOO9jRE71aaEo8u2C+u/xbYLxeGx29BFbJO5MdDrxxPYW9/ZaDPPxThbziwh88sHgtPGb2Dr22rT08Sk5vPGGIWb2xire8CnFHOxw7nLw9RB+86s8ovV9WFrzK33g8l7AMvWHKWb0NWi49MmvrPSYvsLyXI8a8gLQVvPeqfT3n9wW9CbkBPdr9wLxrl8s8obHZuj3i67xw7AG9s1t8PcDy1rszGCq9juJAPZSBRj2cw548ijIhu7TQ3DsO6Eo94VXfPF7WiT2hMAG9QCqpvBcsAL3XWwK90x40PMyKWbtn36k8SljWu++RvDytDwE7Z8HxPNZ7eDuWsCg8N9UPvcDwgLxzuAy9rRYgvWmgvbuA4169dRz7PEnJQLxyW5I9+yIIPYcNwLzk6C48X+QDvfn8AL5wRDO8XcE1PZO3obxXfqA6jySQPPLAKL2HSZO9VP6FuhFguDzdP1o8u4idPB5rNTyfsEA9NhCTvD9qALzGMGe8d0hEPTK8mb3J73i8RAk2vOl8H70ZYBe8mPMlPSh37jwRfZy7A1TOPLEoob3bl7U8twyYPEHfar0SZfQ8/MSzPK7barzOpKQ62HmnvIBGubyeQBE9tLsWO6I1Fjx1W0I7Ugq3uqmQkr3jkmM882daO0rvILt+bYW8bsmNOzSJeD30MS89JRrnPLiOEz0Vp5O8sYDZPAtirz2YXaG8NSEAvdTpeb3mHUC9eEAOvYDh27wUSYG8Zv2Uu/Fqnz2/tr49YACBvS9Pub0eVF29YK6SvLeiKb2eNbK6hcVZvStVPb2pvb69qdJ2vIjd3DovMyi9Ba1lvE2u97xBvUs8g1CYuxGQgTxtpRg9bVrwvBrNFb0O12i8vfYjPW7W0bstDsg8ySp4PNBWkLylMWA912wIPHEGx7ydPOC7q1GePeHDojyRjf68WqJBvcbXab1ZgSU94zevu0HWoz2ozJq8bOqCPFj5JrzZfDM9wImSvYC/0LwNIYu93TLLO8rIDjzYmpS8yw3gO2e1D714NAA8tGNYPVqPPj07l1Q8+IfdvAgwJrwNJwq9cGeAO7COCTyZEF+9qtoFPbnQqrqEbek5vyApO/ZdFL3tb5s7S81sPJUEPz3vySm9LGZCu//JnTwNM9e78KipPYO6ijwUeF29y4Qcu2A6zTyPPoy8gjK+PNulnzxcp7y848ZiPAYTQrt4X8g6O81wvaRLBzxJjRE9iCc5PXqqxTxTC8g8oI6VPB6D4rxLAdu7nf5MPVcdor3NR4y9y0kFPYHJ7rzsqZE84+s5PYVySTsH1ai84eq2PHQTurcV2YE8sJ6vPACGUb3s/fI89BXBPG67QT3NEwW9LS+DvQqI0jwnMXu97H4zvVjAqbw978W8C1rLvBeYQD0JXs28moHxujzK1ruteAe86+o1PbfQOLuD6GW9wSnTvQBhPTsvj4k7I05HvQhEAjwAFIK8R4LXPHDQJrxPCtO7iJzGvPtffT1zn528iNGCvTx3lT0zdTI9ATzuPDe19zzTIY68QCAnPSV6GL1Qy1Y8/G/qPFZuM73M1Qi9d90TPBXG3b06Lva8/ZHNvG3Ht7smgsA8ITIOvfuVI72p2EO8g9bovBuEizwsZe+8wdcwvdJLST2KshU8Rw6GvAIlPT0vpJI6Eu2VPaEyMb3hfLS8/coGvWZejTwpAxI8Fl5IPbUtP7yL6Ww9HkANPJnsRD1BQGK9coCPve3/Dz2I38C8HvWQvOA0X7zs0Ce9zNONvYPHxzzLfg28jjU2uxvLE7ydb6E7zrHKvZr7tzxY6g29iHuRvKPUSTpfR/88PBMovO1P/7o8w8o6Lrr3O6GTCL2EDD89CElzPbxYaD3QIHI6rLATvdC44zoRPQ+9acr9PIc4NT2CHkG9IJgovK0a6bviKRa9GAHYO4XXqzyu5z28cyb9vK7MBzvMPs08
  15-2: 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
  15-3: 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
  15-4: 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
  15-5: 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
  15-6: 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
  15-7: 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
  15-8: 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
  15-9: 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
  15-10: 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
  15-11: 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
