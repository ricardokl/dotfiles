embedding_model: jina:jina-embeddings-v2-base-code
chunk_size: 1000
chunk_overlap: 50
reranker_model: jina:jina-reranker-v2-base-multilingual
top_k: 10
batch_size: null
next_file_id: 88
document_paths:
- /home/ricardo/projects/nvim-oxi/crates/api/src/vim.rs
- /home/ricardo/projects/nvim-oxi/crates/api/src/buffer.rs
- /home/ricardo/projects/nvim-oxi/crates/api/src/command.rs
- /home/ricardo/projects/nvim-oxi/crates/api/src/window.rs
- /home/ricardo/projects/nvim-oxi/crates/api/src/win_config.rs
- /home/ricardo/projects/nvim-oxi/crates/api/src/vimscript.rs
- /home/ricardo/projects/nvim-oxi/crates/api/src/types/**/*.rs
- /home/ricardo/projects/nvim-oxi/crates/api/src/opts/**/*.rs
files:
  0:
    hash: 7a740df87461b428798cbdbce4ddd733e70f03e4296c218442e5c99235332252
    path: vim.rs
    documents:
    - page_content: |-
        use std::path::{Path, PathBuf};

        use types::{
            self as nvim,
            conversion::{FromObject, ToObject},
            Array,
            Dictionary,
            Integer,
            Object,
        };

        use crate::choose;
        use crate::ffi::vim::*;
        use crate::opts::*;
        use crate::types::*;
        use crate::SuperIterator;
        use crate::LUA_INTERNAL_CALL;
        use crate::{Buffer, TabPage, Window};
        use crate::{Error, Result};

        /// Binding to [`nvim_chan_send()`][1].
        ///
        /// Sends data to a channel.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_chan_send()
        pub fn chan_send(channel_id: u32, data: &str) -> Result<()> {
            let mut err = nvim::Error::new();
            let data = nvim::String::from(data);
            unsafe { nvim_chan_send(channel_id.into(), data.non_owning(), &mut err) };
            choose!(err, ())
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_create_buf()`][1].
        ///
        /// Creates a new, empty, unnamed buffer.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_create_buf()
        pub fn create_buf(is_listed: bool, is_scratch: bool) -> Result<Buffer> {
            let mut err = nvim::Error::new();
            let handle = unsafe { nvim_create_buf(is_listed, is_scratch, &mut err) };
            choose!(err, Ok(handle.into()))
        }

        /// Binding to [`nvim_del_current_line()`][1].
        ///
        /// Deletes the current line.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_del_current_line()
        pub fn del_current_line() -> Result<()> {
            let mut err = nvim::Error::new();
            unsafe {
                nvim_del_current_line(
                    #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                    types::arena(),
                    &mut err,
                )
            };
            choose!(err, ())
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_del_keymap()`][1].
        ///
        /// Unmaps a global mapping for the given mode. To unmap a buffer-local mapping
        /// use [`Buffer::del_keymap`] instead.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_del_keymap()
        pub fn del_keymap(mode: Mode, lhs: &str) -> Result<()> {
            let mode = nvim::String::from(mode);
            let lhs = nvim::String::from(lhs);
            let mut err = nvim::Error::new();
            unsafe {
                nvim_del_keymap(
                    LUA_INTERNAL_CALL,
                    mode.non_owning(),
                    lhs.non_owning(),
                    &mut err,
                )
            };
            choose!(err, ())
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_del_mark()`][1].
        ///
        /// Deletes an uppercase/file named mark. Returns an error if a lowercase or
        /// buffer-local named mark is used. Use [`Buffer::del_mark`] to delete a
        /// buffer-local mark.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_del_mark()
        pub fn del_mark(name: char) -> Result<()> {
            let name = nvim::String::from(name);
            let mut err = nvim::Error::new();
            let was_deleted = unsafe { nvim_del_mark(name.non_owning(), &mut err) };
            choose!(
                err,
                match was_deleted {
                    true => Ok(()),
                    _ => Err(Error::custom("Couldn't delete mark")),
                }
            )
        }

        /// Binding to [`nvim_del_var()`][1].
        ///
        /// Removes a global (`g:`) variable.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_del_var()
        pub fn del_var(name: &str) -> Result<()> {
            let name = nvim::String::from(name);
            let mut err = nvim::Error::new();
            unsafe { nvim_del_var(name.non_owning(), &mut err) };
            choose!(err, ())
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_echo()`][1].
        ///
        /// Echoes a message to the Neovim message area.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_echo()
        pub fn echo<HlGroup, Text, Chunks>(
            chunks: Chunks,
            history: bool,
            opts: &EchoOpts,
        ) -> Result<()>
        where
            Chunks: IntoIterator<Item = (Text, Option<HlGroup>)>,
            Text: Into<nvim::String>,
            HlGroup: Into<nvim::String>,
        {
            let chunks = chunks
                .into_iter()
                .map(|(text, hlgroup)| {
                    Array::from_iter([
                        Object::from(text.into()),
                        Object::from(hlgroup.map(Into::into)),
                    ])
                })
                .collect::<Array>();

            let mut err = nvim::Error::new();
            unsafe { nvim_echo(chunks.non_owning(), history, opts, &mut err) };
            choose!(err, ())
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_err_write()`][1].
        ///
        /// Writes a message to the Neovim error buffer. Does not append a newline
        /// (`"\n"`); the message gets buffered and won't be displayed until a linefeed
        /// is written.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_err_write()
        pub fn err_write(str: &str) {
            unsafe { nvim_err_write(nvim::String::from(str).non_owning()) }
        }

        /// Binding to [`nvim_err_writeln()`][1].
        ///
        /// Writes a message to the Neovim error buffer. Appends a newline (`"\n"`), so
        /// the buffer is flushed and displayed.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_err_writeln()
        pub fn err_writeln(str: &str) {
            unsafe { nvim_err_writeln(nvim::String::from(str).non_owning()) }
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_eval_statusline()`][1].
        ///
        /// Evaluates a string to be displayed in the statusline.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_eval_statusline()
        pub fn eval_statusline(
            str: &str,
            opts: &EvalStatuslineOpts,
        ) -> Result<StatuslineInfos> {
            let str = nvim::String::from(str);
            let mut err = nvim::Error::new();
            let dict = unsafe {
                nvim_eval_statusline(
                    str.non_owning(),
                    opts,
                    #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                    types::arena(),
                    &mut err,
                )
            };
            choose!(err, Ok(StatuslineInfos::from_object(dict.into())?))
        }

        /// Binding to [`nvim_feedkeys()`][1].
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_feedkeys()
        pub fn feedkeys(keys: &str, mode: Mode, escape_ks: bool) {
            let keys = nvim::String::from(keys);
            let mode = nvim::String::from(mode);
            unsafe { nvim_feedkeys(keys.non_owning(), mode.non_owning(), escape_ks) }
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_get_chan_info()`][1].
        ///
        /// Gets information about a channel.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_get_chan_info()
        pub fn get_chan_info(channel_id: u32) -> Result<ChannelInfos> {
            let mut err = nvim::Error::new();
            let infos = unsafe { nvim_get_chan_info(channel_id.into(), &mut err) };
            choose!(err, Ok(ChannelInfos::from_object(infos.into())?))
        }

        /// Binding to [`nvim_get_color_by_name()`][1].
        ///
        /// Returns the 24-bit RGB value of a `crate::api::get_color_map` color name or
        /// "#rrggbb" hexadecimal string.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_get_color_by_name()
        pub fn get_color_by_name(name: &str) -> Result<u32> {
            let name = nvim::String::from(name);
            let color = unsafe { nvim_get_color_by_name(name.non_owning()) };
            (color != -1).then(|| color.try_into().unwrap()).ok_or_else(|| {
                Error::custom(format!("{name:?} is not a valid color name"))
            })
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_get_color_map()`][1].
        ///
        /// Returns an iterator over tuples representing color names and 24-bit RGB
        /// values (e.g. 65535).
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_get_color_map()
        pub fn get_color_map() -> impl SuperIterator<(String, u32)> {
            unsafe {
                nvim_get_color_map(
                    #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                    types::arena(),
                )
            }
            .into_iter()
            .map(|(k, v)| (k.to_string_lossy().into(), u32::from_object(v).unwrap()))
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_get_context()`][1].
        ///
        /// Returns a snapshot of the current editor state.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_get_context()
        pub fn get_context(opts: &GetContextOpts) -> Result<EditorContext> {
            let mut err = nvim::Error::new();
            let ctx = unsafe {
                nvim_get_context(
                    opts,
                    #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                    types::arena(),
                    &mut err,
                )
            };
            choose!(err, Ok(EditorContext::from_object(ctx.into())?))
        }

        /// Binding to [`nvim_get_current_buf()`][1].
        ///
        /// Gets the current buffer.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_get_current_buf()
        pub fn get_current_buf() -> Buffer {
            unsafe { nvim_get_current_buf() }.into()
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_get_current_line()`][1].
        ///
        /// Gets the current line in the current bufferr.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_get_current_line()
        pub fn get_current_line() -> Result<String> {
            let mut err = nvim::Error::new();
            let s = unsafe {
                nvim_get_current_line(
                    #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                    types::arena(),
                    &mut err,
                )
            };
            choose!(err, Ok(s.to_string_lossy().into()))
        }

        /// Binding to [`nvim_get_current_tabpage()`][1].
        ///
        /// Gets the current tabpage.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_get_current_tabpage()
        pub fn get_current_tabpage() -> TabPage {
            unsafe { nvim_get_current_tabpage() }.into()
        }

        /// Binding to [`nvim_get_current_win()`][1].
        ///
        /// Gets the current window.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_get_current_win()
        pub fn get_current_win() -> Window {
            unsafe { nvim_get_current_win() }.into()
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_get_hl()`][1].
        ///
        /// Gets all or specific highlight groups in a namespace.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_get_hl()
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        #[cfg_attr(
            docsrs,
            doc(cfg(any(feature = "neovim-0-10", feature = "neovim-nightly")))
        )]
        pub fn get_hl(
            ns_id: u32,
            opts: &GetHighlightOpts,
        ) -> Result<GetHlInfos<impl SuperIterator<(types::String, HighlightInfos)>>> {
            let mut err = nvim::Error::new();
            let dict = unsafe {
                nvim_get_hl(ns_id as Integer, opts, types::arena(), &mut err)
            };
            if err.is_err() {
                return Err(err.into());
            }

            let is_map = dict
                .iter()
                .next()
                .map(|(_, hl_infos)| {
                    let d = types::serde::Deserializer::new(hl_infos.clone());
                    <HighlightInfos as serde::Deserialize>::deserialize(d).is_ok()
                })
                .unwrap_or(false);
      metadata: {}
    - page_content: |-
        if is_map {
                let iter = dict.into_iter().map(|(hl_name, hl_infos)| {
                    let infos = HighlightInfos::from_object(hl_infos).unwrap();
                    (hl_name, infos)
                });
                Ok(GetHlInfos::Map(iter))
            } else {
                HighlightInfos::from_object(dict.into())
                    .map(GetHlInfos::Single)
                    .map_err(Into::into)
            }
        }

        /// Binding to [`nvim_get_hl_id_by_name()`][1].
        ///
        /// Gets a highlight definition by name.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_get_hl_id_by_name()
        pub fn get_hl_id_by_name(name: &str) -> Result<u32> {
            let name = nvim::String::from(name);
            let id = unsafe { nvim_get_hl_id_by_name(name.non_owning()) };
            id.try_into().map_err(Into::into)
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_get_hl_ns()`][1].
        ///
        /// Gets the active highlight namespace.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_get_hl_ns()
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        #[cfg_attr(
            docsrs,
            doc(cfg(any(feature = "neovim-0-10", feature = "neovim-nightly")))
        )]
        pub fn get_hl_ns(opts: &GetNamespaceOpts) -> Result<i64> {
            let mut err = nvim::Error::new();
            let res = unsafe { nvim_get_hl_ns(opts, &mut err) };
            choose!(err, Ok(res))
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_get_keymap()`][1].
        ///
        /// Returns an iterator over the global mapping definitions.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_get_keymap()
        pub fn get_keymap(mode: Mode) -> impl SuperIterator<KeymapInfos> {
            let mode = nvim::String::from(mode);
            let keymaps = unsafe {
                nvim_get_keymap(
                    mode.non_owning(),
                    #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                    types::arena(),
                )
            };
            keymaps.into_iter().map(|obj| KeymapInfos::from_object(obj).unwrap())
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_get_mark()`][1].
        ///
        /// Returns a tuple `(row, col, buffer, buffername)` representing the position
        /// of the named mark. Marks are (1,0)-indexed.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_get_mark()
        pub fn get_mark(
            name: char,
            opts: &GetMarkOpts,
        ) -> Result<(usize, usize, Buffer, String)> {
            let name = nvim::String::from(name);
            #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
            let opts = Dictionary::from(opts);
            let mut err = nvim::Error::new();
            let mark = unsafe {
                nvim_get_mark(
                    name.non_owning(),
                    #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
                    opts.non_owning(),
                    #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                    opts,
                    #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                    types::arena(),
                    &mut err,
                )
            };
            choose!(err, {
                let mut iter = mark.into_iter();
      metadata: {}
    - page_content: |-
        let mut iter = mark.into_iter();
                let row = usize::from_object(iter.next().expect("row is present"))?;
                let col = usize::from_object(iter.next().expect("col is present"))?;
                let buffer =
                    Buffer::from_object(iter.next().expect("buffer is present"))?;
                let buffername =
                    String::from_object(iter.next().expect("buffername is present"))?;
                Ok((row, col, buffer, buffername))
            })
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_get_mode()`][1].
        ///
        /// Gets the current mode. The [`blocking`](GotMode::blocking) field of
        /// [`GotMode`] is `true` if Neovim is waiting for input.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_get_mode()
        pub fn get_mode() -> Result<GotMode> {
            Ok(GotMode::from_object(
                unsafe {
                    nvim_get_mode(
                        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                        types::arena(),
                    )
                }
                .into(),
            )?)
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_get_proc()`][1].
        ///
        /// Gets informations about a process with a given `pid`.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_get_proc()
        pub fn get_proc(pid: u32) -> Result<ProcInfos> {
            let mut err = nvim::Error::new();
            let obj = unsafe {
                nvim_get_proc(
                    pid.into(),
                    #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                    types::arena(),
                    &mut err,
                )
            };
            choose!(err, Ok(ProcInfos::from_object(obj)?))
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_get_proc_children()`][1].
        ///
        /// Gets the immediate children of process `pid`.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_get_proc_children()
        pub fn get_proc_children(pid: u32) -> Result<impl SuperIterator<u32>> {
            let mut err = nvim::Error::new();
            let procs = unsafe {
                nvim_get_proc_children(
                    pid.into(),
                    #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                    types::arena(),
                    &mut err,
                )
            };
            choose!(
                err,
                Ok(procs.into_iter().map(|obj| u32::from_object(obj).unwrap()))
            )
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_get_runtime_file()`][1].
        ///
        /// Returns an iterator over all the files matching `name` in the runtime path.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_get_runtime_file()
        pub fn get_runtime_file(
            name: impl AsRef<Path>,
            get_all: bool,
        ) -> Result<impl SuperIterator<PathBuf>> {
            let name = nvim::String::from(name.as_ref());
            let mut err = nvim::Error::new();
            let files = unsafe {
                nvim_get_runtime_file(
                    name.non_owning(),
                    get_all,
                    #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                    types::arena(),
                    &mut err,
                )
            };
            choose!(
                err,
                Ok({
                    files.into_iter().map(|obj| {
                        PathBuf::from(nvim::String::from_object(obj).unwrap())
                    })
                })
            )
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_get_var()`][1].
        ///
        /// Gets a global (`g:`) variable.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_get_var()
        pub fn get_var<Var>(name: &str) -> Result<Var>
        where
            Var: FromObject,
        {
            let mut err = nvim::Error::new();
            let name = nvim::String::from(name);
            let obj = unsafe {
                nvim_get_var(
                    name.non_owning(),
                    #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                    types::arena(),
                    &mut err,
                )
            };
            choose!(err, Ok(Var::from_object(obj)?))
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_get_vvar()`][1].
        ///
        /// Gets a `v:` variable.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_get_vvar()
        pub fn get_vvar<Var>(name: &str) -> Result<Var>
        where
            Var: FromObject,
        {
            let name = nvim::String::from(name);
            let mut err = nvim::Error::new();
            let obj = unsafe {
                nvim_get_vvar(
                    name.non_owning(),
                    #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                    types::arena(),
                    &mut err,
                )
            };
            choose!(err, Ok(Var::from_object(obj)?))
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_input()`][1].
        ///
        /// Queues raw user-input. Unlike [`api::feedkeys`](feedkeys) this uses a
        /// low-level input buffer and the call is non-blocking.
        ///
        /// Returns the number of bytes written to the buffer.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_input()
        pub fn input<Input>(keys: Input) -> Result<usize>
        where
            Input: Into<nvim::String>,
        {
            unsafe {
                nvim_input(
                    #[cfg(feature = "neovim-nightly")]
                    LUA_INTERNAL_CALL,
                    keys.into().non_owning(),
                )
            }
            .try_into()
            .map_err(From::from)
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_input_mouse()`][1].
        ///
        /// Send mouse event from GUI. The call is non-blocking.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_input_mouse()
        pub fn input_mouse(
            button: MouseButton,
            action: MouseAction,
            modifier: &str,
            grid: u32,
            row: usize,
            col: usize,
        ) -> Result<()> {
            let button = nvim::String::from(button);
            let action = nvim::String::from(action);
            let modifier = nvim::String::from(modifier);
            let mut err = nvim::Error::new();
            unsafe {
                nvim_input_mouse(
                    button.non_owning(),
                    action.non_owning(),
                    modifier.non_owning(),
                    grid.into(),
                    row.try_into()?,
                    col.try_into()?,
                    &mut err,
                )
            };
            choose!(err, ())
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_list_bufs()`][1].
        ///
        /// Gets the current list of [`Buffer`]s, including [unlisted][2]
        /// buffers (like `:ls!`). Use [`Buffer::is_loaded`] to check if a
        /// buffer is loaded.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_list_bufs()
        /// [2]: unloaded/deleted
        pub fn list_bufs() -> impl SuperIterator<Buffer> {
            let bufs = unsafe {
                nvim_list_bufs(
                    #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                    types::arena(),
                )
            };
            bufs.into_iter().map(|obj| Buffer::from_object(obj).unwrap())
        }

        /// Binding to [`nvim_list_chans()`][1].
        ///
        /// Returns an iterator over the informations about all the open channels.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_list_chans()
        pub fn list_chans() -> impl SuperIterator<ChannelInfos> {
            unsafe { nvim_list_chans() }
                .into_iter()
                .map(|obj| ChannelInfos::from_object(obj).unwrap())
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_list_runtime_paths()`][1].
        ///
        /// Gets the paths contained in https://neovim's runtimepath.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_list_runtime_paths()
        pub fn list_runtime_paths() -> Result<impl SuperIterator<PathBuf>> {
            let mut err = nvim::Error::new();
            let paths = unsafe {
                nvim_list_runtime_paths(
                    #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                    types::arena(),
                    &mut err,
                )
            };
            choose!(
                err,
                Ok({
                    paths.into_iter().map(|obj| {
                        PathBuf::from(nvim::String::from_object(obj).unwrap())
                    })
                })
            )
        }

        /// Binding to [`nvim_list_bufs()`][1].
        ///
        /// Gets the current list of `Tabpage`s.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_list_bufs()
        pub fn list_tabpages() -> impl SuperIterator<TabPage> {
            unsafe { nvim_list_tabpages() }
                .into_iter()
                .map(|obj| TabPage::from_object(obj).unwrap())
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_list_uis()`][1].
        ///
        /// Returns an iterator over the informations about all the attached UIs.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_list_uis()
        pub fn list_uis() -> impl SuperIterator<UiInfos> {
            unsafe {
                nvim_list_uis(
                    #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                    types::arena(),
                )
            }
            .into_iter()
            .map(|obj| UiInfos::from_object(obj).unwrap())
        }

        /// Binding to [`nvim_list_wins()`][1].
        ///
        /// Gets the current list of `Window`s.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_list_wins()
        pub fn list_wins() -> impl SuperIterator<Window> {
            unsafe {
                nvim_list_wins(
                    #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                    types::arena(),
                )
            }
            .into_iter()
            .map(|obj| Window::from_object(obj).unwrap())
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_load_context()`][1].
        ///
        /// Sets the current editor state from the given [`EditorContext`].
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_load_context()
        pub fn load_context(ctx: EditorContext) {
            let ctx = Dictionary::from(ctx);
            let _ = unsafe { nvim_load_context(ctx.non_owning()) };
        }

        /// Binding to [`nvim_notify()`][1].
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_notify()
        pub fn notify(
            msg: &str,
            log_level: LogLevel,
            opts: &Dictionary,
        ) -> Result<Object> {
            let msg = nvim::String::from(msg);
            let mut err = nvim::Error::new();
            let obj = unsafe {
                nvim_notify(
                    msg.non_owning(),
                    log_level as Integer,
                    opts.non_owning(),
                    #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                    types::arena(),
                    &mut err,
                )
            };
            choose!(err, Ok(obj))
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_open_term()`][1].
        ///
        /// Opens a terminal instance in a buffer. Returns the id of a channel that can
        /// be used to send data to the instance via
        /// [`nvim_oxi::api::chan_send`](chan_send).
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_open_term()
        pub fn open_term(buffer: &Buffer, opts: &OpenTermOpts) -> Result<u32> {
            #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
            let opts = Dictionary::from(opts);
            let mut err = nvim::Error::new();
            let channel_id = unsafe {
                nvim_open_term(
                    buffer.0,
                    #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
                    opts.non_owning(),
                    #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                    opts,
                    &mut err,
                )
            };
            choose!(
                err,
                match channel_id {
                    0 => Err(Error::custom("Couldn't create terminal instance")),
                    other => Ok(other.try_into().expect("always positive")),
                }
            )
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_out_write()`][1].
        ///
        /// Writes a message to the Vim output buffer, without appending a "\n". The
        /// message is buffered and won't be displayed until a linefeed is written.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_out_write()
        pub fn out_write<Msg>(str: Msg)
        where
            Msg: Into<nvim::String>,
        {
            unsafe { nvim_out_write(str.into().non_owning()) }
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_paste()`][1].
        ///
        /// Returns `true` if the client may continue the paste, `false` if it must
        /// cancel it.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_paste()
        pub fn paste<Data>(data: Data, crlf: bool, phase: PastePhase) -> Result<bool>
        where
            Data: Into<nvim::String>,
        {
            let mut err = nvim::Error::new();
            let go_on = unsafe {
                nvim_paste(
                    data.into().non_owning(),
                    crlf,
                    phase as Integer,
                    #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                    types::arena(),
                    &mut err,
                )
            };
            choose!(err, Ok(go_on))
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_put()`][1].
        ///
        /// Puts text at cursor, in any mode.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_put()
        pub fn put<Line, Lines>(
            lines: Lines,
            reg_type: RegisterType,
            after: bool,
            follow: bool,
        ) -> Result<()>
        where
            Lines: Iterator<Item = Line>,
            Line: Into<nvim::String>,
        {
            let lines = lines.into_iter().map(Into::into).collect::<Array>();
            let reg_type = nvim::String::from(reg_type);
            let mut err = nvim::Error::new();
            unsafe {
                nvim_put(
                    lines.non_owning(),
                    reg_type.non_owning(),
                    after,
                    follow,
                    &mut err,
                )
            };
            choose!(err, ())
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_replace_termcodes()`][1].
        ///
        /// Replaces terminal codes and keycodes (`<CR>`, `<Esc>`, ...) in a string
        /// with the internal representation.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_replace_termcodes()
        pub fn replace_termcodes<Input>(
            str: Input,
            from_part: bool,
            do_lt: bool,
            special: bool,
        ) -> nvim::String
        where
            Input: Into<nvim::String>,
        {
            let str = str.into();
            unsafe {
                nvim_replace_termcodes(str.non_owning(), from_part, do_lt, special)
            }
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_select_popupmenu_item()`][1].
        ///
        /// Selects an item in the completion popupmenu.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_select_popupmenu_item()
        pub fn select_popupmenu_item(
            item: usize,
            insert: bool,
            finish: bool,
            opts: &SelectPopupMenuItemOpts,
        ) -> Result<()> {
            #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
            let opts = Dictionary::from(opts);
            let mut err = nvim::Error::new();
            unsafe {
                nvim_select_popupmenu_item(
                    item.try_into()?,
                    insert,
                    finish,
                    #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
                    opts.non_owning(),
                    #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                    opts,
                    &mut err,
                )
            };
            choose!(err, ())
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_set_current_buf()`][1].
        ///
        /// Sets the current buffer.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_set_current_buf()
        pub fn set_current_buf(buf: &Buffer) -> Result<()> {
            let mut err = nvim::Error::new();
            unsafe { nvim_set_current_buf(buf.0, &mut err) };
            choose!(err, ())
        }

        /// Binding to [`nvim_set_current_dir()`][1].
        ///
        /// Changes the global working directory.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_set_current_dir()
        pub fn set_current_dir<Dir>(dir: Dir) -> Result<()>
        where
            Dir: AsRef<Path>,
        {
            let dir = nvim::String::from(dir.as_ref());
            let mut err = nvim::Error::new();
            unsafe { nvim_set_current_dir(dir.non_owning(), &mut err) };
            choose!(err, ())
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_set_current_line()`][1].
        ///
        /// Sets the current line.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_set_current_line()
        pub fn set_current_line<Line>(line: Line) -> Result<()>
        where
            Line: Into<nvim::String>,
        {
            let mut err = nvim::Error::new();
            unsafe {
                nvim_set_current_line(
                    line.into().non_owning(),
                    #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                    types::arena(),
                    &mut err,
                )
            };
            choose!(err, ())
        }

        /// Binding to [`nvim_set_current_tabpage()`][1].
        ///
        /// Sets the current tabpage.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_set_current_tabpage()
        pub fn set_current_tabpage(tabpage: &TabPage) -> Result<()> {
            let mut err = nvim::Error::new();
            unsafe { nvim_set_current_tabpage(tabpage.0, &mut err) };
            choose!(err, ())
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_set_current_win()`][1].
        ///
        /// Sets the current window.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_set_current_win()
        pub fn set_current_win(win: &Window) -> Result<()> {
            let mut err = nvim::Error::new();
            unsafe { nvim_set_current_win(win.0, &mut err) };
            choose!(err, ())
        }

        /// Binding to [`nvim_set_hl()`][1].
        ///
        /// Sets a highlight group.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_set_hl()
        pub fn set_hl(ns_id: u32, name: &str, opts: &SetHighlightOpts) -> Result<()> {
            let name = nvim::String::from(name);
            let mut err = nvim::Error::new();
            unsafe {
                nvim_set_hl(
                    #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                    LUA_INTERNAL_CALL,
                    ns_id as Integer,
                    name.non_owning(),
                    opts,
                    &mut err,
                )
            };
            choose!(err, ())
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_set_hl_ns()`][1].
        ///
        /// Set the active namespace for the highlights defined with [`set_hl`]. This
        /// can be set for a single window, see [`Window::set_hl`].
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_set_hl_ns()
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        #[cfg_attr(
            docsrs,
            doc(cfg(any(feature = "neovim-0-10", feature = "neovim-nightly")))
        )]
        pub fn set_hl_ns(ns_id: u32) -> Result<()> {
            let mut err = nvim::Error::new();
            unsafe { nvim_set_hl_ns(ns_id as Integer, &mut err) };
            choose!(err, ())
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_set_hl_ns_fast()`][1].
        ///
        /// Set the active namespace for the highlights defined with [`set_hl`] while
        /// redrawing.
        ///
        /// This function is meant to be called while redrawing, primarily from
        /// [`set_decoration_provider`](crate::set_decoration_provider)'s `on_win` and
        /// `on_lines` callbacks, which are allowed to change the namespace during a
        /// redraw cycle.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_set_hl_ns_fast()
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        #[cfg_attr(
            docsrs,
            doc(cfg(any(feature = "neovim-0-10", feature = "neovim-nightly")))
        )]
        pub fn set_hl_ns_fast(ns_id: u32) -> Result<()> {
            let mut err = nvim::Error::new();
            unsafe { nvim_set_hl_ns_fast(ns_id as Integer, &mut err) };
            choose!(err, ())
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_set_keymap()`][1].
        ///
        /// Sets a global mapping for the given mode. To set a buffer-local mapping use
        /// [`Buffer::set_keymap`] instead.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_set_keymap()
        pub fn set_keymap(
            mode: Mode,
            lhs: &str,
            rhs: &str,
            opts: &SetKeymapOpts,
        ) -> Result<()> {
            let mode = nvim::String::from(mode);
            let lhs = nvim::String::from(lhs);
            let rhs = nvim::String::from(rhs);
            let mut err = nvim::Error::new();
            unsafe {
                nvim_set_keymap(
                    LUA_INTERNAL_CALL,
                    mode.non_owning(),
                    lhs.non_owning(),
                    rhs.non_owning(),
                    opts,
                    &mut err,
                )
            };
            choose!(err, ())
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_set_var()`][1].
        ///
        /// Sets a global (`g:`) variable.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_set_var()
        pub fn set_var<Var>(name: &str, value: Var) -> Result<()>
        where
            Var: ToObject,
        {
            let name = nvim::String::from(name);
            let value = value.to_object()?;
            let mut err = nvim::Error::new();
            unsafe { nvim_set_var(name.non_owning(), value.non_owning(), &mut err) };
            choose!(err, ())
        }

        /// Binding to [`nvim_set_vvar()`][1].
        ///
        /// Sets a `v:` variable, if it's not readonly.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_set_vvar()
        pub fn set_vvar<Var>(name: &str, value: Var) -> Result<()>
        where
            Var: ToObject,
        {
            let name = nvim::String::from(name);
            let value = value.to_object()?;
            let mut err = nvim::Error::new();
            unsafe { nvim_set_vvar(name.non_owning(), value.non_owning(), &mut err) };
            choose!(err, ())
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_strwidth()`][1].
        ///
        /// Calculates the number of display cells occupied by `text`. Control
        /// characters like `<Tab>` count as one cell.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_strwidth()
        pub fn strwidth(text: &str) -> Result<usize> {
            let text = nvim::String::from(text);
            let mut err = nvim::Error::new();
            let width = unsafe { nvim_strwidth(text.non_owning(), &mut err) };
            choose!(err, Ok(width.try_into().expect("always positive")))
        }
      metadata: {}
  1:
    hash: 6fc128ce6f707fa164633909fea0a3fefd5cdae2d0812cfa7391ade39aca93e0
    path: buffer.rs
    documents:
    - page_content: |-
        use core::ops::RangeBounds;
        use std::error::Error as StdError;
        use std::fmt;
        use std::path::{Path, PathBuf};
        use std::result::Result as StdResult;

        use luajit::{self as lua, Poppable, Pushable};
        use serde::{Deserialize, Serialize};
        use types::{
            self as nvim,
            conversion::{self, FromObject, ToObject},
            Array,
            BufHandle,
            Function,
            Integer,
            Object,
        };

        use crate::choose;
        use crate::ffi::buffer::*;
        use crate::opts::*;
        use crate::types::{KeymapInfos, Mode};
        use crate::utils;
        use crate::SuperIterator;
        use crate::LUA_INTERNAL_CALL;
        use crate::{Error, IntoResult, Result};

        /// A wrapper around a Neovim buffer handle.
        #[derive(Clone, Eq, PartialEq, Hash, Serialize, Deserialize)]
        pub struct Buffer(pub(crate) BufHandle);

        impl fmt::Debug for Buffer {
            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
                f.debug_tuple("Buffer").field(&self.0).finish()
            }
        }
      metadata: {}
    - page_content: |-
        impl fmt::Display for Buffer {
            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
                fmt::Debug::fmt(self, f)
            }
        }

        impl<H: Into<BufHandle>> From<H> for Buffer {
            #[inline(always)]
            fn from(handle: H) -> Self {
                Self(handle.into())
            }
        }

        impl From<Buffer> for Object {
            #[inline(always)]
            fn from(buf: Buffer) -> Self {
                buf.0.into()
            }
        }

        impl From<&Buffer> for Object {
            #[inline(always)]
            fn from(buf: &Buffer) -> Self {
                buf.0.into()
            }
        }

        impl FromObject for Buffer {
            #[inline(always)]
            fn from_object(obj: Object) -> StdResult<Self, conversion::Error> {
                Ok(BufHandle::from_object(obj)?.into())
            }
        }

        impl Poppable for Buffer {
            unsafe fn pop(
                lstate: *mut lua::ffi::State,
            ) -> std::result::Result<Self, lua::Error> {
                BufHandle::pop(lstate).map(Into::into)
            }
        }
      metadata: {}
    - page_content: |-
        impl Pushable for Buffer {
            unsafe fn push(
                self,
                lstate: *mut lua::ffi::State,
            ) -> std::result::Result<std::ffi::c_int, lua::Error> {
                self.0.push(lstate)
            }
        }

        impl Buffer {
            /// Shorthand for [`get_current_buf`](crate::get_current_buf).
            #[inline(always)]
            pub fn current() -> Self {
                crate::get_current_buf()
            }

            /// Retrieve buffer's underlying id/handle
            #[inline(always)]
            pub fn handle(&self) -> i32 {
                self.0
            }

            /// Binding to [`nvim_buf_attach()`][1].
            ///
            /// Used to register a set of callbacks on specific buffer events.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_buf_attach()
            pub fn attach(
                &self,
                send_buffer: bool,
                opts: &BufAttachOpts,
            ) -> Result<()> {
                let mut err = nvim::Error::new();

                #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
                let opts = types::Dictionary::from(opts);
      metadata: {}
    - page_content: |-
        let has_attached = unsafe {
                    nvim_buf_attach(
                        LUA_INTERNAL_CALL,
                        self.0,
                        send_buffer,
                        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
                        opts.non_owning(),
                        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                        opts,
                        &mut err,
                    )
                };

                choose!(
                    err,
                    match has_attached {
                        true => Ok(()),
                        _ => Err(Error::custom("Attaching to buffer failed")),
                    }
                )
            }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_buf_call()`][1].
            ///
            /// Calls a function with this buffer as the temporary current buffer.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_buf_call()
            pub fn call<F, Res, Ret>(&self, fun: F) -> Result<Ret>
            where
                F: FnOnce(()) -> Res + 'static,
                Res: IntoResult<Ret>,
                Res::Error: StdError + 'static,
                Ret: Pushable + FromObject,
            {
                let fun = Function::from_fn_once(fun);
                let mut err = nvim::Error::new();

                let obj = if cfg!(not(feature = "neovim-0-10")) {
                    // Only on 0.9.
                    unsafe { nvim_buf_call(self.0, fun.lua_ref(), &mut err) }
                } else {
                    // On 0.10 and Nightly.
                    let ref_or_nil =
                        unsafe { nvim_buf_call(self.0, fun.lua_ref(), &mut err) };
      metadata: {}
    - page_content: |-
        let lua_ref = match ref_or_nil.kind() {
                        types::ObjectKind::LuaRef => unsafe {
                            ref_or_nil.as_luaref_unchecked()
                        },
                        types::ObjectKind::Nil => {
                            return Ret::from_object(Object::nil()).map_err(Into::into)
                        },
                        other => panic!("Unexpected object kind: {:?}", other),
                    };

                    unsafe {
                        lua::with_state(|lstate| {
                            lua::ffi::lua_rawgeti(
                                lstate,
                                lua::ffi::LUA_REGISTRYINDEX,
                                lua_ref,
                            );
                            Object::pop(lstate)
                        })
                    }
                    .map_err(Error::custom)?
                };

                choose!(err, {
                    fun.remove_from_lua_registry();
                    Ok(Ret::from_object(obj)?)
                })
            }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_buf_del_keymap()`][1].
            ///
            /// Unmaps a buffer-local mapping for the given mode.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_buf_del_keymap()
            pub fn del_keymap(&mut self, mode: Mode, lhs: &str) -> Result<()> {
                let mut err = nvim::Error::new();
                let mode = nvim::String::from(mode);
                let lhs = nvim::String::from(lhs);
                unsafe {
                    nvim_buf_del_keymap(
                        LUA_INTERNAL_CALL,
                        self.0,
                        mode.non_owning(),
                        lhs.non_owning(),
                        &mut err,
                    )
                };
                choose!(err, ())
            }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_buf_del_mark()`][1].
            ///
            /// Deletes a named mark in the buffer.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_buf_del_mark()
            pub fn del_mark(&mut self, name: char) -> Result<()> {
                let mut err = nvim::Error::new();
                let name = nvim::String::from(name);
                let was_deleted =
                    unsafe { nvim_buf_del_mark(self.0, name.non_owning(), &mut err) };
                choose!(
                    err,
                    match was_deleted {
                        true => Ok(()),

                        _ => Err(Error::custom("Couldn't delete mark")),
                    }
                )
            }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_buf_del_var()`][1].
            ///
            /// Removes a buffer-scoped (`b:`) variable.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_buf_del_var()
            pub fn del_var(&mut self, name: &str) -> Result<()> {
                let mut err = nvim::Error::new();
                let name = nvim::String::from(name);
                unsafe { nvim_buf_del_var(self.0, name.non_owning(), &mut err) };
                choose!(err, ())
            }

            /// Binding to [`nvim_buf_delete()`][1].
            ///
            /// Deletes the buffer (not allowed while
            /// [`textlock`](https://neovim.io/doc/user/eval.html#textlock) is active).
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_buf_delete()
            pub fn delete(self, opts: &BufDeleteOpts) -> Result<()> {
                let mut err = nvim::Error::new();

                #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
                let opts = types::Dictionary::from(opts);
      metadata: {}
    - page_content: |-
        unsafe {
                    nvim_buf_delete(
                        self.0,
                        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
                        opts.non_owning(),
                        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                        opts,
                        &mut err,
                    )
                };

                choose!(err, ())
            }

            /// Binding to [`nvim_buf_get_changedtick()`][1].
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_buf_get_changedtick()
            pub fn get_changedtick(&self) -> Result<u32> {
                let mut err = nvim::Error::new();
                let ct = unsafe { nvim_buf_get_changedtick(self.0, &mut err) };
                choose!(err, Ok(ct.try_into().expect("always positive")))
            }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_buf_get_keymap()`][1].
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_buf_get_keymap()
            pub fn get_keymap(
                &self,
                mode: Mode,
            ) -> Result<impl SuperIterator<KeymapInfos>> {
                let mut err = nvim::Error::new();
                let mode = nvim::String::from(mode);
                let maps = unsafe {
                    nvim_buf_get_keymap(
                        self.0,
                        mode.non_owning(),
                        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                        types::arena(),
                        &mut err,
                    )
                };
                choose!(
                    err,
                    Ok({
                        maps.into_iter()
                            .map(|obj| KeymapInfos::from_object(obj).unwrap())
                    })
                )
            }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_buf_get_lines()`][1].
            ///
            /// Gets a line range from the buffer. Indexing is zero-based,
            /// end-exclusive.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_buf_get_lines()
            pub fn get_lines<R>(
                &self,
                line_range: R,
                strict_indexing: bool,
            ) -> Result<impl SuperIterator<nvim::String>>
            where
                R: RangeBounds<usize>,
            {
                let mut err = nvim::Error::new();
                let (start, end) = utils::range_to_limits(line_range);
                let lines = unsafe {
                    nvim_buf_get_lines(
                        LUA_INTERNAL_CALL,
                        self.0,
                        start,
                        end,
                        strict_indexing,
                        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                        types::arena(),
                        #[cfg(any(
                            feature = "neovim-0-9",
                            feature = "neovim-nightly"
                        ))]
      metadata: {}
    - page_content: |-
        ))]
                        // The nvim_buf_get_lines() function returns no line if we use
                        // an actual lstate here.
                        core::ptr::null_mut(),
                        &mut err,
                    )
                };
                choose!(
                    err,
                    Ok({
                        lines
                            .into_iter()
                            .map(|line| nvim::String::from_object(line).unwrap())
                    })
                )
            }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_buf_get_mark()`][1].
            ///
            /// Returns a (1-0) indexed `(row, col)` tuple representing the position
            /// of the named mark.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_buf_get_mark()
            pub fn get_mark(&self, name: char) -> Result<(usize, usize)> {
                let mut err = nvim::Error::new();
                let name = nvim::String::from(name);
                let mark = unsafe {
                    nvim_buf_get_mark(
                        self.0,
                        name.non_owning(),
                        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                        types::arena(),
                        &mut err,
                    )
                };
                choose!(err, {
                    let mut iter = mark.into_iter().map(usize::from_object);
                    let row = iter.next().expect("row is present")?;
                    let col = iter.next().expect("col is present")?;
                    Ok((row, col))
                })
            }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_buf_get_name()`][1].
            ///
            /// Returns the full filepath of the buffer.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_buf_get_name()
            pub fn get_name(&self) -> Result<PathBuf> {
                let mut err = nvim::Error::new();
                let name =
                    unsafe { nvim_buf_get_name(self.0, types::arena(), &mut err) };
                choose!(err, Ok(name.into()))
            }

            /// Binding to [`nvim_buf_get_offset()`][1].
            ///
            /// Returns the 0-indexed byte offset of a line.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_buf_get_offset()
            pub fn get_offset(&self, index: usize) -> Result<usize> {
                let mut err = nvim::Error::new();
                let offset =
                    unsafe { nvim_buf_get_offset(self.0, index as Integer, &mut err) };
                choose!(err, Ok(offset.try_into().expect("offset is positive")))
            }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_buf_get_text()`][1].
            ///
            /// Gets a range from the buffer. This differs from `Buffer::get_lines` in
            /// that it allows retrieving only portions of a line.
            ///
            /// Indexing is zero-based, with both row and column indices being
            /// end-exclusive.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_buf_get_text()
            pub fn get_text<R>(
                &self,
                line_range: R,
                start_col: usize,
                end_col: usize,
                opts: &GetTextOpts,
            ) -> Result<impl SuperIterator<nvim::String>>
            where
                R: RangeBounds<usize>,
            {
                let mut err = nvim::Error::new();
                #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
                let opts = types::Dictionary::from(opts);
                let (start, end) = utils::range_to_limits(line_range);
                let lines = unsafe {
                    nvim_buf_get_text(
                        LUA_INTERNAL_CALL,
                        self.0,
                        start,
      metadata: {}
    - page_content: |-
        self.0,
                        start,
                        start_col.try_into()?,
                        end,
                        end_col.try_into()?,
                        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
                        opts.non_owning(),
                        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                        opts,
                        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                        types::arena(),
                        #[cfg(any(
                            feature = "neovim-0-9",
                            feature = "neovim-nightly"
                        ))]
                        // The nvim_buf_get_text() function returns no line if we use an actual lstate here
                        std::ptr::null_mut(),
                        &mut err,
                    )
                };
                choose!(
                    err,
                    Ok({
                        lines
                            .into_iter()
                            .map(|line| nvim::String::from_object(line).unwrap())
                    })
                )
            }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_buf_get_var()`][1].
            ///
            /// Gets a buffer-scoped (`b:`) variable.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_buf_get_var()
            pub fn get_var<Var>(&self, name: &str) -> Result<Var>
            where
                Var: FromObject,
            {
                let mut err = nvim::Error::new();
                let name = nvim::String::from(name);
                let obj = unsafe {
                    nvim_buf_get_var(
                        self.0,
                        name.non_owning(),
                        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                        types::arena(),
                        &mut err,
                    )
                };
                choose!(err, Ok(Var::from_object(obj)?))
            }

            /// Binding to [`nvim_buf_is_loaded()`][1].
            ///
            /// Checks if a buffer is valid and loaded.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_buf_is_loaded()
            pub fn is_loaded(&self) -> bool {
                unsafe { nvim_buf_is_loaded(self.0) }
            }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_buf_is_valid()`][1].
            ///
            /// Checks if a buffer is valid.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_buf_is_valid()
            pub fn is_valid(&self) -> bool {
                unsafe { nvim_buf_is_valid(self.0) }
            }

            /// Binding to [`nvim_buf_line_count()`][1].
            ///
            /// Returns the number of lines in the given buffer.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_buf_line_count()
            pub fn line_count(&self) -> Result<usize> {
                let mut err = nvim::Error::new();
                let count = unsafe { nvim_buf_line_count(self.0, &mut err) };
                choose!(err, Ok(count.try_into().expect("always positive")))
            }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_buf_set_keymap()`][1].
            ///
            /// Sets a buffer-local mapping for the given mode. To set a global mapping
            /// use [`set_keymap`](crate::set_keymap) instead.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_buf_set_keymap()
            pub fn set_keymap(
                &mut self,
                mode: Mode,
                lhs: &str,
                rhs: &str,
                opts: &SetKeymapOpts,
            ) -> Result<()> {
                let mode = nvim::String::from(mode);
                let lhs = nvim::String::from(lhs);
                let rhs = nvim::String::from(rhs);
                let mut err = nvim::Error::new();
                unsafe {
                    nvim_buf_set_keymap(
                        LUA_INTERNAL_CALL,
                        self.0,
                        mode.non_owning(),
                        lhs.non_owning(),
                        rhs.non_owning(),
                        opts,
                        &mut err,
                    )
                };
                choose!(err, ())
            }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_buf_set_lines()`][1].
            ///
            /// Sets (replaces) a line-range in the buffer. Indexing is zero-based,
            /// end-exclusive.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_buf_set_lines()
            pub fn set_lines<Line, Lines, R>(
                &mut self,
                line_range: R,
                strict_indexing: bool,
                replacement: Lines,
            ) -> Result<()>
            where
                R: RangeBounds<usize>,
                Lines: IntoIterator<Item = Line>,
                Line: Into<nvim::String>,
            {
                let rpl = replacement.into_iter().map(Into::into).collect::<Array>();
                let mut err = nvim::Error::new();
                let (start, end) = utils::range_to_limits(line_range);
                unsafe {
                    nvim_buf_set_lines(
                        LUA_INTERNAL_CALL,
                        self.0,
                        start,
                        end,
                        strict_indexing,
                        rpl.non_owning(),
                        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
      metadata: {}
    - page_content: |-
        types::arena(),
                        &mut err,
                    )
                };
                choose!(err, ())
            }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_buf_set_mark()`][1].
            ///
            /// Sets a named mark in the buffer. Marks are (1,0)-indexed, and passing 0
            /// as `line` deletes the mark.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_buf_set_mark()
            pub fn set_mark(
                &mut self,
                name: char,
                line: usize,
                col: usize,
                opts: &SetMarkOpts,
            ) -> Result<()> {
                let mut err = nvim::Error::new();
                let name = nvim::String::from(name);
                #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
                let opts = types::Dictionary::from(opts);
                let mark_was_set = unsafe {
                    nvim_buf_set_mark(
                        self.0,
                        name.non_owning(),
                        line.try_into()?,
                        col.try_into()?,
                        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
                        opts.non_owning(),
                        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                        opts,
      metadata: {}
    - page_content: |-
        opts,
                        &mut err,
                    )
                };
                choose!(
                    err,
                    match mark_was_set {
                        true => Ok(()),
                        _ => Err(Error::custom("Couldn't set mark")),
                    }
                )
            }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_buf_set_name()`][1].
            ///
            /// Sets the full file name for a buffer.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_buf_set_name()
            pub fn set_name<Name: AsRef<Path>>(&mut self, name: Name) -> Result<()> {
                let name = nvim::String::from(name.as_ref());
                let mut err = nvim::Error::new();
                unsafe { nvim_buf_set_name(self.0, name.non_owning(), &mut err) };
                choose!(err, ())
            }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_buf_set_text()`][1].
            ///
            /// Sets (replaces) a range in the buffer. Indexing is zero-based, with
            /// both row and column indices being end-exclusive.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_buf_set_text()
            pub fn set_text<Line, Lines, R>(
                &mut self,
                line_range: R,
                start_col: usize,
                end_col: usize,
                replacement: Lines,
            ) -> Result<()>
            where
                R: RangeBounds<usize>,
                Lines: IntoIterator<Item = Line>,
                Line: Into<nvim::String>,
            {
                let mut err = nvim::Error::new();
                let (start, end) = utils::range_to_limits(line_range);
                unsafe {
                    nvim_buf_set_text(
                        LUA_INTERNAL_CALL,
                        self.0,
                        start,
                        start_col.try_into()?,
                        end,
                        end_col.try_into()?,
                        replacement
                            .into_iter()
      metadata: {}
    - page_content: |-
        .into_iter()
                            .map(|line| line.into())
                            .collect::<Array>()
                            .non_owning(),
                        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                        types::arena(),
                        &mut err,
                    )
                };
                choose!(err, ())
            }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_buf_set_var()`][1].
            ///
            /// Sets a buffer-scoped (`b:`) variable.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_buf_set_var()
            pub fn set_var<V>(&mut self, name: &str, value: V) -> Result<()>
            where
                V: ToObject,
            {
                let mut err = nvim::Error::new();
                let name = nvim::String::from(name);
                unsafe {
                    nvim_buf_set_var(
                        self.0,
                        name.non_owning(),
                        value.to_object()?.non_owning(),
                        &mut err,
                    )
                };
                choose!(err, ())
            }
        }
      metadata: {}
  2:
    hash: 234c40a4bbdc264d553dff80b51e90c6c261b484a20a7d5b2a406e348c2c08f3
    path: command.rs
    documents:
    - page_content: |-
        use types::{self as nvim, conversion::FromObject};

        use super::opts::*;
        use crate::choose;
        use crate::ffi::command::*;
        use crate::trait_utils::{StringOrFunction, SuperIterator};
        use crate::types::*;
        use crate::Buffer;
        use crate::Result;
        use crate::LUA_INTERNAL_CALL;

        /// Binding to [`nvim_cmd()`][1].
        ///
        /// Executes an Ex command. Unlike `crare::api::command` it takes a structured
        /// `CmdInfos` object instead of a string.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_cmd()
        pub fn cmd(infos: &CmdInfos, opts: &CmdOpts) -> Result<Option<String>> {
            let mut err = nvim::Error::new();
            let output = unsafe {
                nvim_cmd(
                    LUA_INTERNAL_CALL,
                    &infos.into(),
                    opts,
                    #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                    types::arena(),
                    &mut err,
                )
            };
            choose!(err, {
                Ok((!output.is_empty()).then(|| output.to_string_lossy().into()))
            })
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_create_user_command()`][1].
        ///
        /// Creates a new [user command](https://neovim.io/doc/user/map.html#user-commands).
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_create_user_command()
        pub fn create_user_command<Cmd>(
            name: &str,
            command: Cmd,
            opts: &CreateCommandOpts,
        ) -> Result<()>
        where
            Cmd: StringOrFunction<CommandArgs, ()>,
        {
            let name = nvim::String::from(name);
            let command = command.to_object();
            let mut err = nvim::Error::new();
            unsafe {
                nvim_create_user_command(
                    LUA_INTERNAL_CALL,
                    name.non_owning(),
                    command.non_owning(),
                    opts,
                    &mut err,
                )
            };
            choose!(err, ())
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_del_user_command()`][1].
        ///
        /// Deletes a global user-defined command.  Use [`Buffer::del_user_command`] to
        /// delete a buffer-local command.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_del_user_command()
        pub fn del_user_command(name: &str) -> Result<()> {
            let name = nvim::String::from(name);
            let mut err = nvim::Error::new();
            unsafe { nvim_del_user_command(name.non_owning(), &mut err) };
            choose!(err, ())
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_get_commands()`][1].
        ///
        /// Returns an iterator over the infos of the global ex commands. Only
        /// user-defined commands are returned, not builtin ones.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_get_commands()
        pub fn get_commands(
            opts: &GetCommandsOpts,
        ) -> Result<impl SuperIterator<CommandInfos>> {
            let mut err = nvim::Error::new();
            let cmds = unsafe {
                nvim_get_commands(
                    opts,
                    #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                    types::arena(),
                    &mut err,
                )
            };
            choose!(
                err,
                Ok({
                    cmds.into_iter()
                        .map(|(_, cmd)| CommandInfos::from_object(cmd).unwrap())
                })
            )
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_parse_cmd()`][1].
        ///
        /// Parses the command line.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_parse_cmd()
        pub fn parse_cmd(src: &str, opts: &ParseCmdOpts) -> Result<CmdInfos> {
            let src = nvim::String::from(src);
            #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
            let opts = nvim::Dictionary::from(opts);
            let mut err = nvim::Error::new();

            let out = unsafe {
                nvim_parse_cmd(
                    src.non_owning(),
                    #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
                    opts.non_owning(),
                    #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                    opts,
                    #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                    types::arena(),
                    &mut err,
                )
            };

            #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
            let out = CmdInfos::from_object(out.into())?;

            #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
            let out = CmdInfos::try_from(out)?;
      metadata: {}
    - page_content: |-
        choose!(err, Ok(out))
        }
      metadata: {}
    - page_content: |-
        impl Buffer {
            /// Binding to [`nvim_buf_create_user_command()`][1].
            ///
            /// Creates a new buffer-local user command.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_buf_create_user_command()
            pub fn create_user_command<Cmd>(
                &mut self,
                name: &str,
                command: Cmd,
                opts: &CreateCommandOpts,
            ) -> Result<()>
            where
                Cmd: StringOrFunction<CommandArgs, ()>,
            {
                let mut err = nvim::Error::new();
                let name = nvim::String::from(name);
                let command = command.to_object();
                unsafe {
                    nvim_buf_create_user_command(
                        #[cfg(any(
                            feature = "neovim-0-9",
                            feature = "neovim-nightly"
                        ))]
                        LUA_INTERNAL_CALL,
                        self.0,
                        name.non_owning(),
                        command.non_owning(),
                        opts,
                        &mut err,
                    )
                };
                choose!(err, ())
            }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_buf_del_user_command()`][1].
            ///
            /// Deletes a buffer-local user-command. Use
            /// [`del_user_command`](crate::del_user_command) to delete a global
            /// command.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_buf_del_user_command()
            pub fn del_user_command(&mut self, name: &str) -> Result<()> {
                let mut err = nvim::Error::new();
                let name = nvim::String::from(name);
                unsafe {
                    nvim_buf_del_user_command(self.0, name.non_owning(), &mut err)
                };
                choose!(err, ())
            }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_buf_get_commands()`][1].
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_buf_get_commands()
            pub fn get_commands(
                &self,
                opts: &GetCommandsOpts,
            ) -> Result<impl SuperIterator<CommandInfos>> {
                let mut err = nvim::Error::new();
                let cmds = unsafe {
                    nvim_buf_get_commands(
                        self.0,
                        opts,
                        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                        types::arena(),
                        &mut err,
                    )
                };
                choose!(
                    err,
                    Ok({
                        cmds.into_iter()
                            .map(|(_, cmd)| CommandInfos::from_object(cmd).unwrap())
                    })
                )
            }
        }
      metadata: {}
  3:
    hash: 733429b0fbf7f2700a98e9e685ba0085abfb944df99e9d48de1f733f2e9258ec
    path: window.rs
    documents:
    - page_content: |-
        use std::error::Error as StdError;
        use std::fmt;
        use std::result::Result as StdResult;

        use luajit::{self as lua, Poppable, Pushable};
        use serde::{Deserialize, Serialize};
        use types::{
            self as nvim,
            conversion::{self, FromObject, ToObject},
            Array,
            Function,
            Integer,
            Object,
            WinHandle,
        };

        use crate::choose;
        use crate::ffi::window::*;
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        use crate::opts::WinTextHeightOpts;
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        use crate::types::WinTextHeightInfos;
        use crate::Result;
        use crate::{Buffer, IntoResult, TabPage};

        /// A wrapper around a Neovim window handle.
        #[derive(Clone, Eq, PartialEq, Hash, Serialize, Deserialize)]
        pub struct Window(pub(crate) WinHandle);

        impl fmt::Debug for Window {
            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
                f.debug_tuple("Window").field(&self.0).finish()
            }
        }
      metadata: {}
    - page_content: |-
        impl fmt::Display for Window {
            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
                fmt::Debug::fmt(self, f)
            }
        }

        impl<H: Into<WinHandle>> From<H> for Window {
            fn from(handle: H) -> Self {
                Self(handle.into())
            }
        }

        impl From<Window> for Object {
            fn from(win: Window) -> Self {
                win.0.into()
            }
        }

        impl From<&Window> for Object {
            fn from(win: &Window) -> Self {
                win.0.into()
            }
        }

        impl FromObject for Window {
            fn from_object(obj: Object) -> StdResult<Self, conversion::Error> {
                Ok(WinHandle::from_object(obj)?.into())
            }
        }

        impl Poppable for Window {
            unsafe fn pop(
                lstate: *mut lua::ffi::State,
            ) -> std::result::Result<Self, lua::Error> {
                WinHandle::pop(lstate).map(Into::into)
            }
        }

        impl Pushable for Window {
            unsafe fn push(
                self,
                lstate: *mut lua::ffi::State,
            ) -> std::result::Result<std::ffi::c_int, lua::Error> {
                self.0.push(lstate)
            }
        }
      metadata: {}
    - page_content: |-
        impl Window {
            /// Shorthand for [`get_current_win`](crate::get_current_win).
            #[inline(always)]
            pub fn current() -> Self {
                crate::get_current_win()
            }

            /// Retrieve window's underlying id/handle
            #[inline(always)]
            pub fn handle(&self) -> i32 {
                self.0
            }

            /// Binding to [`nvim_win_call()`][1].
            ///
            /// Calls a function with this window as the temporary current window.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_win_call()
            pub fn call<F, Res, Ret>(&self, fun: F) -> Result<Ret>
            where
                F: FnOnce(()) -> Res + 'static,
                Res: IntoResult<Ret>,
                Res::Error: StdError + 'static,
                Ret: Pushable + FromObject,
            {
                let fun = Function::from_fn_once(fun);
                let mut err = nvim::Error::new();
      metadata: {}
    - page_content: |-
        let obj = if cfg!(not(feature = "neovim-0-10")) {
                    // Only on 0.9.
                    unsafe { nvim_win_call(self.0, fun.lua_ref(), &mut err) }
                } else {
                    // On 0.10 and Nightly.
                    let ref_or_nil =
                        unsafe { nvim_win_call(self.0, fun.lua_ref(), &mut err) };

                    let lua_ref = match ref_or_nil.kind() {
                        types::ObjectKind::LuaRef => unsafe {
                            ref_or_nil.as_luaref_unchecked()
                        },
                        types::ObjectKind::Nil => {
                            return Ret::from_object(Object::nil()).map_err(Into::into)
                        },
                        other => panic!("Unexpected object kind: {:?}", other),
                    };
      metadata: {}
    - page_content: |-
        unsafe {
                        lua::with_state(|lstate| {
                            lua::ffi::lua_rawgeti(
                                lstate,
                                lua::ffi::LUA_REGISTRYINDEX,
                                lua_ref,
                            );
                            Object::pop(lstate)
                        })
                    }
                    .map_err(crate::Error::custom)?
                };

                choose!(err, {
                    fun.remove_from_lua_registry();
                    Ok(Ret::from_object(obj)?)
                })
            }

            /// Binding to [`nvim_win_close()`][1].
            ///
            /// Closes the window. Not allowed when
            /// [`textlock`](https://neovim.io/doc/user/eval.html#textlock) is active.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_win_close()
            pub fn close(self, force: bool) -> Result<()> {
                let mut err = nvim::Error::new();
                unsafe { nvim_win_close(self.0, force, &mut err) };
                choose!(err, ())
            }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_win_del_var()`][1].
            ///
            /// Removes a window-scoped (`w:`) variable.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_win_del_var()
            pub fn del_var(&mut self, name: &str) -> Result<()> {
                let mut err = nvim::Error::new();
                let name = nvim::String::from(name);
                unsafe { nvim_win_del_var(self.0, name.non_owning(), &mut err) };
                choose!(err, ())
            }

            /// Binding to [`nvim_win_get_buf()`][1].
            ///
            /// Gets the current [`Buffer`] in the window.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_win_get_buf()
            pub fn get_buf(&self) -> Result<Buffer> {
                let mut err = nvim::Error::new();
                let handle = unsafe { nvim_win_get_buf(self.0, &mut err) };
                choose!(err, Ok(handle.into()))
            }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_win_get_cursor()`][1].
            ///
            /// Gets the (1,0)-indexed cursor position in the window.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_win_get_cursor()
            pub fn get_cursor(&self) -> Result<(usize, usize)> {
                let mut err = nvim::Error::new();
                let arr = unsafe {
                    nvim_win_get_cursor(
                        self.0,
                        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                        types::arena(),
                        &mut err,
                    )
                };
                choose!(err, {
                    let mut iter = arr.into_iter();
                    let line = usize::from_object(iter.next().unwrap())?;
                    let col = usize::from_object(iter.next().unwrap())?;
                    Ok((line, col))
                })
            }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_win_get_height()`][1].
            ///
            /// Gets the window height as a count of rows.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_win_get_height()
            pub fn get_height(&self) -> Result<u32> {
                let mut err = nvim::Error::new();
                let height = unsafe { nvim_win_get_height(self.0, &mut err) };
                choose!(err, Ok(height.try_into().expect("always positive")))
            }

            /// Binding to [`nvim_win_get_number()`][1].
            ///
            /// Gets the window number.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_win_get_number()
            pub fn get_number(&self) -> Result<u32> {
                let mut err = nvim::Error::new();
                let nr = unsafe { nvim_win_get_number(self.0, &mut err) };
                choose!(err, Ok(nr.try_into().expect("always positive")))
            }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_win_get_position()`][1].
            ///
            /// Gets the window position in display cells.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_win_get_position()
            pub fn get_position(&self) -> Result<(usize, usize)> {
                let mut err = nvim::Error::new();
                let arr = unsafe {
                    nvim_win_get_position(
                        self.0,
                        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                        types::arena(),
                        &mut err,
                    )
                };
                choose!(err, {
                    let mut iter = arr.into_iter();
                    let line = usize::from_object(iter.next().unwrap())?;
                    let col = usize::from_object(iter.next().unwrap())?;
                    Ok((line, col))
                })
            }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_win_get_tabpage()`][1].
            ///
            /// Gets the window's `TabPage`.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_win_get_tabpage()
            pub fn get_tabpage(&self) -> Result<TabPage> {
                let mut err = nvim::Error::new();
                let handle = unsafe { nvim_win_get_tabpage(self.0, &mut err) };
                choose!(err, Ok(handle.into()))
            }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_win_get_var()`][1].
            ///
            /// Gets a window-scoped (`w:`) variable.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_win_get_var()
            pub fn get_var<Var>(&self, name: &str) -> Result<Var>
            where
                Var: FromObject,
            {
                let mut err = nvim::Error::new();
                let name = nvim::String::from(name);
                let obj = unsafe {
                    nvim_win_get_var(
                        self.0,
                        name.non_owning(),
                        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                        types::arena(),
                        &mut err,
                    )
                };
                choose!(err, Ok(Var::from_object(obj)?))
            }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_win_get_width()`][1].
            ///
            /// Gets the window width as a number of columns.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_win_get_width()
            pub fn get_width(&self) -> Result<u32> {
                let mut err = nvim::Error::new();
                let width = unsafe { nvim_win_get_width(self.0, &mut err) };
                choose!(err, Ok(width.try_into().expect("always positive")))
            }

            /// Binding to [`nvim_win_hide()`][1].
            ///
            /// Closes the window and hides the buffer it contains.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_win_hide()
            pub fn hide(self) -> Result<()> {
                let mut err = nvim::Error::new();
                unsafe { nvim_win_hide(self.0, &mut err) };
                choose!(err, ())
            }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_win_is_valid()`][1].
            ///
            /// Checks if the window is valid.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_win_is_valid()
            pub fn is_valid(&self) -> bool {
                unsafe { nvim_win_is_valid(self.0) }
            }

            /// Binding to [`nvim_win_set_buf()`][1].
            ///
            /// Sets `buffer` as the current buffer in the window.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_win_set_buf()
            pub fn set_buf(&mut self, buffer: &Buffer) -> Result<()> {
                let mut err = nvim::Error::new();
                unsafe { nvim_win_set_buf(self.0, buffer.0, &mut err) };
                choose!(err, ())
            }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_win_set_cursor()`][1].
            ///
            /// Sets the (1,0)-indexed cursor in the window. This will scroll the
            /// window even if it's not the current one.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_win_set_cursor()
            pub fn set_cursor(&mut self, line: usize, col: usize) -> Result<()> {
                let mut err = nvim::Error::new();
                let pos = Array::from_iter([line as Integer, col as Integer]);
                unsafe { nvim_win_set_cursor(self.0, pos.non_owning(), &mut err) };
                choose!(err, ())
            }

            /// Binding to [`nvim_win_set_height()`][1].
            ///
            /// Sets the window height.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_win_set_height()
            pub fn set_height(&mut self, height: u32) -> Result<()> {
                let mut err = nvim::Error::new();
                unsafe { nvim_win_set_height(self.0, height.into(), &mut err) };
                choose!(err, ())
            }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_win_set_hl()`][1].
            ///
            /// Sets the highlight namespace for this window. This will the highlights
            /// defined with [`set_hl`](crate::set_hl) for the given namespace, but
            /// fall back to global highlights (`ns_id = 0`) if those are missing.
            ///
            /// This takes precedence over the `winhighlight` option.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_win_set_hl()
            #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
            #[cfg_attr(
                docsrs,
                doc(cfg(any(feature = "neovim-0-10", feature = "neovim-nightly")))
            )]
            pub fn set_hl(&mut self, ns_id: u32) -> Result<()> {
                let mut err = nvim::Error::new();
                unsafe { nvim_win_set_hl(self.0, ns_id.into(), &mut err) };
                choose!(err, ())
            }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_win_set_var()`][1].
            ///
            /// Sets a window-scoped (`w:`) variable.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_win_set_var()
            pub fn set_var<Var>(&mut self, name: &str, value: Var) -> Result<()>
            where
                Var: ToObject,
            {
                let mut err = nvim::Error::new();
                let name = nvim::String::from(name);
                unsafe {
                    nvim_win_set_var(
                        self.0,
                        name.non_owning(),
                        value.to_object()?.non_owning(),
                        &mut err,
                    )
                };
                choose!(err, ())
            }

            /// Binding to [`nvim_win_set_width()`][1].
            ///
            /// Sets the window width.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_win_set_width()
            pub fn set_width(&mut self, width: u32) -> Result<()> {
                let mut err = nvim::Error::new();
                unsafe { nvim_win_set_width(self.0, width.into(), &mut err) };
                choose!(err, ())
            }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_win_text_height()`][1].
            ///
            /// Computes the number of screen lines occupied by a range of text in a
            /// given window. Works for off-screen text and takes folds into account.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_win_text_height()
            #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
            #[cfg_attr(
                docsrs,
                doc(cfg(any(feature = "neovim-0-10", feature = "neovim-nightly")))
            )]
            pub fn text_height(
                &self,
                opts: &WinTextHeightOpts,
            ) -> Result<WinTextHeightInfos> {
                let mut err = nvim::Error::new();
                let dict = unsafe {
                    nvim_win_text_height(self.0, opts, types::arena(), &mut err)
                };
                choose!(err, dict.try_into().map_err(Into::into))
            }
        }
      metadata: {}
  4:
    hash: 110b8beedf08ecaa9a03043a2b62eeed6b2c5363b52a9e0317594ba57a650dca
    path: win_config.rs
    documents:
    - page_content: |-
        use types as nvim;

        use crate::choose;
        use crate::ffi::win_config::*;
        use crate::types::*;
        use crate::Result;
        use crate::{Buffer, Window};

        /// Binding to [`nvim_open_win()`][1].
        ///
        /// Opens a new floating or external window.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_open_win()
        pub fn open_win(
            buf: &Buffer,
            enter: bool,
            config: &WindowConfig,
        ) -> Result<Window> {
            let mut err = nvim::Error::new();
            let handle =
                unsafe { nvim_open_win(buf.0, enter, &config.into(), &mut err) };
            choose!(err, Ok(handle.into()))
        }

        impl Window {
            /// Binding to [`nvim_win_get_config()`][1].
            ///
            /// Gets the window configuration.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_win_get_config()
            pub fn get_config(&self) -> Result<WindowConfig> {
                let mut err = nvim::Error::new();
      metadata: {}
    - page_content: |-
        let out = unsafe {
                    nvim_win_get_config(
                        self.0,
                        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                        types::arena(),
                        &mut err,
                    )
                };

                let out = WindowConfig::try_from(out)?;

                choose!(err, Ok(out))
            }

            /// Binding to [`nvim_win_get_config()`][1].
            ///
            /// Configures the window layout. Only for floating and external windows.
            ///
            /// [1]: https://neovim.io/doc/user/api.html#nvim_win_get_config()
            pub fn set_config(&mut self, config: &WindowConfig) -> Result<()> {
                let mut err = nvim::Error::new();
                unsafe { nvim_win_set_config(self.0, &config.into(), &mut err) };
                choose!(err, ())
            }
        }
      metadata: {}
  5:
    hash: be1398e27f5a002769792ddacd8c5f6eaf75264df7fd6792a4dba19645c94d39
    path: vimscript.rs
    documents:
    - page_content: |-
        use types::{self as nvim, conversion::FromObject, Array, Object};

        use crate::choose;
        use crate::ffi::vimscript::*;
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        use crate::opts::ExecOpts;
        use crate::types::*;
        use crate::Result;
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_call_dict_function()`][1].
        ///
        /// Calls a VimL dictionary function with the given arguments, returning the
        /// result of the funtion call.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_call_dict_function()
        pub fn call_dict_function<Args, Ret>(
            dict: &str,
            func: &str,
            args: Args,
        ) -> Result<Ret>
        where
            Args: Into<Array>,
            Ret: FromObject,
        {
            let dict = Object::from(nvim::String::from(dict));
            let func = nvim::String::from(func);
            let args = args.into();
            let mut err = nvim::Error::new();
            let res = unsafe {
                nvim_call_dict_function(
                    dict.non_owning(),
                    func.non_owning(),
                    args.non_owning(),
                    #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                    types::arena(),
                    &mut err,
                )
            };
            choose!(err, Ok(Ret::from_object(res)?))
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_call_function()`][1].
        ///
        /// Calls a VimL function with the given arguments, returning the result of the
        /// funtion call.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_call_function()
        pub fn call_function<Args, Ret>(func: &str, args: Args) -> Result<Ret>
        where
            Args: Into<Array>,
            Ret: FromObject,
        {
            let func = nvim::String::from(func);
            let args = args.into();
            let mut err = nvim::Error::new();
            let res = unsafe {
                nvim_call_function(
                    func.non_owning(),
                    args.non_owning(),
                    #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                    types::arena(),
                    &mut err,
                )
            };
            choose!(err, Ok(Ret::from_object(res)?))
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_command()`][1].
        ///
        /// Executes an Ex command.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_command()
        pub fn command(command: &str) -> Result<()> {
            let command = nvim::String::from(command);
            let mut err = nvim::Error::new();
            unsafe { nvim_command(command.non_owning(), &mut err) };
            choose!(err, ())
        }

        /// Binding to [`nvim_eval()`][1].
        ///
        /// Evaluates a VimL expression.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_eval()
        pub fn eval<V>(expr: &str) -> Result<V>
        where
            V: FromObject,
        {
            let expr = nvim::String::from(expr);
            let mut err = nvim::Error::new();
            let output = unsafe {
                nvim_eval(
                    expr.non_owning(),
                    #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                    types::arena(),
                    &mut err,
                )
            };
            choose!(err, Ok(V::from_object(output)?))
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_exec2()`][1].
        ///
        /// Executes Vimscript (multiline block of Ex commands), like anonymous
        /// `:source`.
        ///
        /// Unlike [`command`] this function supports heredocs, script-scope (s:), etc.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_exec2()
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        #[cfg_attr(
            docsrs,
            doc(cfg(any(feature = "neovim-0-10", feature = "neovim-nightly")))
        )]
        pub fn exec2(src: &str, opts: &ExecOpts) -> Result<Option<nvim::String>> {
            let src = types::String::from(src);
            let mut err = types::Error::new();
            let dict = unsafe {
                nvim_exec2(crate::LUA_INTERNAL_CALL, src.non_owning(), opts, &mut err)
            };
            choose!(err, {
                Ok(dict
                    .into_iter()
                    .next()
                    .map(|(_s, output)| nvim::String::from_object(output).unwrap()))
            })
        }
      metadata: {}
    - page_content: |-
        /// Binding to [`nvim_parse_expression()`][1].
        ///
        /// Parses a VimL expression.
        ///
        /// [1]: https://neovim.io/doc/user/api.html#nvim_parse_expression()
        pub fn parse_expression(
            expr: &str,
            flags: &str,
            include_highlight: bool,
        ) -> Result<ParsedVimLExpression> {
            let expr = nvim::String::from(expr);
            let flags = nvim::String::from(flags);
            let mut err = nvim::Error::new();
            let dict = unsafe {
                nvim_parse_expression(
                    expr.non_owning(),
                    flags.non_owning(),
                    include_highlight,
                    #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                    types::arena(),
                    &mut err,
                )
            };
            choose!(err, Ok(ParsedVimLExpression::from_object(dict.into())?))
        }
      metadata: {}
  6:
    hash: 5f5db19c3ca879de0435d696dd40251ec0376d1f6a95c3338e098fa04267d87c
    path: ./types/extmark_virt_text_position.rs
    documents:
    - page_content: |-
        use serde::Deserialize;
        use types as nvim;

        #[non_exhaustive]
        #[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, Deserialize)]
        /// Controls the positioning of the virtual text associated to an extmark.
        #[serde(rename_all(deserialize = "snake_case"))]
        pub enum ExtmarkVirtTextPosition {
            /// Right after the EOL character (default).
            Eol,

            /// Display over the specified column, without shifting the underlying
            /// text.
            Overlay,

            /// Display right aligned in the window.
            RightAlign,

            /// Display at the specified column, and shift the buffer text to the right
            /// as needed.
            #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
            #[cfg_attr(
                docsrs,
                doc(cfg(any(feature = "neovim-0-10", feature = "neovim-nightly")))
            )]
            Inline,
        }

        impl From<ExtmarkVirtTextPosition> for nvim::String {
            fn from(pos: ExtmarkVirtTextPosition) -> Self {
                use ExtmarkVirtTextPosition::*;
      metadata: {}
    - page_content: |-
        Self::from(match pos {
                    Eol => "eol",
                    Overlay => "overlay",
                    RightAlign => "right_align",
                    #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                    Inline => "inline",
                })
            }
        }
      metadata: {}
  7:
    hash: a4f2299dcb5019d34d6a6f236eec2baf8fefb3c3285b1a8fb47ae2f35cddc1fa
    path: ./types/one_or_more.rs
    documents:
    - page_content: |-
        use serde::Deserialize;

        #[derive(Clone, Debug, Eq, PartialEq, Hash, Deserialize)]
        #[serde(untagged)]
        pub enum OneOrMore<T> {
            One(T),
            List(Vec<T>),
        }

        impl<T> From<T> for OneOrMore<T> {
            fn from(one: T) -> Self {
                OneOrMore::One(one)
            }
        }

        impl<T> From<Vec<T>> for OneOrMore<T> {
            fn from(vec: Vec<T>) -> Self {
                OneOrMore::List(vec)
            }
        }

        impl From<&str> for OneOrMore<String> {
            fn from(s: &str) -> Self {
                OneOrMore::One(s.to_owned())
            }
        }

        impl<T: PartialEq> PartialEq<T> for OneOrMore<T> {
            fn eq(&self, other: &T) -> bool {
                match self {
                    OneOrMore::One(one) => one == other,
                    OneOrMore::List(_) => false,
                }
            }
        }
      metadata: {}
  8:
    hash: 001cd128870347d698a0be945ae5898ff51c689efb8b3e3e24a7b73c5a34f159
    path: ./types/cmd_range.rs
    documents:
    - page_content: |-
        use std::fmt;

        use serde::de;
        use types::{Array, Integer, Object};

        #[non_exhaustive]
        #[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]
        pub enum CmdRange {
            None,
            Single(usize),
            Double(usize, usize),
        }

        impl<'de> de::Deserialize<'de> for CmdRange {
            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
            where
                D: de::Deserializer<'de>,
            {
                struct CmdRangeVisitor;

                impl<'de> de::Visitor<'de> for CmdRangeVisitor {
                    type Value = CmdRange;

                    fn expecting(&self, f: &mut fmt::Formatter) -> fmt::Result {
                        f.write_str("an array with 0, 1 or 2 numbers")
                    }
      metadata: {}
    - page_content: |-
        fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
                    where
                        A: de::SeqAccess<'de>,
                    {
                        match seq.size_hint().ok_or_else(|| {
                            de::Error::custom("couldn't determine array length")
                        })? {
                            0 => Ok(Self::Value::None),
                            1 => {
                                let a = seq.next_element::<usize>()?.unwrap();
                                Ok(Self::Value::Single(a))
                            },
                            2 => {
                                let a = seq.next_element::<usize>()?.unwrap();
                                let b = seq.next_element::<usize>()?.unwrap();
                                Ok(Self::Value::Double(a, b))
                            },
                            num => Err(de::Error::invalid_length(
                                num,
                                &"an array with 0, 1 or 2 numbers",
                            )),
                        }
                    }
                }
      metadata: {}
    - page_content: |-
        deserializer.deserialize_seq(CmdRangeVisitor)
            }
        }

        impl From<CmdRange> for Array {
            fn from(rng: CmdRange) -> Self {
                use CmdRange::*;

                match rng {
                    None => Array::new(),
                    Single(a) => Array::from_iter([a as Integer]),
                    Double(a, b) => Array::from_iter([a as Integer, b as Integer]),
                }
            }
        }

        impl From<CmdRange> for Object {
            fn from(rng: CmdRange) -> Self {
                Array::from(rng).into()
            }
        }
      metadata: {}
  9:
    hash: 08d58ba8613e45af52e6c133bac857a052f00c6f4081906ee4bbc1a668e78167
    path: ./types/mouse_button.rs
    documents:
    - page_content: |-
        use serde::{Deserialize, Serialize};

        #[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, Serialize, Deserialize)]
        #[serde(rename_all = "lowercase")]
        pub enum MouseButton {
            Left,
            Middle,
            Right,
            Wheel,
        }

        impl From<MouseButton> for types::String {
            fn from(action: MouseButton) -> Self {
                use MouseButton::*;
                Self::from(match action {
                    Left => "left",
                    Middle => "middle",
                    Right => "right",
                    Wheel => "wheel",
                })
            }
        }
      metadata: {}
  10:
    hash: c5b5eb3f2c32b6ae41bfb78ac0a72927ca060dc09055bb5e8af3112ccf8a1f04
    path: ./types/client_infos.rs
    documents:
    - page_content: |-
        use std::collections::HashMap;
        use std::fmt;
        use std::ops::RangeInclusive;

        use serde::{de, Deserialize, Serialize};

        #[non_exhaustive]
        #[derive(Clone, Debug, Eq, PartialEq, Deserialize)]
        /// Informations about a remote RPC client.
        pub struct ClientInfos {
            /// Arbitrary map of informal client properties. Suggested keys:
            ///  - "website": client homepage URL (e.g. GitHub repository);
            ///  - "license": license description ("Apache 2", "GPLv3", "MIT", …);
            ///  - "logo": URI or path to image.
            pub attributes: HashMap<String, String>,

            /// Builtin methods in the client, where map keys represent method names.
            pub methods: HashMap<String, ClientMethod>,

            /// Short name for the connected client.
            pub name: String,

            /// Advertised type of remote client.
            pub r#type: ClientType,

            /// Describes the client version.
            pub version: ClientVersion,
        }
      metadata: {}
    - page_content: |-
        #[non_exhaustive]
        #[derive(Clone, Debug, Eq, PartialEq, Hash, Serialize, Deserialize)]
        pub struct ClientVersion {
            /// Major version
            pub major: Option<u32>,

            /// Minor version
            pub minor: Option<u32>,

            /// Patch number
            pub patch: Option<u32>,

            /// String describing a prerelease, like `"dev"` or `"beta1"`.
            pub prerelease: Option<String>,

            /// Commit hash or similar identifier of commit.
            pub commit: Option<String>,
        }

        #[non_exhaustive]
        #[derive(Clone, Debug, Eq, PartialEq, Hash, Serialize, Deserialize)]
        #[serde(rename_all = "lowercase")]
        pub enum ClientType {
            /// Remote client connected to Neovim.
            Remote,

            /// GUI frontend.
            Ui,

            /// Application using Neovim as a component (for example, IDE/editor
            /// implementing a vim mode).
            Embedder,

            /// Plugin host, typically started by Neovim.
            Host,

            /// Single plugin, started by Neovim.
            Plugin,
        }
      metadata: {}
    - page_content: |-
        #[non_exhaustive]
        #[derive(Clone, Debug, Eq, PartialEq, Hash, Deserialize)]
        pub struct ClientMethod {
            /// Whether the method is called as a notification. If `false` or
            /// unspecified a blocking request will be used.
            pub r#async: Option<bool>,

            /// Number of arguments. Can either be a single integer or an inclusive
            /// range representive the minimum and maximum number of arguments
            /// accepted.
            pub nargs: Option<ClientMethodNArgs>,
        }

        #[non_exhaustive]
        #[derive(Clone, Debug, Eq, PartialEq, Hash)]
        /// Number of arguments accepted by a client method.
        pub enum ClientMethodNArgs {
            Exact(u32),
            Range(RangeInclusive<u32>),
        }

        impl<'de> de::Deserialize<'de> for ClientMethodNArgs {
            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
            where
                D: de::Deserializer<'de>,
            {
                struct ClientMethodNArgsVisitor;

                impl<'de> de::Visitor<'de> for ClientMethodNArgsVisitor {
                    type Value = ClientMethodNArgs;
      metadata: {}
    - page_content: |-
        fn expecting(&self, f: &mut fmt::Formatter) -> fmt::Result {
                        f.write_str(
                            "either a single integer or an array of two integers",
                        )
                    }

                    fn visit_i64<E>(self, n: i64) -> Result<Self::Value, E>
                    where
                        E: de::Error,
                    {
                        Ok(Self::Value::Exact(n as u32))
                    }

                    fn visit_seq<S>(
                        self,
                        mut visitor: S,
                    ) -> Result<Self::Value, S::Error>
                    where
                        S: de::SeqAccess<'de>,
                    {
                        let len = visitor
                            .size_hint()
                            .expect("couldn't determine number of arguments");

                        if len != 2 {
                            return Err(de::Error::invalid_length(
                                len,
                                &"was expecting two integers, a minimum and a maximum",
                            ));
                        }
      metadata: {}
    - page_content: |-
        let min = visitor.next_element::<u32>()?.unwrap();
                        let max = visitor.next_element::<u32>()?.unwrap();

                        Ok(Self::Value::Range(RangeInclusive::new(min, max)))
                    }
                }

                deserializer.deserialize_str(ClientMethodNArgsVisitor)
            }
        }
      metadata: {}
  11:
    hash: b45d9ee61d8157e7adbd1e4237ae15eddc5c086a4457da2095c8a146be81da64
    path: ./types/command_complete.rs
    documents:
    - page_content: |-
        use serde::Serialize;
        use types::{
            conversion::{self, ToObject},
            serde::Serializer,
            Function,
            Object,
        };

        /// See `:h command-complete` for details.
        #[non_exhaustive]
        #[derive(Clone, Debug, Eq, PartialEq, Hash, Serialize)]
        #[serde(rename_all = "snake_case")]
        pub enum CommandComplete {
            Arglist,
            Augroup,
            Buffer,
            Behave,
            Color,
            Command,
            Compiler,
            Cscope,
            Dir,
            Environment,
            Event,
            Expression,
            File,
            FileInPath,
            Filetype,
            Function,
            Help,
            Highlight,
            History,
            Locale,
            Lua,
            Mapclear,
            Mapping,
            Menu,
            Messages,
            Option,
            Packadd,
            Shellcmd,
            Sign,
            Syntax,
            Syntime,
            Tag,
            TagListfiles,
            User,
            Var,

            /// See `:h command-completion-customlist` for details.
            CustomList(Function<(String, String, usize), Vec<String>>),
        }
      metadata: {}
    - page_content: |-
        impl ToObject for CommandComplete {
            fn to_object(self) -> Result<Object, conversion::Error> {
                self.serialize(Serializer::new()).map_err(Into::into)
            }
        }
      metadata: {}
  12:
    hash: b619b7dfced3873eecc8a42a24fd8e20320cc0c435c4070f738cfadb56fb0522
    path: ./types/get_hl_infos.rs
    documents:
    - page_content: |-
        use types::String as NvimString;

        use super::HighlightInfos;
        use crate::SuperIterator;

        /// The type returned by [`get_hl`](crate::get_hl).
        pub enum GetHlInfos<Map: SuperIterator<(NvimString, HighlightInfos)>> {
            /// The [`HighlightInfos`] relative to a specific highlight group.
            /// This is returned when either [`id`](crate::opts::GetHlOptsBuilder::id)
            /// or [`name`](crate::opts::GetHlOptsBuilder::name) are specified.
            Single(HighlightInfos),

            /// A map from highlight group name to [`HighlightInfos`] for that group.
            /// This is returned when neither [`id`](crate::opts::GetHlOptsBuilder::id)
            /// nor [`name`](crate::opts::GetHlOptsBuilder::name) are specified.
            Map(Map),
        }
      metadata: {}
  13:
    hash: 4caf0efd795222dcbb51a541d4517bf3c4a9620f9e45700eb750f9117fced124
    path: ./types/proc_infos.rs
    documents:
    - page_content: |-
        use serde::Deserialize;
        use types::{
            conversion::{self, FromObject},
            serde::Deserializer,
            Object,
        };

        #[non_exhaustive]
        #[derive(Clone, Debug, Eq, PartialEq, Hash, Deserialize)]
        pub struct ProcInfos {
            pub name: Option<String>,
            pub pid: Option<u32>,
            pub ppid: Option<u32>,
        }

        impl FromObject for ProcInfos {
            fn from_object(obj: Object) -> Result<Self, conversion::Error> {
                Self::deserialize(Deserializer::new(obj)).map_err(Into::into)
            }
        }
      metadata: {}
  14:
    hash: 3e1bcb35b52ddf84a66200ac70085571fee6bbcb11874cb457a4f8947d3ad56f
    path: ./types/window_anchor.rs
    documents:
    - page_content: |-
        use serde::Deserialize;
        use types::{Object, String as NvimString};

        /// Specifies which corner of a floating window to place at `(row, col)`.
        #[non_exhaustive]
        #[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, Deserialize)]
        pub enum WindowAnchor {
            #[serde(rename = "NW")]
            NorthWest,

            #[serde(rename = "NE")]
            NorthEast,

            #[serde(rename = "SW")]
            SouthWest,

            #[serde(rename = "SE")]
            SouthEast,
        }

        impl From<WindowAnchor> for NvimString {
            fn from(anchor: WindowAnchor) -> Self {
                match anchor {
                    WindowAnchor::NorthWest => "NW",
                    WindowAnchor::NorthEast => "NE",
                    WindowAnchor::SouthWest => "SW",
                    WindowAnchor::SouthEast => "SE",
                }
                .into()
            }
        }

        impl From<WindowAnchor> for Object {
            fn from(anchor: WindowAnchor) -> Self {
                NvimString::from(anchor).into()
            }
        }
      metadata: {}
  15:
    hash: d45e09b1f08bba73769975c7b5d01748855d3e8124b916e41917665fe7170a51
    path: ./types/command_infos.rs
    documents:
    - page_content: |-
        use serde::{
            de::{self, Error},
            Deserialize,
        };
        use types::{
            conversion::{self, FromObject},
            serde::Deserializer,
            Function,
            Object,
        };

        use super::{CommandAddr, CommandArgs, CommandNArgs, CommandRange};

        #[non_exhaustive]
        #[derive(Clone, Debug, Eq, PartialEq, Hash, Deserialize)]
        pub struct CommandInfos {
            /// TODO: docs
            pub addr: Option<CommandAddr>,

            /// Whether the command can take a `!` modifier.
            pub bang: bool,

            /// Whether the command can be followed by a `|` and another command.
            pub bar: bool,

            /// Callback triggered by the command.
            pub callback: Option<Function<CommandArgs, ()>>,

            /// Command complletion strategy.
            pub complete: Option<String>,

            /// TODO: docs
            pub complete_arg: Option<String>,

            /// TODO: docs
            #[serde(deserialize_with = "parse_count")]
            pub count: Option<u32>,

            /// TODO: docs
            pub definition: Option<String>,
      metadata: {}
    - page_content: |-
        /// Whether to use the invocation location as opposed to the definition
            /// location in verbose messages.
            pub keepscript: bool,

            /// The command name.
            pub name: String,

            /// The number of arguments the command can take.
            #[serde(default)]
            pub nargs: CommandNArgs,

            /// TODO: docs
            pub range: Option<CommandRange>,

            /// Whether the firrst argument to the command can be an optional register
            /// name (like `:del`, `:put` or `:yank`).
            pub register: bool,

            /// TODO: docs
            pub script_id: i32,
        }
      metadata: {}
    - page_content: |-
        fn parse_count<'de, D>(deserializer: D) -> Result<Option<u32>, D::Error>
        where
            D: de::Deserializer<'de>,
        {
            Option::<String>::deserialize(deserializer)?
                .map(|count| {
                    count.parse().map_err(|err: std::num::ParseIntError| {
                        D::Error::custom(err.to_string())
                    })
                })
                .transpose()
        }

        impl FromObject for CommandInfos {
            fn from_object(obj: Object) -> Result<Self, conversion::Error> {
                Self::deserialize(Deserializer::new(obj)).map_err(Into::into)
            }
        }
      metadata: {}
  16:
    hash: 7abb0292bdb26e571ee16dfc2084760cfe6df448ccda36096ba9d15c4816dd61
    path: ./types/got_mode.rs
    documents:
    - page_content: |-
        use serde::Deserialize;
        use types::{
            conversion::{self, FromObject},
            serde::Deserializer,
            Object,
        };

        use super::Mode;

        #[non_exhaustive]
        #[derive(Clone, Debug, Eq, PartialEq, Hash, Deserialize)]
        pub struct GotMode {
            pub blocking: bool,
            pub mode: Mode,
        }

        impl FromObject for GotMode {
            fn from_object(obj: Object) -> Result<Self, conversion::Error> {
                Self::deserialize(Deserializer::new(obj)).map_err(Into::into)
            }
        }
      metadata: {}
  17:
    hash: f76bb86f40b1b21725c1a43d214660187029410e915e67e2cbe04fabcf4043f3
    path: ./types/highlight_infos.rs
    documents:
    - page_content: |-
        use serde::Deserialize;
        use types::{
            conversion::{self, FromObject},
            serde::Deserializer,
            Object,
        };

        /// Attributes related to a highlight group.
        #[non_exhaustive]
        #[derive(Clone, Debug, Eq, PartialEq, Deserialize, Default)]
        pub struct HighlightInfos {
            pub altfont: Option<bool>,
            pub background: Option<u32>,
            pub bg_indexed: Option<bool>,
            pub blend: Option<u32>,
            pub bold: Option<bool>,
            pub default: Option<bool>,
            pub fallback: Option<bool>,
            pub fg_indexed: Option<bool>,
            pub force: Option<bool>,
            pub foreground: Option<u32>,
            pub italic: Option<bool>,
            pub reverse: Option<bool>,
            pub special: Option<u32>,
            pub standout: Option<bool>,
            pub strikethrough: Option<bool>,
            pub undercurl: Option<bool>,
            pub underdash: Option<bool>,
            pub underdot: Option<bool>,
            pub underline: Option<bool>,
            pub underlineline: Option<bool>,
        }
      metadata: {}
    - page_content: |-
        impl FromObject for HighlightInfos {
            fn from_object(obj: Object) -> Result<Self, conversion::Error> {
                Self::deserialize(Deserializer::new(obj)).map_err(Into::into)
            }
        }
      metadata: {}
  18:
    hash: fe7c067eb7bc0b12daf864f5983aab8327c4bfea097c57390f6a7aad8d88cb08
    path: ./types/win_text_height_infos.rs
    documents:
    - page_content: |-
        use serde::de::Deserialize;
        use types::conversion::Error;
        use types::serde::Deserializer;
        use types::Dictionary;

        /// Infos returned by [`Window::text_height()`][crate::Window::text_height].
        #[derive(Debug, serde::Deserialize)]
        pub struct WinTextHeightInfos {
            /// The total number of screen lines occupied by the range.
            pub all: u32,

            /// The number of diff filler or virtual lines among them.
            pub fill: u32,
        }

        impl TryFrom<types::Dictionary> for WinTextHeightInfos {
            type Error = Error;

            #[inline]
            fn try_from(value: Dictionary) -> Result<Self, Self::Error> {
                Self::deserialize(Deserializer::new(value.into())).map_err(Into::into)
            }
        }
      metadata: {}
  19:
    hash: 69d5dbf1a9cba5da179c9e06d2a2e63dff60fb0255fefd0eccb3aea2241188a4
    path: ./types/paste_phase.rs
    documents:
    - page_content: |-
        #[non_exhaustive]
        #[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]
        pub enum PastePhase {
            /// Paste in a single call (i.e. without streaming).
            SingleCall = -1,

            /// Starts the paste. If calling [`paste`](crate::paste) sequentially only
            /// the first call should have this value as `phase`.
            StartPaste = 1,

            /// Continues the paste.
            ContinuePasting = 2,

            /// Ends the paste. If calling [`paste`](crate::paste) sequentially only
            /// the last call should have this value as `phase`.
            EndPaste = 3,
        }
      metadata: {}
  20:
    hash: d74cbd8f889ffca45725ca5cc4dc18a60be500cd99ee156b82f4001152861d47
    path: ./types/keymap_infos.rs
    documents:
    - page_content: |-
        use serde::Deserialize;
        use types::{
            conversion::{self, FromObject},
            serde::Deserializer,
            Function,
            Object,
        };

        use super::Mode;
        use crate::serde_utils as utils;

        #[non_exhaustive]
        #[derive(Debug, Clone, Eq, PartialEq, Hash, Deserialize)]
        pub struct KeymapInfos {
            /// Whether the mapping is local to a specific buffer.
            #[serde(deserialize_with = "utils::bool_from_int")]
            pub buffer: bool,

            /// Optional callback triggered by the keymap.
            pub callback: Option<Function<(), ()>>,

            /// Whether the keymap argument is an expression.
            #[serde(deserialize_with = "utils::bool_from_int")]
            pub expr: bool,

            /// The left-hand side of the mapping.
            pub lhs: String,

            /// The number where a script-local mapping is defined, if known.
            #[serde(deserialize_with = "utils::zero_is_none")]
            pub lnum: Option<u32>,

            /// The modes for which the keymap is enabled.
            pub mode: Mode,
      metadata: {}
    - page_content: |-
        /// Whether the right-hand side of the mapping is not remappable.
            #[serde(deserialize_with = "utils::bool_from_int")]
            pub noremap: bool,

            /// For buffer-local mappings, whether Neovim should wait for more
            /// characters to be typed if there's a global mapping that could also
            /// match. See `:h map-nowait` for more details.
            #[serde(deserialize_with = "utils::bool_from_int")]
            pub nowait: bool,

            /// The right-hand side of the mapping.
            #[serde(default, deserialize_with = "utils::empty_string_is_none")]
            pub rhs: Option<String>,

            /// Whether the mapping was defined with `<script>`.
            #[serde(deserialize_with = "utils::bool_from_int")]
            pub script: bool,

            /// The script-local ID, used for `<sid>` mappings.
            pub sid: i32,

            /// Whether the keymap is silent.
            #[serde(deserialize_with = "utils::bool_from_int")]
            pub silent: bool,
        }
      metadata: {}
    - page_content: |-
        impl FromObject for KeymapInfos {
            fn from_object(obj: Object) -> Result<Self, conversion::Error> {
                Self::deserialize(Deserializer::new(obj)).map_err(Into::into)
            }
        }
      metadata: {}
  21:
    hash: ad0b230eb9693f03a699457bbb79db11b3365719f14dd9cea4f410ebbf530f41
    path: ./types/viml_ast_node.rs
    documents:
    - page_content: |-
        use serde::Deserialize;
        use serde_repr::Deserialize_repr;
        use types::{Float, Integer};

        #[non_exhaustive]
        #[derive(Clone, Debug, PartialEq, PartialOrd, Deserialize)]
        pub enum VimLAstNode {
            And,
            Arrow,
            Assignment(/* augmentation: */ AssignmentAugmentation),
            BinaryMinus,
            BinaryPlus,
            Call,
            Colon,
            Comma,
            Comparison {
                cmp_type: ExprComparisonType,
                ccs_strategy: ExprCaseCompareStrategy,
                invert: bool,
            },
            ComplexIdentifier,
            Concat,
            ConcatOrSubscript,
            CurlyBracesIdentifier,
            DictLiteral,
            Division,
      metadata: {}
    - page_content: |-
        DoubleQuotedString(/* svalue: */ String),
            Environment {
                ident: String,
            },
            Float(/* fvalue: */ Float),
            Integer(/* ivalue: */ Integer),
            Lambda,
            ListLiteral,
            Missing,
            Mod,
            Multiplication,
            Nested,
            Not,
            OpMissing,
            Option {
                scope: ExprOptScope,
                ident: String,
            },
            Or,
            PlainIdentifier {
                scope: ExprVarScope,
                ident: String,
            },
            PlainKey {
                ident: String,
            },
            Register {
                name: i32,
            },
            SingleQuotedString(/* svalue: */ String),
            Subscript,
            Ternary,
            TernaryValue,
            UnaryMinus,
            UnaryPlus,
            UnknownFigure,
        }

        impl Eq for VimLAstNode {}

        #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Hash, Deserialize)]
        pub enum AssignmentAugmentation {
            /// `=`
            #[serde(rename = "")]
            None,

            /// `+=`
            #[serde(rename = "+=")]
            Add,

            /// `+=`
            #[serde(rename = "-=")]
            Subtract,
      metadata: {}
    - page_content: |-
        /// `+=`
            #[serde(rename = ".=")]
            Concat,
        }

        #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Hash, Deserialize)]
        // https://github.com/neovim/neovim/blob/v0.9.0/src/nvim/viml/parser/expressions.h#L68
        pub enum ExprComparisonType {
            Equal,
            Greater,
            GreaterOrEqual,
            Identical,
            Matches,
        }

        #[derive(Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Hash, Deserialize)]
        // https://github.com/neovim/neovim/blob/v0.9.0/src/nvim/viml/parser/expressions.h#L23
        pub enum ExprCaseCompareStrategy {
            UseOption,
            MatchCase,
            IgnoreCase,
        }

        #[derive(
            Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Hash, Deserialize_repr,
        )]
        // https://github.com/neovim/neovim/blob/v0.9.0/src/nvim/viml/parser/expressions.h#L78
        #[repr(u8)]
        pub enum ExprOptScope {
            Unspecified = 0,
            Global = b'g',
            Local = b'l',
        }
      metadata: {}
    - page_content: |-
        #[derive(
            Copy, Clone, Debug, Eq, PartialEq, PartialOrd, Hash, Deserialize_repr,
        )]
        // https://github.com/neovim/neovim/blob/v0.9.0/src/nvim/viml/parser/expressions.h#L99
        #[repr(u8)]
        pub enum ExprVarScope {
            Missing = 0,
            Script = b's',
            Global = b'g',
            Vim = b'v',
            Buffer = b'b',
            Window = b'w',
            Tabpage = b't',
            Local = b'l',
            Arguments = b'a',
        }
      metadata: {}
    - page_content: |-
        /// Only used for deserialization purposes.
        #[derive(Copy, Clone, Deserialize)]
        pub(crate) enum DeserializedVimLASTNode {
            And,
            Arrow,
            Assignment,
            BinaryMinus,
            BinaryPlus,
            Call,
            Colon,
            Comma,
            Comparison,
            ComplexIdentifier,
            Concat,
            ConcatOrSubscript,
            CurlyBracesIdentifier,
            DictLiteral,
            Division,
            DoubleQuotedString,
            Environment,
            Float,
            Integer,
            Lambda,
            ListLiteral,
            Missing,
            Mod,
            Multiplication,
            Nested,
            Not,
            OpMissing,
            Option,
            Or,
            PlainIdentifier,
            PlainKey,
            Register,
            SingleQuotedString,
            Subscript,
            Ternary,
            TernaryValue,
            UnaryMinus,
            UnaryPlus,
            UnknownFigure,
        }
      metadata: {}
  22:
    hash: b00764fc4364c6339b6f207978b7426b842caa83e2868d51493f3db9721d9d29
    path: ./types/extmark_virt_text_chunk.rs
    documents:
    - page_content: |-
        use types::Integer;

        use super::OneOrMore;

        #[derive(Clone, Debug, Eq, Hash, PartialEq)]
        pub struct ExtmarkVirtTextChunk {
            pub text: String,
            pub hl_groups: Vec<StringOrInt>,
        }

        impl<'de> serde::de::Deserialize<'de> for ExtmarkVirtTextChunk {
            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
            where
                D: serde::de::Deserializer<'de>,
            {
                use serde::de::{self, Visitor};

                struct ExtmarkVirtTextChunkVisitor;

                impl<'de> Visitor<'de> for ExtmarkVirtTextChunkVisitor {
                    type Value = ExtmarkVirtTextChunk;

                    fn expecting(
                        &self,
                        f: &mut core::fmt::Formatter<'_>,
                    ) -> core::fmt::Result {
                        f.write_str("a (text, hl_group) tuple")
                    }
      metadata: {}
    - page_content: |-
        fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
                    where
                        A: de::SeqAccess<'de>,
                    {
                        let text = seq
                            .next_element()?
                            .ok_or_else(|| de::Error::invalid_length(0, &self))?;

                        let hl_groups = seq
                            .next_element::<OneOrMore<StringOrInt>>()?
                            .map(|groups| match groups {
                                OneOrMore::One(group) => vec![group],
                                OneOrMore::List(groups) => groups,
                            })
                            .unwrap_or_default();

                        Ok(ExtmarkVirtTextChunk { text, hl_groups })
                    }
                }

                deserializer.deserialize_seq(ExtmarkVirtTextChunkVisitor)
            }
        }

        #[derive(Clone, Debug, Eq, PartialEq, Hash, serde::Deserialize)]
        #[serde(untagged)]
        pub enum StringOrInt {
            String(String),
            Int(Integer),
        }
      metadata: {}
    - page_content: |-
        impl From<String> for StringOrInt {
            #[inline]
            fn from(s: String) -> Self {
                Self::String(s)
            }
        }

        impl From<&str> for StringOrInt {
            #[inline]
            fn from(s: &str) -> Self {
                Self::String(s.to_owned())
            }
        }

        impl From<Integer> for StringOrInt {
            #[inline]
            fn from(i: Integer) -> Self {
                Self::Int(i)
            }
        }
      metadata: {}
  23:
    hash: 83d3676d966b4ba1ef60bed0164348e167869eae1b14dcde97a696d7906d768d
    path: ./types/extmark_position.rs
    documents:
    - page_content: |-
        use serde::Deserialize;
        use types::{Array, Integer, Object};

        #[non_exhaustive]
        #[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, Deserialize)]
        pub enum ExtmarkPosition {
            /// Defines the extmark's position in the buffer by a 0-indexed `(row,
            /// col)` tuple.
            ByTuple((usize, usize)),

            /// Defines the extmark's position in the buffer by its id.
            ById(u32),
        }

        impl From<ExtmarkPosition> for Object {
            fn from(pos: ExtmarkPosition) -> Self {
                use ExtmarkPosition::*;

                match pos {
                    ByTuple((row, col)) => {
                        Array::from_iter([row as Integer, col as Integer]).into()
                    },
                    ById(extmark_id) => extmark_id.into(),
                }
            }
        }
      metadata: {}
  24:
    hash: 71f9fb5c9d47d880c041c7a6625f677f5a04c80dcc5d16e9da75ac6e239305bb
    path: ./types/autocmd_callback_args.rs
    documents:
    - page_content: |-
        use std::path::PathBuf;

        use serde::Deserialize;
        use types::{
            conversion::{self, FromObject},
            serde::Deserializer,
            Object,
        };

        use crate::Buffer;

        #[non_exhaustive]
        #[derive(Clone, Debug, PartialEq, Deserialize)]
        pub struct AutocmdCallbackArgs {
            /// The `Buffer` specified by `<abuf>`.
            #[serde(rename = "buf")]
            pub buffer: Buffer,

            /// Arbitrary data passed to
            /// [`nvim_oxi::api::exec_autocmds`](crate::exec_autocmds).
            #[serde(default)]
            pub data: Object,

            /// The name of the event that triggered the autocommand.
            pub event: String,

            /// The expanded value of `<afile>`.
            pub file: PathBuf,

            /// The `id` of the autocommand group that the autocommand belongs to, if
            /// any.
            #[serde(default)]
            pub group: Option<u32>,

            /// The `id` of the autocommand.
            pub id: u32,

            /// The expanded value of `<amatch>`.
            pub r#match: String,
        }
      metadata: {}
    - page_content: |-
        impl FromObject for AutocmdCallbackArgs {
            fn from_object(obj: Object) -> Result<Self, conversion::Error> {
                Self::deserialize(Deserializer::new(obj)).map_err(Into::into)
            }
        }

        impl luajit::Poppable for AutocmdCallbackArgs {
            unsafe fn pop(
                lstate: *mut luajit::ffi::State,
            ) -> Result<Self, luajit::Error> {
                let obj = Object::pop(lstate)?;

                Self::from_object(obj)
                    .map_err(luajit::Error::pop_error_from_err::<Self, _>)
            }
        }
      metadata: {}
  25:
    hash: a970bd72436e98f900e3caab005ea703d072354c73ec25b7fedef1cdbe37a477
    path: ./types/extmark_infos.rs
    documents:
    - page_content: |-
        use serde::Deserialize;
        use types::{
            conversion::{self, FromObject},
            serde::Deserializer,
            Object,
        };

        use super::{ExtmarkHlMode, ExtmarkVirtTextChunk, ExtmarkVirtTextPosition};

        /// Extmark infos returned by `Buffer::get_extmark_by_id`.
        #[non_exhaustive]
        #[derive(Clone, Debug, Eq, PartialEq, Hash, Deserialize)]
        pub struct ExtmarkInfos {
            #[serde(default)]
            pub end_col: Option<usize>,

            #[serde(default)]
            pub end_right_gravity: Option<bool>,

            #[serde(default)]
            pub end_row: Option<usize>,

            #[serde(default)]
            pub hl_eol: Option<bool>,

            #[cfg(not(feature = "neovim-nightly"))] // On 0.9 and 0.10.
            #[cfg_attr(docsrs, doc(cfg(not(feature = "neovim-nightly"))))]
            #[serde(default)]
            pub hl_group: Option<String>,

            #[cfg(feature = "neovim-nightly")] // Only on Nightly.
            #[cfg_attr(docsrs, doc(cfg(feature = "neovim-nightly")))]
            #[serde(default)]
            pub hl_group: Option<super::OneOrMore<String>>,
      metadata: {}
    - page_content: |-
        #[serde(default)]
            pub hl_mode: Option<ExtmarkHlMode>,

            #[serde(default)]
            pub priority: Option<u32>,

            pub right_gravity: bool,

            #[serde(default)]
            pub ui_watched: Option<bool>,

            #[serde(default)]
            pub virt_lines: Option<Vec<Vec<(String, String)>>>,

            #[serde(default)]
            pub virt_lines_above: Option<bool>,

            #[serde(default)]
            pub virt_lines_leftcol: Option<bool>,

            #[serde(default)]
            pub virt_text: Vec<ExtmarkVirtTextChunk>,

            #[serde(default)]
            pub virt_text_hide: Option<bool>,

            #[serde(default)]
            pub virt_text_pos: Option<ExtmarkVirtTextPosition>,

            #[serde(default)]
            pub virt_text_win_col: Option<i64>,
        }

        impl FromObject for ExtmarkInfos {
            fn from_object(obj: Object) -> Result<Self, conversion::Error> {
                Self::deserialize(Deserializer::new(obj)).map_err(Into::into)
            }
        }
      metadata: {}
  26:
    hash: 017c3d2aaf04fdf50d29937b2cdd64469332a542bcc9e49cae8dc3f5381892dc
    path: ./types/autocmd_infos.rs
    documents:
    - page_content: |-
        use serde::Deserialize;
        use types::{
            conversion::{self, FromObject},
            serde::Deserializer,
            Object,
        };

        use crate::Buffer;

        /// Informations related to an autocommand.
        #[non_exhaustive]
        #[derive(Clone, Debug, Eq, PartialEq, Hash, Deserialize)]
        pub struct AutocmdInfos {
            /// The `Buffer` associated to the autocommand. Only present if `buflocal`
            /// is `true`.
            pub buffer: Option<Buffer>,

            /// Whether the autocommand is a buffer-local one.
            pub buflocal: bool,

            /// The command executed by the autocommand.
            pub command: String,

            /// The autocommand's description.
            #[serde(default)]
            pub desc: Option<String>,

            /// The event triggering the autocommand.
            pub event: String,

            /// The autocommand group's id. Only present if the autocommand belongs to
            /// an autocommand group.
            #[serde(default)]
            pub group: Option<u32>,
      metadata: {}
    - page_content: |-
        /// The autocommand group's name. Only present if the autocommand belongs
            /// to an autocommand group.
            #[serde(default)]
            pub group_name: Option<String>,

            /// The autocommand id.
            #[serde(default)]
            pub id: Option<u32>,

            /// Whether the autocommand is only run once.
            pub once: bool,

            /// The autocommand's pattern.
            pub pattern: String,
        }

        impl FromObject for AutocmdInfos {
            fn from_object(obj: Object) -> Result<Self, conversion::Error> {
                Self::deserialize(Deserializer::new(obj)).map_err(Into::into)
            }
        }
      metadata: {}
  27:
    hash: 8d88fb3f2846c70ce18da73822edec90f9ca7531c0dcff91b46384a5b17558d6
    path: ./types/ui_infos.rs
    documents:
    - page_content: |-
        use serde::Deserialize;
        use types::{
            conversion::{self, FromObject},
            serde::Deserializer,
            Object,
        };

        use crate::serde_utils as utils;

        /// Informations about an attached UI.
        #[non_exhaustive]
        #[derive(Clone, Debug, Eq, PartialEq, Deserialize)]
        pub struct UiInfos {
            /// Channel id or remote UI (not present for TUI).
            #[serde(rename = "chan", deserialize_with = "utils::zero_is_none")]
            pub chan_id: Option<u32>,

            pub ext_cmdline: bool,
            pub ext_hlstate: bool,
            pub ext_linegrid: bool,
            pub ext_messages: bool,
            pub ext_multigrid: bool,
            pub ext_popupmenu: bool,
            pub ext_tabline: bool,
            pub ext_termcolors: bool,
            pub ext_wildmenu: bool,

            /// Requested height of the UI.
            pub height: usize,

            pub r#override: bool,

            /// `true` if the UI uses RGB colors.
            pub rgb: bool,

            /// Requested height of the UI.
            pub width: usize,
        }
      metadata: {}
    - page_content: |-
        impl FromObject for UiInfos {
            fn from_object(obj: Object) -> Result<Self, conversion::Error> {
                Self::deserialize(Deserializer::new(obj)).map_err(Into::into)
            }
        }
      metadata: {}
  28:
    hash: 402313f8dc334019e452eb7eb0524ec7b37561a84b00ec42bf6f6b15717a23f5
    path: ./types/channel_infos.rs
    documents:
    - page_content: |-
        use serde::Deserialize;
        use types::{
            conversion::{self, FromObject},
            serde::Deserializer,
            Object,
        };

        use super::ClientInfos;
        use crate::Buffer;

        #[non_exhaustive]
        #[derive(Clone, Debug, Eq, PartialEq, Deserialize)]
        pub struct ChannelInfos {
            /// Job arguments list.
            pub argv: Option<Vec<String>>,

            /// Buffer with connected terminal instance. Only present when `mode` is
            /// `ChannelMode::Terminal`.
            pub buffer: Option<Buffer>,

            /// Info about the client on the other side of an RPC channel. Only present
            /// when `mode` is `ChannelMode::Rpc`.
            pub client: Option<ClientInfos>,

            /// Channel id.
            pub id: u32,

            /// How data receiveed on the channel is interpeted.
            pub mode: ChannelMode,

            /// Name of a pseudoterminal. On a POSIX system this is a device path like
            /// `/dev/pts/1`. If the name is unknown, the key will still be present if
            /// a pty is used (e.g. for `ConPTY` on Windows).
            pub pty: Option<String>,
      metadata: {}
    - page_content: |-
        /// Stream underlying the channel.
            pub stream: ChannelStream,
        }

        #[non_exhaustive]
        #[derive(Clone, Debug, Eq, PartialEq, Hash, Deserialize)]
        #[serde(rename_all = "lowercase")]
        pub enum ChannelStream {
            Job,
            Socket,
            StdErr,
            StdIo,
        }

        #[non_exhaustive]
        #[derive(Clone, Debug, Eq, PartialEq, Hash, Deserialize)]
        #[serde(rename_all = "lowercase")]
        pub enum ChannelMode {
            Bytes,
            Rpc,
            Terminal,
        }

        impl FromObject for ChannelInfos {
            fn from_object(obj: Object) -> Result<Self, conversion::Error> {
                Self::deserialize(Deserializer::new(obj)).map_err(Into::into)
            }
        }
      metadata: {}
  29:
    hash: 5ab55a11f42494fd959738b04fa57636099310cae17042abcbd19e02b0c2c87b
    path: ./types/mouse_action.rs
    documents:
    - page_content: |-
        use serde::{Deserialize, Serialize};
        use types as nvim;

        #[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, Serialize, Deserialize)]
        #[serde(rename_all = "lowercase")]
        pub enum MouseAction {
            Down,
            Drag,
            Left,
            Press,
            Release,
            Right,
            Up,
        }

        impl From<MouseAction> for nvim::String {
            fn from(action: MouseAction) -> nvim::String {
                use MouseAction::*;
                nvim::String::from(match action {
                    Down => "down",
                    Drag => "drag",
                    Left => "left",
                    Press => "press",
                    Release => "release",
                    Right => "right",
                    Up => "up",
                })
            }
        }
      metadata: {}
  30:
    hash: 0e987a35323afa3a4b832ae8df1132a81a72fe136cad616154101c033486ede1
    path: ./types/statusline_infos.rs
    documents:
    - page_content: |-
        use serde::Deserialize;
        use types::{
            conversion::{self, FromObject},
            serde::Deserializer,
            Object,
        };

        use super::StatuslineHighlightInfos;

        /// Statusline informations returned by
        /// [`eval_statusline`](crate::eval_statusline).
        #[non_exhaustive]
        #[derive(Clone, Debug, Eq, PartialEq, Hash, Deserialize)]
        pub struct StatuslineInfos {
            /// Vector of highlight informations for the statusline populated if the
            /// [`highlights`](crate::opts::EvalStatuslineOptsBuilder::highlights)
            /// field of  was set to `true`.
            #[serde(default)]
            pub highlights: Vec<StatuslineHighlightInfos>,

            /// Characters displayed in the statusline.
            pub str: String,

            /// Display width of the statusline.
            pub width: u32,
        }

        impl FromObject for StatuslineInfos {
            fn from_object(obj: Object) -> Result<Self, conversion::Error> {
                Self::deserialize(Deserializer::new(obj)).map_err(Into::into)
            }
        }
      metadata: {}
  31:
    hash: 0acbfc42a2102324fbf6cde938a7ed13b2b8be65a02e6070ab8fd855c2dab623
    path: ./types/statusline_highlight_infos.rs
    documents:
    - page_content: |-
        use serde::Deserialize;

        #[non_exhaustive]
        #[derive(Clone, Debug, Eq, PartialEq, Hash, Deserialize)]
        pub struct StatuslineHighlightInfos {
            /// Name of the highlight group.
            pub group: String,

            /// Byte index (0-based) of the first character that uses the highlight.
            pub start: usize,
        }
      metadata: {}
  32:
    hash: 818f98c0ee29d5500ec93a076ff143f1d03851d9eb84d85af1badb1089014e0d
    path: ./types/split_modifier.rs
    documents:
    - page_content: |-
        use serde::{Deserialize, Serialize};

        /// Split modifier passed to the `split` key of `CommandModifiers`.
        #[non_exhaustive]
        #[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, Serialize, Deserialize)]
        #[serde(rename_all = "lowercase")]
        pub enum SplitModifier {
            /// See `:h `:aboveleft`` for more infos.
            AboveLeft,

            /// See `:h `:belowright`` for more infos.
            BelowRight,

            /// See `:h `:topleft`` for more infos.
            TopLeft,

            /// See `:h `:botright`` for more infos.
            BotRight,
        }
      metadata: {}
  33:
    hash: 450ba69ae3c56862212980fce6a46850fa4cc75479b66bb1f0052ca886ff3215
    path: ./types/split_direction.rs
    documents:
    - page_content: |-
        use serde::{Deserialize, Serialize};
        use types::String as NvimString;

        #[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, Serialize, Deserialize)]
        #[serde(rename_all = "lowercase")]
        pub enum SplitDirection {
            Above,
            Below,
            Left,
            Right,
        }

        impl From<SplitDirection> for NvimString {
            fn from(direction: SplitDirection) -> Self {
                match direction {
                    SplitDirection::Above => "above",
                    SplitDirection::Below => "below",
                    SplitDirection::Left => "left",
                    SplitDirection::Right => "right",
                }
                .into()
            }
        }
      metadata: {}
  34:
    hash: 2909734a5c0a06dfb71ae9265548adec2adc6acfc53fcbc05b674fb088d9b39e
    path: ./types/window_title_position.rs
    documents:
    - page_content: |-
        use serde::Deserialize;

        #[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, Deserialize)]
        #[serde(rename_all = "lowercase")]
        pub enum WindowTitlePosition {
            Left,
            Center,
            Right,
        }

        impl From<WindowTitlePosition> for types::String {
            #[inline(always)]
            fn from(pos: WindowTitlePosition) -> Self {
                let pos = match pos {
                    WindowTitlePosition::Left => "left",
                    WindowTitlePosition::Center => "center",
                    WindowTitlePosition::Right => "right",
                };

                pos.into()
            }
        }

        impl From<&WindowTitlePosition> for types::Object {
            #[inline(always)]
            fn from(pos: &WindowTitlePosition) -> Self {
                types::String::from(*pos).into()
            }
        }
      metadata: {}
  35:
    hash: a7609a7908eea5f2592d452b0a6e3e141571e374d3c8808b9548557b73e1fdda
    path: ./types/context_type.rs
    documents:
    - page_content: |-
        use serde::Serialize;
        use types::{self as nvim, conversion::FromObject, serde::Serializer};

        #[non_exhaustive]
        #[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, Serialize)]
        pub enum ContextType {
            #[serde(rename = "bufs")]
            Bufferlist,

            #[serde(rename = "gvars")]
            GlobalVars,

            #[serde(rename = "funcs")]
            GlobalAndScriptLocalFuncs,

            #[serde(rename = "jumps")]
            Jumplist,

            #[serde(rename = "regs")]
            Registers,

            #[serde(rename = "sfuncs")]
            ScriptLocalFuncs,
        }

        impl From<ContextType> for nvim::String {
            fn from(ctx: ContextType) -> Self {
                nvim::String::from_object(
                    ctx.serialize(Serializer::new())
                        .expect("`ContextType` is serializable"),
                )
                .expect("`ContextType` is serialized into a string")
            }
        }
      metadata: {}
  36:
    hash: 8c3ac334ba770754783dd5c6f972681c40a089700da49c9d3efd1456b9cfec33
    path: ./types/command_range.rs
    documents:
    - page_content: |-
        use std::fmt;

        use serde::{de, ser, Serialize};
        use types::{
            conversion::{self, ToObject},
            serde::Serializer,
            Object,
        };

        // use crate::object::{self, ToObject};

        /// See `:h command-range` for details.
        #[non_exhaustive]
        #[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, Serialize)]
        pub enum CommandRange {
            #[serde(serialize_with = "serialize_as_true")]
            CurrentLine,

            #[serde(rename = "%")]
            WholeFile,

            Count(u32),
        }

        impl ToObject for CommandRange {
            fn to_object(self) -> Result<Object, conversion::Error> {
                self.serialize(Serializer::new()).map_err(Into::into)
            }
        }

        impl<'de> de::Deserialize<'de> for CommandRange {
            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
            where
                D: de::Deserializer<'de>,
            {
                struct CommandRangeVisitor;

                impl de::Visitor<'_> for CommandRangeVisitor {
                    type Value = CommandRange;
      metadata: {}
    - page_content: |-
        fn expecting(&self, f: &mut fmt::Formatter) -> fmt::Result {
                        f.write_str("\".\", \"%\" or an integer")
                    }

                    fn visit_str<E>(self, v: &str) -> Result<Self::Value, E>
                    where
                        E: de::Error,
                    {
                        match v {
                            "." => return Ok(Self::Value::CurrentLine),
                            "%" => return Ok(Self::Value::WholeFile),

                            other => {
                                if let Ok(n) = other.parse::<u32>() {
                                    return Ok(Self::Value::Count(n));
                                }
                            },
                        };

                        Err(E::invalid_value(
                            de::Unexpected::Str(v),
                            &"\".\", \"%\" or an integer",
                        ))
                    }
                }

                deserializer.deserialize_str(CommandRangeVisitor)
            }
        }
      metadata: {}
    - page_content: |-
        fn serialize_as_true<S>(serializer: S) -> Result<S::Ok, S::Error>
        where
            S: ser::Serializer,
        {
            serializer.serialize_bool(true)
        }
      metadata: {}
  37:
    hash: 789adff0035a68903e393a91a2d255ccfc9e25d80e9f1cd3c44a6a0cc182d02d
    path: ./types/window_title.rs
    documents:
    - page_content: |-
        use serde::Deserialize;
        use types::{Array, Object, String};

        #[derive(Clone, Debug, Eq, PartialEq, Hash, Deserialize)]
        pub enum WindowTitle {
            SimpleString(String),
            ListOfText(Vec<(String, TitleHighlight)>),
        }

        #[derive(Clone, Debug, Eq, PartialEq, Hash, Deserialize)]
        pub enum TitleHighlight {
            SimpleString(String),
            ListOfString(Vec<String>),
        }

        impl From<&WindowTitle> for Object {
            fn from(title: &WindowTitle) -> Self {
                match title {
                    WindowTitle::SimpleString(value) => value.clone().into(),
                    WindowTitle::ListOfText(list) => list
                        .iter()
                        .map(|(txt, hl)| {
                            Array::from_iter(
                                [txt.clone().into(), hl.into()] as [Object; 2]
                            )
                        })
                        .collect::<Array>()
                        .into(),
                }
            }
        }
      metadata: {}
    - page_content: |-
        impl From<&TitleHighlight> for Object {
            fn from(hl: &TitleHighlight) -> Self {
                match hl {
                    TitleHighlight::SimpleString(s) => s.clone().into(),
                    TitleHighlight::ListOfString(list) => {
                        list.iter().cloned().collect::<Array>().into()
                    },
                }
            }
        }

        impl From<String> for TitleHighlight {
            fn from(value: String) -> Self {
                Self::SimpleString(value)
            }
        }

        impl From<Vec<String>> for TitleHighlight {
            fn from(value: Vec<String>) -> Self {
                Self::ListOfString(value.into_iter().collect())
            }
        }
      metadata: {}
  38:
    hash: 5d03e9e5ed442208d1fecfba40fe91c29232b6f462d06079030fd44f7b74ba18
    path: ./types/window_style.rs
    documents:
    - page_content: |-
        use serde::Deserialize;
        use types::{Object, String as NvimString};

        #[non_exhaustive]
        #[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, Deserialize)]
        #[serde(rename_all = "lowercase")]
        pub enum WindowStyle {
            Minimal,
        }

        impl From<WindowStyle> for NvimString {
            fn from(style: WindowStyle) -> Self {
                match style {
                    WindowStyle::Minimal => "minimal",
                }
                .into()
            }
        }

        impl From<WindowStyle> for Object {
            fn from(style: WindowStyle) -> Self {
                NvimString::from(style).into()
            }
        }
      metadata: {}
  39:
    hash: 6edf9396c83e377e15741a4775dd000e58be5713c0a745eab3eff14596cbcf45
    path: ./types/editor_context.rs
    documents:
    - page_content: |-
        use serde::Deserialize;
        use types::{
            conversion::{self, FromObject},
            serde::Deserializer,
            Array,
            Dictionary,
            Object,
        };

        #[non_exhaustive]
        #[derive(Clone, Debug, Default, Eq, PartialEq, Deserialize)]
        pub struct EditorContext {
            #[serde(default, rename = "bufs")]
            pub bufferlist: Vec<types::String>,

            #[serde(default, rename = "gvars")]
            pub global_vars: Vec<types::String>,

            #[serde(default, rename = "funcs")]
            pub global_and_script_local_funcs: Vec<types::String>,

            #[serde(default, rename = "jumps")]
            pub jumplist: Vec<types::String>,

            #[serde(default, rename = "regs")]
            pub registers: Vec<types::String>,

            #[serde(default, rename = "sfuncs")]
            pub script_local_funcs: Vec<types::String>,
        }

        impl EditorContext {
            #[inline(always)]
            pub fn builder() -> EditorContextBuilder {
                EditorContextBuilder::default()
            }
        }

        #[derive(Clone, Default)]
        pub struct EditorContextBuilder(EditorContext);
      metadata: {}
    - page_content: |-
        impl EditorContextBuilder {
            #[inline]
            pub fn bufferlist<Line, Lines>(&mut self, lines: Lines) -> &mut Self
            where
                Lines: IntoIterator<Item = Line>,
                Line: Into<types::String>,
            {
                self.0.bufferlist = lines.into_iter().map(Into::into).collect();
                self
            }

            #[inline]
            pub fn global_vars<Line, Lines>(&mut self, lines: Lines) -> &mut Self
            where
                Lines: IntoIterator<Item = Line>,
                Line: Into<types::String>,
            {
                self.0.global_vars = lines.into_iter().map(Into::into).collect();
                self
            }

            #[inline]
            pub fn global_and_script_local_funcs<Line, Lines>(
                &mut self,
                lines: Lines,
            ) -> &mut Self
            where
                Lines: IntoIterator<Item = Line>,
                Line: Into<types::String>,
            {
                self.0.global_and_script_local_funcs =
                    lines.into_iter().map(Into::into).collect();
                self
            }
      metadata: {}
    - page_content: |-
        #[inline]
            pub fn jumplist<Line, Lines>(&mut self, lines: Lines) -> &mut Self
            where
                Lines: IntoIterator<Item = Line>,
                Line: Into<types::String>,
            {
                self.0.jumplist = lines.into_iter().map(Into::into).collect();
                self
            }

            #[inline]
            pub fn registers<Line, Lines>(&mut self, lines: Lines) -> &mut Self
            where
                Lines: IntoIterator<Item = Line>,
                Line: Into<types::String>,
            {
                self.0.registers = lines.into_iter().map(Into::into).collect();
                self
            }

            #[inline]
            pub fn script_local_funcs<Line, Lines>(
                &mut self,
                lines: Lines,
            ) -> &mut Self
            where
                Lines: IntoIterator<Item = Line>,
                Line: Into<types::String>,
            {
                self.0.script_local_funcs =
                    lines.into_iter().map(Into::into).collect();
                self
            }

            #[inline]
            pub fn build(&mut self) -> EditorContext {
                std::mem::take(&mut self.0)
            }
        }
      metadata: {}
    - page_content: |-
        impl From<EditorContext> for Dictionary {
            fn from(ctx: EditorContext) -> Self {
                Self::from_iter([
                    ("bufferlist", Array::from_iter(ctx.bufferlist)),
                    ("global_vars", Array::from_iter(ctx.global_vars)),
                    (
                        "global_and_script_local_funcs",
                        Array::from_iter(ctx.global_and_script_local_funcs),
                    ),
                    ("jumplist", Array::from_iter(ctx.jumplist)),
                    ("registers", Array::from_iter(ctx.registers)),
                    ("script_local_funcs", Array::from_iter(ctx.script_local_funcs)),
                ])
            }
        }

        impl FromObject for EditorContext {
            fn from_object(obj: Object) -> Result<Self, conversion::Error> {
                Self::deserialize(Deserializer::new(obj)).map_err(Into::into)
            }
        }
      metadata: {}
  40:
    hash: 214b4580be2ad23b19fb483f57fcb2bdb49fc99788681e0a91ef1c0b95dfdb5f
    path: ./types/extmark_hl_mode.rs
    documents:
    - page_content: |-
        use serde::Deserialize;

        /// Controls how the highlights of a virtual text associated to an extmark are
        /// combined with the highlights of the text.
        #[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, Deserialize)]
        #[serde(rename_all(deserialize = "lowercase"))]
        #[non_exhaustive]
        pub enum ExtmarkHlMode {
            /// Only show the virtual text's highlight (default).
            Replace,

            /// Combine with background text's highlight.
            Combine,

            /// Blend with background text's highlight.
            Blend,
        }

        impl From<ExtmarkHlMode> for types::String {
            #[inline(always)]
            fn from(mode: ExtmarkHlMode) -> Self {
                use ExtmarkHlMode::*;

                Self::from(match mode {
                    Replace => "replace",
                    Combine => "combine",
                    Blend => "blend",
                })
            }
        }
      metadata: {}
  41:
    hash: c963af84c011b69c9386b517fa63c416442c670c0f45eb009808e7066fb7918c
    path: ./types/command_nargs.rs
    documents:
    - page_content: |-
        use serde::{ser, Deserialize, Serialize};
        use types::{
            conversion::{self, ToObject},
            serde::Serializer,
            Object,
        };

        /// Number of arguments accepted by a command.
        #[non_exhaustive]
        #[derive(Copy, Clone, Debug, Default, Eq, PartialEq, Hash, Deserialize)]
        pub enum CommandNArgs {
            #[default]
            #[serde(rename = "0")]
            Zero,

            #[serde(rename = "1")]
            One,

            #[serde(rename = "?")]
            ZeroOrOne,

            #[serde(rename = "+")]
            OneOrMore,

            #[serde(rename = "*")]
            Any,
        }
      metadata: {}
    - page_content: |-
        #[serde(rename = "*")]
            Any,
        }

        // https://github.com/serde-rs/serde/issues/1773
        impl Serialize for CommandNArgs {
            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
            where
                S: ser::Serializer,
            {
                match self {
                    CommandNArgs::Zero => serializer.serialize_i32(0),
                    CommandNArgs::One => serializer.serialize_i32(1),
                    CommandNArgs::ZeroOrOne => serializer.serialize_str("?"),
                    CommandNArgs::OneOrMore => serializer.serialize_str("+"),
                    CommandNArgs::Any => serializer.serialize_str("*"),
                }
            }
        }

        impl ToObject for CommandNArgs {
            fn to_object(self) -> Result<Object, conversion::Error> {
                self.serialize(Serializer::new()).map_err(Into::into)
            }
        }
      metadata: {}
  42:
    hash: 20a4a67eb5a70f1ad6c5c72cdce1943f64e5e74494376258b2a248c62d2b16f7
    path: ./types/mode.rs
    documents:
    - page_content: |-
        use serde::Deserialize;

        #[non_exhaustive]
        #[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, Deserialize)]
        pub enum Mode {
            #[serde(rename = "c")]
            CmdLine,

            #[serde(rename = "i")]
            Insert,

            #[serde(rename = "!")]
            InsertCmdLine,

            #[serde(rename = "l")]
            Langmap,

            #[serde(rename(deserialize = " "))]
            NormalVisualOperator,

            #[serde(rename = "n")]
            Normal,

            #[serde(rename = "o")]
            OperatorPending,

            #[serde(rename = "s")]
            Select,

            #[serde(rename = "t")]
            Terminal,

            #[serde(rename = "x")]
            Visual,

            #[serde(rename = "v")]
            VisualSelect,
        }

        macro_rules! is_mode {
            ($fn_name:ident, $variant:ident) => {
                #[inline(always)]
                pub const fn $fn_name(&self) -> bool {
                    matches!(self, Mode::$variant)
                }
            };
        }
      metadata: {}
    - page_content: |-
        impl Mode {
            is_mode!(is_cmd_line, CmdLine);
            is_mode!(is_insert, Insert);
            is_mode!(is_langmap, Langmap);
            is_mode!(is_nvo, NormalVisualOperator);
            is_mode!(is_normal, Normal);
            is_mode!(is_op_pending, OperatorPending);
            is_mode!(is_select, Select);
            is_mode!(is_terminal, Terminal);
            is_mode!(is_visual, Visual);
            is_mode!(is_visual_select, VisualSelect);
        }

        impl From<Mode> for types::String {
            fn from(mode: Mode) -> Self {
                use Mode::*;
                match mode {
                    CmdLine => "c",
                    Insert => "i",
                    InsertCmdLine => "!",
                    Langmap => "l",
                    NormalVisualOperator => "",
                    Normal => "n",
                    OperatorPending => "o",
                    Select => "s",
                    Terminal => "t",
                    Visual => "x",
                    VisualSelect => "v",
                }
                .into()
            }
        }
      metadata: {}
  43:
    hash: 610c127ed362597554fbac7ea392f2334508423d5f55a9fbb11ec92d699ffb95
    path: ./types/command_modifiers.rs
    documents:
    - page_content: |-
        use serde::{Deserialize, Serialize};
        use types::{
            conversion::{self, ToObject},
            serde::Serializer,
            Dictionary,
            Object,
        };

        use super::SplitModifier;
        use crate::serde_utils as utils;

        /// See `:h command-modifiers` for more infos.
        #[non_exhaustive]
        #[derive(
            Copy, Clone, Debug, Default, Eq, PartialEq, Hash, Deserialize, Serialize,
        )]
        pub struct CommandModifiers {
            pub browse: bool,
            pub confirm: bool,
            pub emsg_silent: bool,
            pub hide: bool,
            pub keepalt: bool,
            pub keepjumps: bool,
            pub keepmarks: bool,
            pub keeppatterns: bool,
            pub lockmarks: bool,
            pub noautocmd: bool,
            pub noswapfile: bool,
            pub sandbox: bool,
            pub silent: bool,
            #[serde(deserialize_with = "utils::empty_string_is_none")]
            pub split: Option<SplitModifier>,
            pub tab: i32,
            pub verbose: i32,
            pub vertical: bool,
        }
      metadata: {}
    - page_content: |-
        impl ToObject for CommandModifiers {
            fn to_object(self) -> Result<Object, conversion::Error> {
                self.serialize(Serializer::new()).map_err(Into::into)
            }
        }

        impl From<CommandModifiers> for Dictionary {
            fn from(mods: CommandModifiers) -> Self {
                let obj = mods.to_object().unwrap();
                unsafe { obj.into_dictionary_unchecked() }
            }
        }
      metadata: {}
  44:
    hash: 460e3e05f153372eac49a9a241a3799a8dfad4cf6e1066dba1debe8a35ee3415
    path: ./types/mod.rs
    documents:
    - page_content: //! Contains various types given to and returned from Neovim API functions.
      metadata: {}
    - page_content: |-
        mod autocmd_callback_args;
        mod autocmd_infos;
        mod channel_infos;
        mod client_infos;
        mod cmd_infos;
        mod cmd_magic;
        mod cmd_range;
        mod command_addr;
        mod command_args;
        mod command_complete;
        mod command_infos;
        mod command_modifiers;
        mod command_nargs;
        mod command_range;
        mod context_type;
        mod editor_context;
        mod extmark_hl_mode;
        mod extmark_infos;
        mod extmark_position;
        mod extmark_virt_text_chunk;
        mod extmark_virt_text_position;
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        mod get_hl_infos;
        mod got_mode;
        mod highlight_infos;
        mod keymap_infos;
        mod log_level;
        mod mode;
        mod mouse_action;
        mod mouse_button;
        mod one_or_more;
        mod option_infos;
        mod parsed_viml_expression;
        mod paste_phase;
        mod proc_infos;
        mod register_type;
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        mod split_direction;
        mod split_modifier;
        mod statusline_highlight_infos;
        mod statusline_infos;
        mod ui_infos;
        mod viml_ast_node;
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        mod win_text_height_infos;
      metadata: {}
    - page_content: |-
        mod win_text_height_infos;
        mod window_anchor;
        mod window_border;
        mod window_border_char;
        mod window_config;
        mod window_relative_to;
        mod window_style;
        mod window_title;
        mod window_title_position;
      metadata: {}
    - page_content: |-
        pub use autocmd_callback_args::*;
        pub use autocmd_infos::*;
        pub use channel_infos::*;
        pub use client_infos::*;
        pub use cmd_infos::*;
        pub use cmd_magic::*;
        pub use cmd_range::*;
        pub use command_addr::*;
        pub use command_args::*;
        pub use command_complete::*;
        pub use command_infos::*;
        pub use command_modifiers::*;
        pub use command_nargs::*;
        pub use command_range::*;
        pub use context_type::*;
        pub use editor_context::*;
        pub use extmark_hl_mode::*;
        pub use extmark_infos::*;
        pub use extmark_position::*;
        pub use extmark_virt_text_chunk::*;
        pub use extmark_virt_text_position::*;
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        pub use get_hl_infos::GetHlInfos;
        pub use got_mode::*;
        pub use highlight_infos::*;
        pub use keymap_infos::*;
        pub use log_level::*;
        pub use mode::*;
        pub use mouse_action::*;
        pub use mouse_button::*;
        pub use one_or_more::*;
        pub use option_infos::*;
        pub use parsed_viml_expression::*;
        pub use paste_phase::*;
        pub use proc_infos::*;
        pub use register_type::*;
      metadata: {}
    - page_content: |-
        pub use proc_infos::*;
        pub use register_type::*;
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        pub use split_direction::*;
        pub use split_modifier::*;
        pub use statusline_highlight_infos::*;
        pub use statusline_infos::*;
        pub use ui_infos::*;
        pub use viml_ast_node::*;
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        pub use win_text_height_infos::*;
        pub use window_anchor::*;
        pub use window_border::*;
        pub use window_border_char::*;
        pub(crate) use window_config::WindowOpts;
        pub use window_config::{WindowConfig, WindowConfigBuilder};
        pub use window_relative_to::*;
        pub use window_style::*;
        pub use window_title::*;
        pub use window_title_position::*;
      metadata: {}
  45:
    hash: df59834f208fcb0c4b29c3a6635823b968982903264b98b1e478cbbf268c1792
    path: ./types/log_level.rs
    documents:
    - page_content: |-
        #[non_exhaustive]
        #[derive(Copy, Clone, Debug, Eq, PartialEq, Hash)]
        pub enum LogLevel {
            Trace = 0,
            Debug = 1,
            Info = 2,
            Warn = 3,
            Error = 4,
            Off = 5,
        }
      metadata: {}
  46:
    hash: e39007124c2e604f770ccd52f9fcee172c373795a02e51b178624f7fb304f8c6
    path: ./types/parsed_viml_expression.rs
    documents:
    - page_content: |-
        use core::cmp::Ordering;
        use core::mem::transmute;
        use std::collections::BTreeSet;

        use serde::Deserialize;
        use types::{
            conversion::{self, FromObject},
            serde::Deserializer,
            Float,
            Integer,
            Object,
        };

        use super::viml_ast_node::*;

        #[non_exhaustive]
        #[derive(Clone, Debug, Default, Eq, PartialEq, Deserialize)]
        /// Informations about a parsed VimL expression returned by
        /// [`parse_expression`](crate::parse_expression).
        pub struct ParsedVimLExpression {
            /// The syntax tree of the parsed expression.
            #[serde(default)]
            pub ast: Option<VimLExpressionAst>,

            /// Only present if there was an error parsing the expression.
            #[serde(default)]
            pub error: Option<ParseExpressionError>,
      metadata: {}
    - page_content: |-
        /// Only present if `include_highlight` was set to `true` when calling
            /// [`parse_expression`](crate::parse_expression). The first three items of
            /// the tuples represent the line, starting column and ending column
            /// (exclusive) of each highlight, while the last item is the highlight
            /// group name.
            #[serde(default)]
            pub highlight: Vec<(usize, usize, usize, String)>,

            /// Number of bytes successfully parsed.
            pub len: usize,
        }

        #[non_exhaustive]
        #[derive(Clone, Debug, Default, Eq, PartialEq, Hash, Deserialize)]
        pub struct ParseExpressionError {
            /// Error message argument.
            pub arg: String,

            /// Error message in printf format. Contains exactly one `"%.*s"` block.
            pub message: String,
        }

        #[non_exhaustive]
        #[derive(Clone, Debug, Eq, PartialEq, Deserialize)]
        #[serde(from = "DeserializedVimLExpressionAST")]
        pub struct VimLExpressionAst {
            /// A tree of child nodes.
            #[serde(default)]
            pub children: BTreeSet<VimLExpressionAst>,
      metadata: {}
    - page_content: |-
        /// Length of the node.
            pub len: usize,

            /// A `(line, column)` tuple describing where the the node is started.
            pub start: (usize, usize),

            /// Error message in printf format. Contains exactly one `"%.*s"` block.
            pub ty: VimLAstNode,
        }

        // fn deserialize_children<'de, D>(
        //     deserializer: D,
        // ) -> Result<BTreeSet<VimLExpressionAst>, D::Error>
        // where
        //     D: serde::de::Deserializer<'de>,
        // {
        //     todo!()
        // }

        /// Only used for deserialization purposes.
        #[derive(Deserialize)]
        #[allow(dead_code)]
        struct DeserializedVimLExpressionAST {
            #[serde(default)]
            augmentation: Option<AssignmentAugmentation>,

            #[serde(default)]
            ccs_strategy: Option<ExprCaseCompareStrategy>,

            #[serde(default)]
            children: BTreeSet<VimLExpressionAst>,

            #[serde(default)]
            cmp_type: Option<ExprComparisonType>,

            #[serde(default)]
            fvalue: Option<Float>,

            #[serde(default)]
            ident: Option<String>,
      metadata: {}
    - page_content: |-
        #[serde(default)]
            ident: Option<String>,

            #[serde(default)]
            invert: Option<bool>,

            #[serde(default)]
            ivalue: Option<Integer>,

            len: usize,

            #[serde(default)]
            name: Option<i32>,

            #[serde(default)]
            scope: Option<ExprScope>,

            start: (usize, usize),

            #[serde(default)]
            svalue: Option<String>,

            #[serde(rename = "type")]
            ty: DeserializedVimLASTNode,
        }

        #[derive(Deserialize)]
        #[serde(untagged)]
        enum ExprScope {
            Opt(ExprOptScope),
            Var(ExprVarScope),
        }
      metadata: {}
    - page_content: |-
        impl From<DeserializedVimLExpressionAST> for VimLExpressionAst {
            fn from(ast: DeserializedVimLExpressionAST) -> Self {
                use DeserializedVimLASTNode::*;
                let ty = match ast.ty {
                    And => VimLAstNode::And,
                    Arrow => VimLAstNode::Arrow,
                    Assignment => VimLAstNode::Assignment(ast.augmentation.unwrap()),
                    BinaryMinus => VimLAstNode::BinaryMinus,
                    BinaryPlus => VimLAstNode::BinaryPlus,
                    Call => VimLAstNode::Call,
                    Colon => VimLAstNode::Colon,
                    Comma => VimLAstNode::Comma,
                    Comparison => VimLAstNode::Comparison {
                        cmp_type: ast.cmp_type.unwrap(),
                        ccs_strategy: ast.ccs_strategy.unwrap(),
                        invert: ast.invert.unwrap(),
                    },
                    ComplexIdentifier => VimLAstNode::ComplexIdentifier,
                    Concat => VimLAstNode::Concat,
                    ConcatOrSubscript => VimLAstNode::ConcatOrSubscript,
      metadata: {}
    - page_content: |-
        CurlyBracesIdentifier => VimLAstNode::CurlyBracesIdentifier,
                    DictLiteral => VimLAstNode::DictLiteral,
                    Division => VimLAstNode::Division,
                    DoubleQuotedString => {
                        VimLAstNode::DoubleQuotedString(ast.svalue.unwrap())
                    },
                    Environment => {
                        VimLAstNode::Environment { ident: ast.ident.unwrap() }
                    },
                    Float => VimLAstNode::Float(ast.fvalue.unwrap()),
                    Integer => VimLAstNode::Integer(ast.ivalue.unwrap()),
                    Lambda => VimLAstNode::Lambda,
                    ListLiteral => VimLAstNode::ListLiteral,
                    Missing => VimLAstNode::Missing,
                    Mod => VimLAstNode::Mod,
                    Multiplication => VimLAstNode::Multiplication,
                    Nested => VimLAstNode::Nested,
                    Not => VimLAstNode::Not,
                    OpMissing => VimLAstNode::OpMissing,
                    Option => {
                        let ident = ast.ident.unwrap();
      metadata: {}
    - page_content: |-
        // The `scope` integer may be deserialized into both the `Opt`
                        // and `Var` variants bc they overlap. To account for this we
                        // first extract the u8 and then turn that back into a
                        // `ExprOptScope` by transmuting. Same for `PlainIdentifier`.
                        let scope = match ast.scope.unwrap() {
                            ExprScope::Opt(scope) => scope as u8,
                            ExprScope::Var(scope) => scope as u8,
                        };
                        // SAFETY: read above.
                        let scope = unsafe { transmute::<u8, ExprOptScope>(scope) };

                        VimLAstNode::Option { scope, ident }
                    },
                    Or => VimLAstNode::Or,
                    PlainIdentifier => {
                        let ident = ast.ident.unwrap();
      metadata: {}
    - page_content: |-
        let scope = match ast.scope.unwrap() {
                            ExprScope::Opt(scope) => scope as u8,
                            ExprScope::Var(scope) => scope as u8,
                        };
                        // SAFETY: read above.
                        let scope = unsafe { transmute::<u8, ExprVarScope>(scope) };

                        VimLAstNode::PlainIdentifier { scope, ident }
                    },
                    PlainKey => VimLAstNode::PlainKey { ident: ast.ident.unwrap() },
                    Register => VimLAstNode::Register { name: ast.name.unwrap() },
                    SingleQuotedString => {
                        VimLAstNode::SingleQuotedString(ast.svalue.unwrap())
                    },
                    Subscript => VimLAstNode::Subscript,
                    Ternary => VimLAstNode::Ternary,
                    TernaryValue => VimLAstNode::TernaryValue,
                    UnaryMinus => VimLAstNode::UnaryMinus,
                    UnaryPlus => VimLAstNode::UnaryPlus,
                    UnknownFigure => VimLAstNode::UnknownFigure,
                };
      metadata: {}
    - page_content: |-
        Self { ty, start: ast.start, len: ast.len, children: ast.children }
            }
        }

        impl Ord for VimLExpressionAst {
            fn cmp(&self, other: &Self) -> Ordering {
                match (self.children.len(), other.children.len()) {
                    (l1, l2) if l1 < l2 => Ordering::Less,
                    (l1, l2) if l1 == l2 => Ordering::Equal,
                    (l1, l2) if l1 > l2 => Ordering::Greater,
                    _ => unreachable!(),
                }
            }
        }

        impl PartialOrd for VimLExpressionAst {
            fn partial_cmp(&self, other: &Self) -> Option<Ordering> {
                Some(self.cmp(other))
            }
        }

        impl FromObject for ParsedVimLExpression {
            fn from_object(obj: Object) -> Result<Self, conversion::Error> {
                Self::deserialize(Deserializer::new(obj)).map_err(Into::into)
            }
        }
      metadata: {}
  47:
    hash: d8e1c2503ea0dd805920e86ca32e7efd2ab99d18cd06909a11a5d5d8c42e4934
    path: ./types/cmd_infos.rs
    documents:
    - page_content: |-
        use serde::Deserialize;
        use types::{
            conversion::{self, FromObject, ToObject},
            serde::Deserializer,
            Array,
            Object,
        };
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        use types::{Boolean, Dictionary, Integer, String as NvimString};

        use super::{CmdMagic, CmdRange, CommandAddr, CommandModifiers, CommandNArgs};
        use crate::serde_utils as utils;

        #[non_exhaustive]
        #[derive(Clone, Debug, Default, Deserialize)]
        pub struct CmdInfos {
            /// Value of `:command-addr`. Uses short name.
            #[serde(default, deserialize_with = "utils::none_literal_is_none")]
            // No setter bc `addr` is ignored when passed to `nvim_cmd`.
            pub addr: Option<CommandAddr>,

            /// Command arguments.
            #[serde(default)]
            pub args: Vec<String>,

            /// Whether the command contains a `<bang>` (`!`) modifier.
            #[serde(default)]
            pub bang: Option<bool>,

            /// Command name.
            #[serde(default)]
            pub cmd: Option<String>,
      metadata: {}
    - page_content: |-
        /// Any count that was supplied to the command. `None` if command cannot
            /// take a count.
            #[serde(default, deserialize_with = "utils::minus_one_is_none")]
            pub count: Option<u32>,

            #[serde(default)]
            pub magic: Option<CmdMagic>,

            #[serde(default)]
            pub mods: Option<CommandModifiers>,

            // Setter doesn't exist bc `nargs` is ignored when passed to `nvim_cmd`.
            /// Value of `:command-nargs`
            #[serde(default)]
            pub nargs: Option<CommandNArgs>,

            // Setter doesn't exist bc `nextcmd` is ignored when passed to `nvim_cmd`.
            /// Next command if there are multiple commands separated by a `:bar`.
            /// `None` if there isn't a next command.
            #[serde(default, deserialize_with = "utils::empty_string_is_none")]
            pub nextcmd: Option<String>,

            /// Command range.
            #[serde(default)]
            pub range: Option<CmdRange>,
      metadata: {}
    - page_content: |-
        /// The optional command `<register>`. `None` if not specified or if
            /// command cannot take a register.
            #[serde(default, deserialize_with = "utils::char_from_string")]
            pub reg: Option<char>,
        }

        impl CmdInfos {
            #[inline(always)]
            pub fn builder() -> CmdInfosBuilder {
                CmdInfosBuilder::default()
            }
        }

        #[derive(Clone, Default)]
        pub struct CmdInfosBuilder(CmdInfos);

        impl CmdInfosBuilder {
            /// Command arguments.
            #[inline]
            pub fn args<S, I>(&mut self, iter: I) -> &mut Self
            where
                S: Into<String>,
                I: IntoIterator<Item = S>,
            {
                self.0.args = iter.into_iter().map(Into::into).collect();
                self
            }

            /// Whether the command contains a `<bang>` (`!`) modifier.
            #[inline]
            pub fn bang(&mut self, bang: bool) -> &mut Self {
                self.0.bang = Some(bang);
                self
            }
      metadata: {}
    - page_content: |-
        /// Command name.
            #[inline]
            pub fn cmd(&mut self, cmd: impl Into<String>) -> &mut Self {
                self.0.cmd = Some(cmd.into());
                self
            }

            /// Any count that was supplied to the command. `None` if command cannot
            /// take a count.
            #[inline]
            pub fn count(&mut self, count: u32) -> &mut Self {
                self.0.count = Some(count);
                self
            }

            #[inline]
            pub fn magic(&mut self, magic: CmdMagic) -> &mut Self {
                self.0.magic = Some(magic);
                self
            }

            #[inline]
            pub fn mods(&mut self, mods: CommandModifiers) -> &mut Self {
                self.0.mods = Some(mods);
                self
            }

            // Setter doesn't exist bc `nargs` is ignored when passed to `nvim_cmd`.
            /// Value of `:command-nargs`
            #[inline]
            pub fn nargs(&mut self, nargs: CommandNArgs) -> &mut Self {
                self.0.nargs = Some(nargs);
                self
            }
      metadata: {}
    - page_content: |-
        // Setter doesn't exist bc `nextcmd` is ignored when passed to `nvim_cmd`.
            /// Next command if there are multiple commands separated by a `:bar`.
            /// `None` if there isn't a next command.
            #[inline]
            pub fn nextcmd(&mut self, nextcmd: impl Into<String>) -> &mut Self {
                self.0.nextcmd = Some(nextcmd.into());
                self
            }

            /// Command range.
            #[inline]
            pub fn range(&mut self, range: CmdRange) -> &mut Self {
                self.0.range = Some(range);
                self
            }

            /// The optional command `<register>`. `None` if not specified or if
            /// command cannot take a register.
            #[inline]
            pub fn reg(&mut self, reg: char) -> &mut Self {
                self.0.reg = Some(reg);
                self
            }

            #[inline]
            pub fn build(&mut self) -> CmdInfos {
                std::mem::take(&mut self.0)
            }
        }
      metadata: {}
    - page_content: |-
        impl FromObject for CmdInfos {
            #[inline]
            fn from_object(obj: Object) -> Result<Self, conversion::Error> {
                Self::deserialize(Deserializer::new(obj)).map_err(Into::into)
            }
        }

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        #[derive(Default, Debug)]
        #[allow(non_camel_case_types)]
        #[repr(C)]
        pub(crate) struct ParseCmdOutput {
            cmd: Object,
            reg: Object,
            bang: Object,
            addr: Object,
            mods: Object,
            args: Object,
            count: Object,
            magic: Object,
            nargs: Object,
            range: Object,
            nextcmd: Object,
        }

        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        #[derive(Default, Debug, Clone, macros::OptsBuilder)]
        #[repr(C)]
        pub(crate) struct ParseCmdOutput {
            #[builder(mask)]
            mask: u64,
            cmd: NvimString,
            range: Array,
            count: Integer,
            reg: NvimString,
            bang: Boolean,
            args: Array,
            magic: Dictionary,
            mods: Dictionary,
            nargs: Object,
      metadata: {}
    - page_content: |-
        // Only on 0.10.
            #[cfg(all(feature = "neovim-0-10", not(feature = "neovim-nightly")))]
            addr: Object,

            // Only on Nightly.
            #[cfg(feature = "neovim-nightly")]
            addr: NvimString,

            // Only on 0.10.
            #[cfg(all(feature = "neovim-0-10", not(feature = "neovim-nightly")))]
            nextcmd: Object,

            // Only on 0.10.
            #[cfg(feature = "neovim-nightly")]
            nextcmd: NvimString,
        }
      metadata: {}
    - page_content: |-
        impl From<&CmdInfos> for ParseCmdOutput {
            #[inline]
            fn from(infos: &CmdInfos) -> Self {
                #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
                {
                    Self {
                        cmd: infos.cmd.clone().into(),
                        reg: infos.reg.into(),
                        bang: infos.bang.into(),
                        addr: infos
                            .addr
                            .map(|v| v.to_object().unwrap())
                            .unwrap_or_default(),
                        mods: infos
                            .mods
                            .map(|v| v.to_object().unwrap())
                            .unwrap_or_default(),
                        args: Array::from_iter(infos.args.clone()).into(),
                        count: infos.count.into(),
                        magic: infos
                            .magic
                            .map(|v| v.to_object().unwrap())
                            .unwrap_or_default(),
                        nargs: infos
                            .nargs
                            .map(|v| v.to_object().unwrap())
      metadata: {}
    - page_content: |-
        .unwrap_or_default(),
                        range: infos.range.into(),
                        nextcmd: infos.nextcmd.clone().into(),
                    }
                }
                #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                {
                    let mut builder = Self::builder();
      metadata: {}
    - page_content: |-
        if let Some(cmd) = infos.cmd.as_deref() {
                        builder.cmd(cmd.into());
                    }

                    if let Some(range) = infos.range {
                        builder.range(Array::from(range));
                    }

                    if let Some(count) = infos.count {
                        builder.count(count as Integer);
                    }

                    if let Some(reg) = infos.reg {
                        builder.reg(reg.into());
                    }

                    if let Some(bang) = infos.bang {
                        builder.bang(bang);
                    }

                    if !infos.args.is_empty() {
                        builder.args(Array::from_iter(infos.args.clone()));
                    }

                    if let Some(magic) = infos.magic {
                        builder.magic(Dictionary::from(magic));
                    }

                    if let Some(mods) = infos.mods {
                        builder.mods(Dictionary::from(mods));
                    }
      metadata: {}
    - page_content: |-
        if let Some(nargs) = infos.nargs {
                        builder.nargs(nargs.to_object().unwrap());
                    }

                    if let Some(addr) = infos.addr {
                        builder.addr(addr.as_str().into());
                    }

                    if let Some(nextcmd) = infos.nextcmd.as_deref() {
                        builder.nextcmd(nextcmd.into());
                    };

                    builder.build()
                }
            }
        }

        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        impl TryFrom<ParseCmdOutput> for CmdInfos {
            type Error = conversion::Error;

            #[inline]
            fn try_from(cmd: ParseCmdOutput) -> Result<Self, Self::Error> {
                let ParseCmdOutput {
                    addr,
                    args,
                    bang,
                    cmd,
                    count,
                    magic,
                    mods,
                    nargs,
                    nextcmd,
                    range,
                    reg,
                    ..
                } = cmd;
      metadata: {}
    - page_content: |-
        #[inline]
                fn deserialize<T>(
                    obj: impl Into<Object>,
                ) -> Result<T, conversion::Error>
                where
                    T: serde::de::DeserializeOwned,
                {
                    T::deserialize(Deserializer::new(obj.into())).map_err(Into::into)
                }
      metadata: {}
    - page_content: |-
        Ok(Self {
                    #[cfg(all(feature = "neovim-0-10", not(feature = "neovim-nightly")))] // Only on 0.10.
                    addr: utils::none_literal_is_none(Deserializer::new(addr))?,
                    #[cfg(feature = "neovim-nightly")] // Only on Nightly.
                    addr: utils::none_literal_is_none(Deserializer::new(addr.into()))?,
                    args: deserialize(args)?,
                    bang: deserialize(bang)?,
                    cmd: deserialize(cmd)?,
                    count: utils::minus_one_is_none(Deserializer::new(count.into()))?,
                    magic: deserialize(magic)?,
                    mods: deserialize(mods)?,
                    nargs: deserialize(nargs)?,
                    #[cfg(all(feature = "neovim-0-10", not(feature = "neovim-nightly")))] // Only on 0.10.
                    nextcmd: utils::empty_string_is_none(Deserializer::new(
                        nextcmd,
                    ))?,
                    #[cfg(feature = "neovim-nightly")] // Only on Nightly.
                    nextcmd: utils::empty_string_is_none(Deserializer::new(
      metadata: {}
    - page_content: |-
        nextcmd.into(),
                    ))?,
                    range: deserialize(range)?,
                    reg: utils::char_from_string(Deserializer::new(reg.into()))?,
                })
            }
        }
      metadata: {}
  48:
    hash: 430f841b06c0fc2d8e5a69613d7e5a9efaa33507bd912c130559a861522dd4e7
    path: ./types/window_relative_to.rs
    documents:
    - page_content: |-
        use serde::Deserialize;
        use types::{Object, String as NvimString};

        use crate::Window;

        #[non_exhaustive]
        #[derive(Clone, Debug, Eq, PartialEq, Hash, Deserialize)]
        #[serde(rename_all = "lowercase")]
        /// Specifies what a floating window is positioned relative to.
        pub enum WindowRelativeTo {
            /// Positions the window relative to the global Neovim editor grid.
            Editor,

            /// Positions the window relative to the current cursor position.
            Cursor,

            /// Positions the window relative to the current mouse cursor position..
            Mouse,

            /// Positions the window relative to another window.
            #[serde(untagged)]
            Window(Window),
        }

        impl From<WindowRelativeTo> for NvimString {
            fn from(pos: WindowRelativeTo) -> Self {
                match pos {
                    WindowRelativeTo::Editor => "editor",
                    WindowRelativeTo::Window(_) => "win",
                    WindowRelativeTo::Cursor => "cursor",
                    WindowRelativeTo::Mouse => "mouse",
                }
                .into()
            }
        }
      metadata: {}
    - page_content: |-
        impl From<&WindowRelativeTo> for Object {
            fn from(pos: &WindowRelativeTo) -> Self {
                NvimString::from(pos.clone()).into()
            }
        }
      metadata: {}
  49:
    hash: 2dd4e0da4af695f436b1bb5dbc95492aa26fba2eacf817043533aa0f2a344041
    path: ./types/window_config.rs
    documents:
    - page_content: |-
        use serde::Deserialize;
        use types::{
            conversion::{self, FromObject},
            serde::Deserializer,
            Array,
            Float,
            Integer,
            Object,
        };
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        use types::{Boolean, String as NvimString, WinHandle};

        use super::{WindowAnchor, WindowBorder, WindowRelativeTo, WindowStyle};
        use crate::serde_utils as utils;
        use crate::Window;

        #[non_exhaustive]
        #[derive(Clone, Debug, Default, PartialEq, Deserialize)]
        pub struct WindowConfig {
            /// Decides which corner of the window to place at `(row, col)`.
            #[serde(default, deserialize_with = "utils::empty_string_is_none")]
            pub anchor: Option<WindowAnchor>,

            /// Style of the optional window border.
            pub border: Option<WindowBorder>,
      metadata: {}
    - page_content: |-
        /// Places window relative to buffer text (only when
            /// [`relative`](WindowConfigBuilder::relative) is set to
            /// [`WindowRelativeTo::Window(win)`](WindowRelativeTo)). Takes a zero
            /// indexed `(line, column)` tuple, with `row` and `col` being placed
            /// relative to this position if specified.
            #[serde(default, deserialize_with = "utils::empty_array_is_none")]
            pub bufpos: Option<(usize, usize)>,

            /// Column position in units of screen cell width. May be fractional
            pub col: Option<Float>,

            /// Whether an attached GUI should display the window as an external
            /// top-level window.
            pub external: Option<bool>,

            #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
            #[cfg_attr(
                docsrs,
                doc(cfg(any(feature = "neovim-0-10", feature = "neovim-nightly")))
            )]
            pub fixed: Option<bool>,
      metadata: {}
    - page_content: |-
        /// Enable focus by user actions like mouse events. Non-focusable windows
            /// can be entered by [`set_current_win`](crate::set_current_win).
            pub focusable: Option<bool>,

            #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
            #[cfg_attr(
                docsrs,
                doc(cfg(any(feature = "neovim-0-10", feature = "neovim-nightly")))
            )]
            pub footer: Option<super::WindowTitle>,

            #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
            #[cfg_attr(
                docsrs,
                doc(cfg(any(feature = "neovim-0-10", feature = "neovim-nightly")))
            )]
            #[serde(default, deserialize_with = "utils::empty_string_is_none")]
            pub footer_pos: Option<super::WindowTitlePosition>,

            /// Window height in character cells. Minimum of 1.
            pub height: Option<u32>,

            #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
            #[cfg_attr(
                docsrs,
                doc(cfg(any(feature = "neovim-0-10", feature = "neovim-nightly")))
            )]
            pub hide: Option<bool>,
      metadata: {}
    - page_content: |-
        #[cfg_attr(docsrs, doc(cfg(feature = "neovim-nightly")))]
            #[cfg(feature = "neovim-nightly")] // On 0.10 and nightly.
            #[serde(default)]
            pub mouse: bool,

            /// If `true` then no buffer-related autocommand events such as `BufEnter`
            /// or `BufLeave` are fired when calling [`open_win`](crate::open_win).
            pub noautocmd: Option<bool>,

            /// What the window is positioned relative to.
            pub relative: Option<WindowRelativeTo>,

            /// Row position in units of screen cell height. May be fractional.
            pub row: Option<Float>,

            #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
            #[cfg_attr(
                docsrs,
                doc(cfg(any(feature = "neovim-0-10", feature = "neovim-nightly")))
            )]
            #[serde(default, deserialize_with = "utils::empty_string_is_none")]
            pub split: Option<super::SplitDirection>,
      metadata: {}
    - page_content: |-
        /// Configures the appearance of the window.
            #[serde(default, deserialize_with = "utils::empty_string_is_none")]
            pub style: Option<WindowStyle>,

            pub title: Option<super::WindowTitle>,

            #[serde(default, deserialize_with = "utils::empty_string_is_none")]
            pub title_pos: Option<super::WindowTitlePosition>,

            #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
            #[cfg_attr(
                docsrs,
                doc(cfg(any(feature = "neovim-0-10", feature = "neovim-nightly")))
            )]
            pub vertical: Option<bool>,

            /// Window width in character cells. Minimum of 1.
            pub width: Option<u32>,

            /// For relative positioned windows, the [`Window`] that the window is
            /// positioned relative to.
            pub win: Option<Window>,

            /// Stacking order. Windows with higher `zindex` go in front of windows
            /// with lower indices.
            pub zindex: Option<u32>,
        }
      metadata: {}
    - page_content: |-
        impl WindowConfig {
            #[inline(always)]
            /// Creates a new `WinConfigBuilder`.
            pub fn builder() -> WindowConfigBuilder {
                WindowConfigBuilder::default()
            }
        }

        #[derive(Clone, Default)]
        pub struct WindowConfigBuilder(WindowConfig);

        impl WindowConfigBuilder {
            /// Decides which corner of the window to place at `(row, col)`.
            #[inline]
            pub fn anchor(&mut self, anchor: WindowAnchor) -> &mut Self {
                self.0.anchor = Some(anchor);
                self
            }

            /// Style of the optional window border.
            #[inline]
            pub fn border(&mut self, border: WindowBorder) -> &mut Self {
                self.0.border = Some(border);
                self
            }
      metadata: {}
    - page_content: |-
        /// Places window relative to buffer text (only when
            /// [`relative`](WindowConfigBuilder::relative) is set to
            /// [`WindowRelativeTo::Window(win)`](WindowRelativeTo)). Takes a zero
            /// indexed `(line, column)` tuple, with `row` and `col` being placed
            /// relative to this position if specified.
            #[inline]
            pub fn bufpos(&mut self, line: usize, column: usize) -> &mut Self {
                self.0.bufpos = Some((line, column));
                self
            }

            /// Column position in units of screen cell width. May be fractional
            #[inline]
            pub fn col(&mut self, col: impl Into<Float>) -> &mut Self {
                self.0.col = Some(col.into());
                self
            }

            /// Whether an attached GUI should display the window as an external
            /// top-level window.
            #[inline]
            pub fn external(&mut self, external: bool) -> &mut Self {
                self.0.external = Some(external);
                self
            }
      metadata: {}
    - page_content: |-
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
            #[cfg_attr(
                docsrs,
                doc(cfg(any(feature = "neovim-0-10", feature = "neovim-nightly")))
            )]
            #[inline]
            pub fn fixed(&mut self, fixed: bool) -> &mut Self {
                self.0.fixed = Some(fixed);
                self
            }

            /// Enable focus by user actions like mouse events. Non-focusable windows
            /// can be entered by [`set_current_win`](crate::set_current_win).
            #[inline]
            pub fn focusable(&mut self, focusable: bool) -> &mut Self {
                self.0.focusable = Some(focusable);
                self
            }

            #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
            #[cfg_attr(
                docsrs,
                doc(cfg(any(feature = "neovim-0-10", feature = "neovim-nightly")))
            )]
            #[inline]
            pub fn footer(&mut self, footer: super::WindowTitle) -> &mut Self {
                self.0.footer = Some(footer);
                self
            }
      metadata: {}
    - page_content: |-
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
            #[cfg_attr(
                docsrs,
                doc(cfg(any(feature = "neovim-0-10", feature = "neovim-nightly")))
            )]
            #[inline]
            pub fn footer_pos(
                &mut self,
                footer_pos: super::WindowTitlePosition,
            ) -> &mut Self {
                self.0.footer_pos = Some(footer_pos);
                self
            }

            #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
            #[cfg_attr(
                docsrs,
                doc(cfg(any(feature = "neovim-0-10", feature = "neovim-nightly")))
            )]
            #[inline]
            pub fn hide(&mut self, hide: bool) -> &mut Self {
                self.0.hide = Some(hide);
                self
            }

            /// Window height in character cells. Minimum of 1.
            #[inline]
            pub fn height(&mut self, height: u32) -> &mut Self {
                self.0.height = Some(height);
                self
            }
      metadata: {}
    - page_content: |-
        /// If `true` then no buffer-related autocommand events such as `BufEnter`
            /// or `BufLeave` are fired when calling [`open_win`](crate::open_win).
            #[inline]
            pub fn noautocmd(&mut self, noautocmd: bool) -> &mut Self {
                self.0.noautocmd = Some(noautocmd);
                self
            }

            /// Sets the window layout to `floating`
            /// Decides what the window is positioned relatively to.
            #[inline]
            pub fn relative(&mut self, relative: WindowRelativeTo) -> &mut Self {
                if let WindowRelativeTo::Window(win) = &relative {
                    self.0.win = Some(win.clone());
                }
                self.0.relative = Some(relative);
                self
            }
      metadata: {}
    - page_content: |-
        /// Configures where a split window is opened.
            #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
            #[cfg_attr(
                docsrs,
                doc(cfg(any(feature = "neovim-0-10", feature = "neovim-nightly")))
            )]
            #[inline]
            pub fn split(&mut self, direction: super::SplitDirection) -> &mut Self {
                self.0.split = Some(direction);
                self
            }

            /// Should the split window be opened as vertical.
            #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
            #[cfg_attr(
                docsrs,
                doc(cfg(any(feature = "neovim-0-10", feature = "neovim-nightly")))
            )]
            #[inline]
            pub fn vertical(&mut self, vertical: bool) -> &mut Self {
                self.0.vertical = Some(vertical);
                self
            }

            /// Row position in units of screen cell height. May be fractional.
            #[inline]
            pub fn row(&mut self, row: impl Into<Float>) -> &mut Self {
                self.0.row = Some(row.into());
                self
            }
      metadata: {}
    - page_content: |-
        /// Configures the appearance of the window.
            #[inline]
            pub fn style(&mut self, style: WindowStyle) -> &mut Self {
                self.0.style = Some(style);
                self
            }

            /// Window width in character cells. Minimum of 1.
            #[inline]
            pub fn width(&mut self, width: u32) -> &mut Self {
                self.0.width = Some(width);
                self
            }

            /// Stacking order. Windows with higher `zindex` go in front of windows
            /// with lower indices.
            #[inline]
            pub fn zindex(&mut self, zindex: u32) -> &mut Self {
                self.0.zindex = Some(zindex);
                self
            }

            #[inline]
            pub fn title(&mut self, title: super::WindowTitle) -> &mut Self {
                self.0.title = Some(title);
                self
            }

            #[inline]
            pub fn title_pos(
                &mut self,
                title_pos: super::WindowTitlePosition,
            ) -> &mut Self {
                self.0.title_pos = Some(title_pos);
                self
            }
      metadata: {}
    - page_content: |-
        #[inline]
            pub fn build(&mut self) -> WindowConfig {
                std::mem::take(&mut self.0)
            }
        }

        impl FromObject for WindowConfig {
            #[inline]
            fn from_object(obj: Object) -> Result<Self, conversion::Error> {
                Self::deserialize(Deserializer::new(obj)).map_err(Into::into)
            }
        }

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        #[derive(Default, Debug)]
        #[allow(non_camel_case_types)]
        #[repr(C)]
        pub struct WindowOpts {
            col: Object,
            row: Object,
            win: Object,
            style: Object,
            #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
            title: Object,
            width: Object,
            height: Object,
            zindex: Object,
            anchor: Object,
            border: Object,
            bufpos: Object,
            external: Object,
            relative: Object,
            focusable: Object,
            noautocmd: Object,
            #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
            title_pos: Object,
        }
      metadata: {}
    - page_content: |-
        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl From<&WindowConfig> for WindowOpts {
            fn from(config: &WindowConfig) -> Self {
                let bufpos = match config.bufpos {
                    Some((line, column)) => {
                        Array::from_iter([line as Integer, column as Integer]).into()
                    },
                    _ => Object::nil(),
                };
      metadata: {}
    - page_content: |-
        Self {
                    anchor: config.anchor.into(),
                    border: config.border.clone().into(),
                    bufpos,
                    col: config.col.into(),
                    external: config.external.into(),
                    focusable: config.focusable.into(),
                    height: config.height.into(),
                    noautocmd: config.noautocmd.into(),
                    relative: config.relative.as_ref().into(),
                    row: config.row.into(),
                    style: config.style.into(),
                    #[cfg(all(
                        feature = "neovim-0-9",
                        not(feature = "neovim-nightly")
                    ))]
                    title: config.title.as_ref().into(),
                    #[cfg(all(
                        feature = "neovim-0-9",
                        not(feature = "neovim-nightly")
                    ))]
                    title_pos: config.title_pos.as_ref().into(),
                    width: config.width.into(),
                    win: config.win.as_ref().into(),
                    zindex: config.zindex.into(),
                }
            }
        }
      metadata: {}
    - page_content: |-
        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl TryFrom<types::Dictionary> for WindowConfig {
            type Error = conversion::Error;

            #[inline]
            fn try_from(mut dict: types::Dictionary) -> Result<Self, Self::Error> {
                let win = dict.get("win").map(|obj| unsafe {
                    // SAFETY: if the `win` key is present it's set to an integer
                    // representing a window handle.
                    obj.as_integer_unchecked() as i32
                });

                if let Some(handle) = win {
                    dict["relative"] = handle.into();
                }

                <Self as types::conversion::FromObject>::from_object(dict.into())
            }
        }
      metadata: {}
    - page_content: |-
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        #[derive(Clone, Default, Debug, macros::OptsBuilder)]
        #[repr(C)]
        pub struct WindowOpts {
            #[builder(mask)]
            mask: u64,
            row: Float,
            col: Float,
            width: Integer,
            height: Integer,
            anchor: NvimString,
            relative: NvimString,
            split: NvimString,
            win: WinHandle,
            bufpos: Array,
            external: Boolean,
            focusable: Boolean,
            #[cfg_attr(docsrs, doc(cfg(feature = "neovim-nightly")))]
            #[cfg(feature = "neovim-nightly")]
            mouse: Boolean,
            vertical: Boolean,
            zindex: Integer,
            border: Object,
            title: Object,
            title_pos: NvimString,
            footer: Object,
            footer_pos: NvimString,
            style: NvimString,
            noautocmd: Boolean,
            fixed: Boolean,
            hide: Boolean,
        }

        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        impl From<&WindowConfig> for WindowOpts {
            fn from(config: &WindowConfig) -> Self {
                let mut builder = WindowOptsBuilder::default();
      metadata: {}
    - page_content: |-
        if let Some(row) = config.row {
                    builder.row(row);
                }

                if let Some(col) = config.col {
                    builder.col(col);
                }

                if let Some(width) = config.width {
                    builder.width(width as Integer);
                }

                if let Some(height) = config.height {
                    builder.height(height as Integer);
                }

                if let Some(anchor) = config.anchor {
                    builder.anchor(anchor.into());
                }

                if let Some(relative) = &config.relative {
                    builder.relative(relative.clone().into());
                }

                if let Some(split) = config.split {
                    builder.split(split.into());
                }

                if let Some(win) = &config.win {
                    builder.win(win.0);
                }

                if let Some((line, column)) = config.bufpos {
                    builder.bufpos(Array::from_iter([
                        line as Integer,
                        column as Integer,
                    ]));
                }
      metadata: {}
    - page_content: |-
        if let Some(external) = config.external {
                    builder.external(external);
                }

                if let Some(focusable) = config.focusable {
                    builder.focusable(focusable);
                }

                #[cfg(feature = "neovim-nightly")]
                builder.mouse(config.mouse);

                if let Some(vertical) = config.vertical {
                    builder.vertical(vertical);
                }

                if let Some(zindex) = config.zindex {
                    builder.zindex(zindex as Integer);
                }

                if let Some(border) = &config.border {
                    builder.border(border.clone().into());
                }

                if let Some(title) = config.title.as_ref() {
                    builder.title(title.into());
                }

                if let Some(title_pos) = config.title_pos {
                    builder.title_pos(title_pos.into());
                }

                if let Some(footer) = config.footer.as_ref() {
                    builder.footer(footer.into());
                }
      metadata: {}
    - page_content: |-
        if let Some(footer_pos) = config.footer_pos {
                    builder.footer_pos(footer_pos.into());
                }

                if let Some(style) = config.style {
                    builder.style(style.into());
                }

                if let Some(noautocmd) = config.noautocmd {
                    builder.noautocmd(noautocmd);
                }

                if let Some(fixed) = config.fixed {
                    builder.fixed(fixed);
                }

                if let Some(hide) = config.hide {
                    builder.hide(hide);
                }

                builder.build()
            }
        }

        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        impl TryFrom<WindowOpts> for WindowConfig {
            type Error = conversion::Error;
      metadata: {}
    - page_content: |-
        #[inline]
            fn try_from(opts: WindowOpts) -> Result<Self, Self::Error> {
                let WindowOpts {
                    anchor,
                    border,
                    bufpos,
                    col,
                    external,
                    fixed,
                    focusable,
                    footer,
                    footer_pos,
                    height,
                    hide,
                    #[cfg(feature = "neovim-nightly")]
                    mouse,
                    noautocmd,
                    relative,
                    row,
                    split,
                    style,
                    title,
                    title_pos,
                    vertical,
                    width,
                    win,
                    zindex,
                    ..
                } = opts;

                #[inline]
                fn deserialize<T>(
                    obj: impl Into<Object>,
                ) -> Result<T, conversion::Error>
                where
                    T: serde::de::DeserializeOwned,
                {
                    T::deserialize(Deserializer::new(obj.into())).map_err(Into::into)
                }
      metadata: {}
    - page_content: |-
        #[derive(serde::Deserialize)]
                #[serde(rename_all = "lowercase")]
                enum WindowRelative {
                    Editor,
                    Win,
                    Cursor,
                    Mouse,
                }

                let relative = match utils::empty_string_is_none(Deserializer::new(
                    relative.into(),
                ))? {
                    Some(relative) => match relative {
                        WindowRelative::Editor => Some(WindowRelativeTo::Editor),
                        WindowRelative::Win => {
                            let win = deserialize(win)?;
                            Some(WindowRelativeTo::Window(win))
                        },
                        WindowRelative::Cursor => Some(WindowRelativeTo::Cursor),
                        WindowRelative::Mouse => Some(WindowRelativeTo::Mouse),
                    },
                    None => None,
                };

                let win = if let Some(WindowRelativeTo::Window(win)) = &relative {
                    Some(win.clone())
                } else {
                    None
                };
      metadata: {}
    - page_content: |-
        Ok(Self {
                    anchor: utils::empty_string_is_none(Deserializer::new(
                        anchor.into(),
                    ))?,
                    border: deserialize(border)?,
                    bufpos: utils::empty_array_is_none(Deserializer::new(
                        bufpos.into(),
                    ))?,
                    col: deserialize(col)?,
                    external: deserialize(external)?,
                    fixed: deserialize(fixed)?,
                    focusable: deserialize(focusable)?,
                    footer: deserialize(footer)?,
                    footer_pos: utils::empty_string_is_none(Deserializer::new(
                        footer_pos.into(),
                    ))?,
                    height: deserialize(height)?,
                    hide: deserialize(hide)?,
                    #[cfg(feature = "neovim-nightly")]
                    mouse,
                    noautocmd: deserialize(noautocmd)?,
                    relative,
                    row: deserialize(row)?,
                    split: utils::empty_string_is_none(Deserializer::new(
                        split.into(),
                    ))?,
      metadata: {}
    - page_content: |-
        split.into(),
                    ))?,
                    style: utils::empty_string_is_none(Deserializer::new(
                        style.into(),
                    ))?,
                    title: deserialize(title)?,
                    title_pos: utils::empty_string_is_none(Deserializer::new(
                        title_pos.into(),
                    ))?,
                    vertical: deserialize(vertical)?,
                    width: deserialize(width)?,
                    win,
                    zindex: deserialize(zindex)?,
                })
            }
        }
      metadata: {}
  50:
    hash: b5b288216dc31a119b759de279055c81d01f30430df11e53b482fb902f528075
    path: ./types/register_type.rs
    documents:
    - page_content: |-
        use serde::{ser, Serialize};
        use types::{conversion::FromObject, serde::Serializer};

        #[non_exhaustive]
        #[derive(Clone, Debug, Eq, PartialEq, Hash, Serialize)]
        pub enum RegisterType {
            #[serde(serialize_with = "serialize_blockwise")]
            BlockwiseVisual(Option<usize>),

            #[serde(rename = "c")]
            Charwise,

            #[serde(rename = "l")]
            Linewise,

            #[serde(rename = "")]
            Guess,
        }
      metadata: {}
    - page_content: |-
        fn serialize_blockwise<S>(
            width: &Option<usize>,
            serializer: S,
        ) -> Result<S::Ok, S::Error>
        where
            S: ser::Serializer,
        {
            serializer.serialize_str(
                &(match width {
                    Some(n) => format!("b{n}"),
                    None => "b".to_owned(),
                }),
            )
        }

        impl From<RegisterType> for types::String {
            fn from(reg_type: RegisterType) -> Self {
                let obj = reg_type
                    .serialize(Serializer::new())
                    .expect("`RegisterType` is serializable");

                Self::from_object(obj)
                    .expect("`RegisterType` is serialized into a string")
            }
        }
      metadata: {}
  51:
    hash: c9c6e11c44e04f18015149526bdaf4a18dbcd36bb9133be51307d186d67ca7af
    path: ./types/cmd_magic.rs
    documents:
    - page_content: |-
        use serde::Deserialize;

        #[non_exhaustive]
        #[derive(Copy, Clone, Debug, Default, Eq, PartialEq, Hash, Deserialize)]
        pub struct CmdMagic {
            /// If `true` the `|` character is treated as a command separator and the
            /// double quote character (`"`) is treated as the start of a comment.
            pub bar: bool,

            /// Whether the command expands filenames, resulting in characters like
            /// `"%"`, `"#"` and other wildcards to be expanded.
            pub file: bool,
        }

        impl From<CmdMagic> for types::Dictionary {
            #[inline(always)]
            fn from(magic: CmdMagic) -> Self {
                Self::from_iter([("file", magic.file), ("bar", magic.bar)])
            }
        }

        impl From<CmdMagic> for types::Object {
            #[inline(always)]
            fn from(magic: CmdMagic) -> Self {
                types::Dictionary::from(magic).into()
            }
        }
      metadata: {}
  52:
    hash: ce899f07027e1f86dded4e3a437ed4d983e666aeba64ca3203b8e420f7b5aa34
    path: ./types/window_border.rs
    documents:
    - page_content: |-
        use std::fmt;

        use serde::de;
        use types::{Array, Object};

        use super::WindowBorderChar;

        #[non_exhaustive]
        #[derive(Clone, Debug, Eq, PartialEq, Hash)]
        pub enum WindowBorder {
            /// No border.
            None,

            /// A single line box.
            Single,

            /// A double line box.
            Double,

            /// Like `Single`, but with rounded corners (`╭`, etc).
            Rounded,

            /// Adds a single whitespace cell of padding.
            Solid,

            /// A drop shadow effect by blending with the background.
            Shadow,

            /// A single character used for the whole border:
            ///
            /// aaaaa
            /// a   a
            /// a   a
            /// aaaaa
            Uniform(WindowBorderChar),

            /// A tuple `(a, b)` where `a` is used for the border's corners and `b` for
            /// its edges:
            ///
            /// abbba
            /// b   b
            /// b   b
            /// abbba
            CornersEdges(WindowBorderChar, WindowBorderChar),
      metadata: {}
    - page_content: |-
        /// A tuple `(a, b, c, d)` where `a` and `c` are used for the border's
            /// corners, `b` for its horizontal edges and `d` for the vertical ones:
            ///
            /// abbbc
            /// d   d
            /// d   d
            /// cbbba
            CornersHorizontalVertical(
                WindowBorderChar,
                WindowBorderChar,
                WindowBorderChar,
                WindowBorderChar,
            ),

            /// Use this if you're a control freak and want to specify every single
            /// corner and edge character individually.
            /// The tuple `(a, b, c, d, e, f, g, h)` specifies every corner and edge
            /// character clockwise:
            ///
            /// abbbc
            /// h   d
            /// h   d
            /// gfffe
            Anal(
                WindowBorderChar,
                WindowBorderChar,
                WindowBorderChar,
                WindowBorderChar,
                WindowBorderChar,
                WindowBorderChar,
                WindowBorderChar,
                WindowBorderChar,
            ),
        }
      metadata: {}
    - page_content: |-
        macro_rules! impl_from_tuple {
            ($variant:ident, $($ty:ident)*) => {
                impl <$($ty: Into<WindowBorderChar>),*> From<($($ty,)*)> for WindowBorder {
                    #[allow(non_snake_case)]
                    fn from(($($ty,)*): ($($ty,)*)) -> Self {
                        Self::$variant($($ty.into(),)*)
                    }
                }
            };
        }

        impl_from_tuple!(Uniform, A);
        impl_from_tuple!(CornersEdges, A B);
        impl_from_tuple!(CornersHorizontalVertical, A B C D);
        impl_from_tuple!(Anal, A B C D E F G H);

        impl From<WindowBorder> for Object {
            fn from(border: WindowBorder) -> Self {
                use WindowBorder::*;
                match border {
                    None => "none".into(),
                    Single => "single".into(),
                    Double => "double".into(),
                    Rounded => "rounded".into(),
                    Solid => "solid".into(),
                    Shadow => "shadow".into(),

                    Uniform(a) => Array::from_iter([a]).into(),

                    CornersEdges(a, b) => Array::from_iter([a, b]).into(),
      metadata: {}
    - page_content: |-
        CornersHorizontalVertical(a, b, c, d) => {
                        Array::from_iter([a, b, c, d]).into()
                    },

                    Anal(a, b, c, d, e, f, g, h) => {
                        Array::from_iter([a, b, c, d, e, f, g, h]).into()
                    },
                }
            }
        }

        impl<'de> de::Deserialize<'de> for WindowBorder {
            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
            where
                D: de::Deserializer<'de>,
            {
                struct WindowBorderVisitor;

                impl<'de> de::Visitor<'de> for WindowBorderVisitor {
                    type Value = WindowBorder;

                    fn expecting(&self, f: &mut fmt::Formatter) -> fmt::Result {
                        f.write_str(
                            "\"none\", \"single\", \"double\", \"rounded\", \
                             \"solid\", \"shadow\" or an array with n elements where \
                             n is a factor of 8",
                        )
                    }
      metadata: {}
    - page_content: |-
        fn visit_str<E>(self, s: &str) -> Result<Self::Value, E>
                    where
                        E: de::Error,
                    {
                        match s {
                            "none" => Ok(Self::Value::None),
                            "single" => Ok(Self::Value::Single),
                            "double" => Ok(Self::Value::Double),
                            "rounded" => Ok(Self::Value::Rounded),
                            "solid" => Ok(Self::Value::Solid),
                            "shadow" => Ok(Self::Value::Shadow),

                            _ => Err(E::invalid_value(
                                de::Unexpected::Str(s),
                                &"\"none\", \"single\", \"double\", \"rounded\", \
                                  \"solid\", \"shadow\" or an array with n elements \
                                  where n is a factor of 8",
                            )),
                        }
                    }
      metadata: {}
    - page_content: |-
        // If the returned value is a sequence we always return the
                    // `WindowBorderSide::Anal` variant since Neovim always returns all
                    // the 8 characters specifying the border, even if it was set from
                    // a variant with fewer chars.
                    fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
                    where
                        A: de::SeqAccess<'de>,
                    {
                        match seq.size_hint() {
                            Some(8) => {},

                            Some(other) => {
                                return Err(de::Error::invalid_length(
                                    other,
                                    &"border styles returned by Neovim always \
                                      contain 8 items",
                                ))
                            },
      metadata: {}
    - page_content: |-
        None => {
                                return Err(de::Error::custom(
                                    "couldn't determine array length",
                                ))
                            },
                        };

                        let a = seq.next_element::<WindowBorderChar>()?.unwrap();
                        let b = seq.next_element::<WindowBorderChar>()?.unwrap();
                        let c = seq.next_element::<WindowBorderChar>()?.unwrap();
                        let d = seq.next_element::<WindowBorderChar>()?.unwrap();
                        let e = seq.next_element::<WindowBorderChar>()?.unwrap();
                        let f = seq.next_element::<WindowBorderChar>()?.unwrap();
                        let g = seq.next_element::<WindowBorderChar>()?.unwrap();
                        let h = seq.next_element::<WindowBorderChar>()?.unwrap();

                        Ok(Self::Value::Anal(a, b, c, d, e, f, g, h))
                    }
                }

                deserializer.deserialize_any(WindowBorderVisitor)
            }
        }
      metadata: {}
    - page_content: |-
        #[cfg(test)]
        mod tests {
            use serde::Deserialize;
            use types::serde::Deserializer;

            use super::*;

            #[test]
            fn deserialize_none() {
                let side = "none".into();
                let res = WindowBorder::deserialize(Deserializer::new(side));
                assert!(res.is_ok(), "{res:?}");
                assert_eq!(WindowBorder::None, res.unwrap());
            }

            #[test]
            fn deserialize_single() {
                let side = "single".into();
                let res = WindowBorder::deserialize(Deserializer::new(side));
                assert!(res.is_ok(), "{res:?}");
                assert_eq!(WindowBorder::Single, res.unwrap());
            }

            #[test]
            fn deserialize_double() {
                let side = "double".into();
                let res = WindowBorder::deserialize(Deserializer::new(side));
                assert!(res.is_ok(), "{res:?}");
                assert_eq!(WindowBorder::Double, res.unwrap());
            }
      metadata: {}
    - page_content: |-
        #[test]
            fn deserialize_rounded() {
                let side = "rounded".into();
                let res = WindowBorder::deserialize(Deserializer::new(side));
                assert!(res.is_ok(), "{res:?}");
                assert_eq!(WindowBorder::Rounded, res.unwrap());
            }

            #[test]
            fn deserialize_solid() {
                let side = "solid".into();
                let res = WindowBorder::deserialize(Deserializer::new(side));
                assert!(res.is_ok(), "{res:?}");
                assert_eq!(WindowBorder::Solid, res.unwrap());
            }

            #[test]
            fn deserialize_shadow() {
                let side = "shadow".into();
                let res = WindowBorder::deserialize(Deserializer::new(side));
                assert!(res.is_ok(), "{res:?}");
                assert_eq!(WindowBorder::Shadow, res.unwrap());
            }
      metadata: {}
    - page_content: |-
        #[test]
            fn deserialize_anal() {
                let sides = Array::from_iter(["a"; 8]).into();
                let res = WindowBorder::deserialize(Deserializer::new(sides));
                assert!(res.is_ok(), "{res:?}");
                assert_eq!(
                    WindowBorder::from(('a', 'a', 'a', 'a', 'a', 'a', 'a', 'a')),
                    res.unwrap()
                );

                let sides =
                    Array::from_iter(["", "", "", ">", "", "", "", "<"]).into();
                let res = WindowBorder::deserialize(Deserializer::new(sides));
                assert!(res.is_ok(), "{res:?}");

                assert_eq!(
                    WindowBorder::from(
                        (None, None, None, '>', None, None, None, '<',)
                    ),
                    res.unwrap()
                );
            }
      metadata: {}
    - page_content: |-
        #[test]
            fn deserialize_anal_with_hl_groups() {
                let sides = Array::from_iter([
                    Object::from(Array::from_iter(["a", "Foo"])),
                    "b".into(),
                    Object::from(Array::from_iter(["", "Bar"])),
                    "c".into(),
                    Object::from(Array::from_iter(["d", "Baz"])),
                    "".into(),
                    Object::from(Array::from_iter(["", "FooBar"])),
                    "e".into(),
                ])
                .into();
                let res = WindowBorder::deserialize(Deserializer::new(sides));
                assert!(res.is_ok(), "{res:?}");
                assert_eq!(
                    WindowBorder::Anal(
                        WindowBorderChar::CharAndHlGroup(Some('a'), "Foo".into()),
                        WindowBorderChar::Char(Some('b')),
                        WindowBorderChar::CharAndHlGroup(None, "Bar".into()),
                        WindowBorderChar::Char(Some('c')),
                        WindowBorderChar::CharAndHlGroup(Some('d'), "Baz".into()),
                        WindowBorderChar::Char(None),
      metadata: {}
    - page_content: |-
        WindowBorderChar::Char(None),
                        WindowBorderChar::CharAndHlGroup(None, "FooBar".into()),
                        WindowBorderChar::Char(Some('e')),
                    ),
                    res.unwrap()
                );
            }
        }
      metadata: {}
  53:
    hash: 8039e873d470cf7cea71a328ba495b0e20cdbf13d1a817778de7aa5e0444e6f8
    path: ./types/option_infos.rs
    documents:
    - page_content: |-
        use serde::Deserialize;
        use types::{
            conversion::{self, FromObject},
            serde::Deserializer,
            Object,
        };

        /// Informations related to an option. Unlike in the Lua API, the `type` field
        /// is omitted because it's included in the definition of `default`.
        #[non_exhaustive]
        #[derive(Clone, Debug, PartialEq, Deserialize)]
        pub struct OptionInfos {
            /// TODO: docs
            pub allows_duplicates: bool,

            /// List of comma-separated values.
            pub commalist: bool,

            /// The default value for the option.
            pub default: Object,

            /// TODO: docs
            pub flaglist: bool,

            /// Whether a window or buffer option also has a global value.
            pub global_local: bool,

            /// Channel id where the option was set (`0` for local).
            pub last_set_chan: i64,

            /// The line number where the option was set.
            pub last_set_linenr: usize,

            /// Last set script id (if any).
            pub last_set_sid: i32,

            /// Name of the option (like `"filetype"`).
            pub name: String,
      metadata: {}
    - page_content: |-
        /// Scope of the option.
            pub scope: OptionScope,

            /// Shortened name of the  option (like `"ft"`).
            pub shortname: String,

            /// Whether the option was set.
            pub was_set: bool,
        }

        impl FromObject for OptionInfos {
            fn from_object(obj: Object) -> Result<Self, conversion::Error> {
                Self::deserialize(Deserializer::new(obj)).map_err(Into::into)
            }
        }

        #[non_exhaustive]
        #[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, Deserialize)]
        pub enum OptionScope {
            #[serde(rename = "buf")]
            Buffer,

            #[serde(rename = "global")]
            Global,

            #[serde(rename = "win")]
            Window,
        }

        impl OptionScope {
            #[inline]
            pub const fn is_buffer(&self) -> bool {
                matches!(self, OptionScope::Buffer)
            }

            #[inline]
            pub const fn is_global(&self) -> bool {
                matches!(self, OptionScope::Global)
            }

            #[inline]
            pub const fn is_window(&self) -> bool {
                matches!(self, OptionScope::Window)
            }
        }
      metadata: {}
  54:
    hash: 196a524969d89edf51b5297d470816b6ece64e02c0798d9bbd480ebed7945d22
    path: ./types/window_border_char.rs
    documents:
    - page_content: |-
        use std::fmt;

        use serde::{de, Deserialize};
        use types::{Array, Object};

        #[non_exhaustive]
        #[derive(Clone, Debug, Eq, PartialEq, Hash)]
        pub enum WindowBorderChar {
            Char(Option<char>),
            CharAndHlGroup(Option<char>, String),
        }

        impl From<char> for WindowBorderChar {
            fn from(ch: char) -> Self {
                Self::Char(Some(ch))
            }
        }

        impl From<Option<char>> for WindowBorderChar {
            fn from(maybe: Option<char>) -> Self {
                Self::Char(maybe)
            }
        }

        impl<S: AsRef<str>> From<(char, S)> for WindowBorderChar {
            fn from((ch, hl): (char, S)) -> Self {
                Self::CharAndHlGroup(Some(ch), hl.as_ref().to_owned())
            }
        }
      metadata: {}
    - page_content: |-
        impl From<WindowBorderChar> for Object {
            fn from(side: WindowBorderChar) -> Self {
                use WindowBorderChar::*;
                match side {
                    Char(None) => types::String::new().into(),
                    Char(Some(ch)) => ch.into(),
                    CharAndHlGroup(None, hl) => Array::from(("", hl)).into(),
                    CharAndHlGroup(Some(ch), hl) => Array::from((ch, hl)).into(),
                }
            }
        }

        impl<'de> Deserialize<'de> for WindowBorderChar {
            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
            where
                D: de::Deserializer<'de>,
            {
                struct WindowBorderCharVisitor;

                impl<'de> de::Visitor<'de> for WindowBorderCharVisitor {
                    type Value = WindowBorderChar;

                    fn expecting(&self, f: &mut fmt::Formatter) -> fmt::Result {
                        f.write_str("a string or an array of two strings")
                    }
      metadata: {}
    - page_content: |-
        fn visit_str<E>(self, str: &str) -> Result<Self::Value, E>
                    where
                        E: de::Error,
                    {
                        Ok(Self::Value::Char(str_to_char(str)))
                    }

                    fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
                    where
                        A: de::SeqAccess<'de>,
                    {
                        match seq.size_hint() {
                            Some(2) => {},

                            Some(other) => {
                                return Err(de::Error::invalid_length(
                                    other,
                                    &"border character in array form expected to \
                                      contain 2 elements representing character and \
                                      highlight group respectively",
                                ))
                            },
      metadata: {}
    - page_content: |-
        None => {
                                return Err(de::Error::custom(
                                    "couldn't determine array length",
                                ))
                            },
                        }

                        let ch = seq.next_element::<String>()?.unwrap();
                        let hl = seq.next_element::<String>()?.unwrap();

                        Ok(Self::Value::CharAndHlGroup(str_to_char(&ch), hl))
                    }
                }

                deserializer.deserialize_any(WindowBorderCharVisitor)
            }
        }

        // NOTE: `str` is assumed to be at most 4 bytes long.
      metadata: {}
    - page_content: |-
        fn str_to_char(str: &str) -> Option<char> {
            match str.len() {
                0 => None,
                1 => Some(str.as_bytes()[0] as char),
                // This handles multibyte characters.
                2..=4 => {
                    char::decode_utf16(str.encode_utf16()).next().and_then(Result::ok)
                },
                _ => unreachable!(),
            }
        }

        #[cfg(test)]
        mod tests {
            use types::serde::Deserializer;

            use super::*;

            #[test]
            fn to_char() {
                assert_eq!(None, str_to_char(""));
                assert_eq!(Some('a'), str_to_char("a"));
                assert_eq!(Some('£'), str_to_char("£")); // 2 bytes
                assert_eq!(Some('ʃ'), str_to_char("ʃ")); // 2 bytes
                assert_eq!(Some('ユ'), str_to_char("ユ")); // 3 bytes
                assert_eq!(Some('𒀀'), str_to_char("𒀀")); // 4 bytes
                assert_eq!(Some('😀'), str_to_char("😀")); // 4 bytes
            }
      metadata: {}
    - page_content: |-
        #[test]
            fn deserialize_char_side() {
                let side = "|".into();
                let res = WindowBorderChar::deserialize(Deserializer::new(side));
                assert!(res.is_ok(), "{res:?}");
                assert_eq!(WindowBorderChar::Char(Some('|')), res.unwrap());
            }

            #[test]
            fn deserialize_char_and_hl_group_side() {
                let side = Array::from_iter(["|", "Foo"]).into();
                let res = WindowBorderChar::deserialize(Deserializer::new(side));
                assert!(res.is_ok(), "{res:?}");
                assert_eq!(
                    WindowBorderChar::CharAndHlGroup(Some('|'), "Foo".into()),
                    res.unwrap()
                );
            }
        }
      metadata: {}
  55:
    hash: 6d4438dc093f005f05cb188b9cd1f77cae17b2470f17a66f6503e23bf59cccbd
    path: ./types/command_args.rs
    documents:
    - page_content: |-
        use serde::Deserialize;
        use types::{
            conversion::{self, FromObject},
            serde::Deserializer,
            Object,
        };

        use crate::serde_utils as utils;

        /// Arguments passed to functions executed by commands.
        ///
        /// See [`Buffer::create_user_command`](crate::Buffer::create_user_command) to
        /// create a buffer-local command or
        /// [`create_user_command`](crate::create_user_command) to create a global one.
        #[non_exhaustive]
        #[derive(Clone, Debug, Eq, PartialEq, Hash, Deserialize)]
        pub struct CommandArgs {
            /// The arguments passed to the command, if any.
            #[serde(deserialize_with = "utils::empty_string_is_none")]
            pub args: Option<String>,

            /// Whether the command was executed with a `!` modifier.
            pub bang: bool,

            /// The count supplied by `<count>`, if any.
            #[serde(deserialize_with = "utils::minus_one_is_none")]
            pub count: Option<u32>,

            /// The arguments passed to the command split by unescaped whitespace.
            pub fargs: Vec<String>,
      metadata: {}
    - page_content: |-
        /// The starting line of the command range.
            pub line1: usize,

            /// The final line of the command range.
            pub line2: usize,

            /// Command modifiers, if any.
            #[serde(deserialize_with = "utils::empty_string_is_none")]
            pub mods: Option<String>,

            /// The number of items in the command range.
            pub range: u8,

            /// The optional register, if specified.
            #[serde(rename = "reg", deserialize_with = "utils::empty_string_is_none")]
            pub register: Option<String>,

            /// Command modifiers in a more structured format.
            pub smods: super::CommandModifiers,
        }

        impl FromObject for CommandArgs {
            fn from_object(obj: Object) -> Result<Self, conversion::Error> {
                Self::deserialize(Deserializer::new(obj)).map_err(Into::into)
            }
        }

        impl luajit::Poppable for CommandArgs {
            unsafe fn pop(
                lstate: *mut luajit::ffi::State,
            ) -> Result<Self, luajit::Error> {
                let obj = Object::pop(lstate)?;
      metadata: {}
    - page_content: |-
        Self::from_object(obj)
                    .map_err(luajit::Error::pop_error_from_err::<Self, _>)
            }
        }
      metadata: {}
  56:
    hash: 195b9c35209295989773c9ab54f8c99e3a0fa68807fb8418c465b592c1b63eb6
    path: ./types/command_addr.rs
    documents:
    - page_content: |-
        use serde::{Deserialize, Serialize};
        use types::{
            conversion::{self, ToObject},
            serde::Serializer,
            Object,
        };

        /// See `:h command-addr` for details.
        #[non_exhaustive]
        #[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, Serialize, Deserialize)]
        #[serde(rename_all = "snake_case")]
        pub enum CommandAddr {
            Lines,
            Arguments,
            Buffers,
            LoadedBuffers,
            Windows,
            Tabs,
            Quickfix,
            Other,
        }

        impl CommandAddr {
            #[cfg(feature = "neovim-0-10")] // On 0.10 and Nightly.
            pub(crate) const fn as_str(&self) -> &'static str {
                match self {
                    Self::Lines => "lines",
                    Self::Arguments => "arguments",
                    Self::Buffers => "buffers",
                    Self::LoadedBuffers => "loaded_buffers",
                    Self::Windows => "windows",
                    Self::Tabs => "tabs",
                    Self::Quickfix => "quickfix",
                    Self::Other => "other",
                }
            }
        }
      metadata: {}
    - page_content: |-
        impl ToObject for CommandAddr {
            fn to_object(self) -> Result<Object, conversion::Error> {
                self.serialize(Serializer::new()).map_err(Into::into)
            }
        }
      metadata: {}
  57:
    hash: cde4946b8dbb91c1fcce2f919a8f3b61c607a0bafdfd0de8d1f251667f317151
    path: ./opts/buf_delete.rs
    documents:
    - page_content: |-
        /// Options passed to [`Buffer::delete()`](crate::Buffer::delete).
        #[derive(Clone, Debug, Default)]
        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        pub struct BufDeleteOpts {
            force: types::Object,
            unload: types::Object,
        }

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl BufDeleteOpts {
            #[inline(always)]
            pub fn builder() -> BufDeleteOptsBuilder {
                BufDeleteOptsBuilder::default()
            }
        }

        #[derive(Clone, Default)]
        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        pub struct BufDeleteOptsBuilder(BufDeleteOpts);

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl BufDeleteOptsBuilder {
            /// Force deletion ignoring unsaved changes.
            #[inline]
            pub fn force(&mut self, force: bool) -> &mut Self {
                self.0.force = force.into();
                self
            }
      metadata: {}
    - page_content: |-
        /// If `true` the buffer will only be unloaded, not deleted.
            #[inline]
            pub fn unload(&mut self, unload: bool) -> &mut Self {
                self.0.unload = unload.into();
                self
            }

            #[inline]
            pub fn build(&mut self) -> BufDeleteOpts {
                std::mem::take(&mut self.0)
            }
        }

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl From<&BufDeleteOpts> for types::Dictionary {
            fn from(opts: &BufDeleteOpts) -> Self {
                Self::from_iter([
                    ("force", opts.force.clone()),
                    ("unload", opts.unload.clone()),
                ])
            }
        }

        /// Options passed to [`Buffer::attach`](crate::Buffer::attach).
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        #[derive(Clone, Debug, Default, macros::OptsBuilder)]
        #[repr(C)]
        pub struct BufDeleteOpts {
            #[builder(mask)]
            mask: u64,

            /// Force deletion ignoring unsaved changes.
            #[builder(argtype = "bool")]
            force: types::Boolean,
      metadata: {}
    - page_content: |-
        /// If `true` the buffer will only be unloaded, not deleted.
            #[builder(argtype = "bool")]
            unload: types::Boolean,
        }
      metadata: {}
  58:
    hash: 7b89280ea37b71fe7fda6556df796ac8682cd6b3291d65894fef714330dffd9e
    path: ./opts/buf_attach.rs
    documents:
    - page_content: |-
        use crate::Buffer;
        use crate::ToFunction;

        /// Arguments passed to the callback registered to
        /// [`on_lines`](BufAttachOptsBuilder::on_lines).
        ///
        /// The `(a, b, c, d, e, f, g, h, i)` tuple represents:
        ///
        /// - `a`: the string literal `"lines"`;
        /// - `b`: the [`Buffer`] that triggered the callback;
        /// - `c`: the value of the buffer-local `b:changedtick` variable;
        /// - `d`: first row that changed (0-indexed);
        /// - `e`: last row that was changed;
        /// - `f`: last row in the updated range;
        /// - `g`: byte count of previous contents;
        /// - `h`: deleted UTF-32 codepoints (if
        ///   [`utf_sizes`](BufAttachOptsBuilder::utf_sizes) was `true`);
        /// - `i`: deleted UTF-16 codeunits (if
        ///   [`utf_sizes`](BufAttachOptsBuilder::utf_sizes) was `true`);
        pub type OnLinesArgs = (
            String,
            Buffer,
            u32,
            usize,
            usize,
            usize,
            usize,
            Option<usize>,
            Option<usize>,
        );
      metadata: {}
    - page_content: |-
        /// Arguments passed to the callback registered to [`on_bytes`](BufAttachOptsBuilder::on_bytes).
        ///
        /// The `(a, b, c, d, e, f, g, h, i, j, k, l)`
        /// - `a`: the string literal `"bytes"`;
        /// - `b`: the [`Buffer`] that triggered the callback;
        /// - `c`: the value of the buffer-local `b:changedtick` variable;
        /// - `d`: start row of the changed text (0-indexed);
        /// - `e`: start column of the changed text;
        /// - `f`: byte offset of the changed text (from the start of the buffer);
        /// - `g`: old end row of the changed text (offset from start row);
        /// - `h`: old end column of the changed text (if old end row = 0, offset from start column);
        /// - `i`: old end byte length of the changed text;
        /// - `j`: new end row of the changed text (offset from start row);
        /// - `k`: new end column of the changed text (if new end row = 0, offset from start column);
        /// - `l`: new end byte length of the changed text;
        pub type OnBytesArgs = (
            String,
            Buffer,
            u32,
            usize,
            usize,
      metadata: {}
    - page_content: |-
        Buffer,
            u32,
            usize,
            usize,
            usize,
            usize,
            usize,
            usize,
            usize,
            usize,
            usize,
        );
      metadata: {}
    - page_content: |-
        /// Arguments passed to the callback registered to
        /// [`on_changedtick`](BufAttachOptsBuilder::on_changedtick).
        ///
        /// The first tuple element is the string literal `"changedtick"`, the second
        /// is the [`Buffer`] that triggered the callback and the third is current
        /// value of the buffer-local
        /// [`b:changedtick`](https://neovim.io/doc/user/eval.html#b:changedtick)
        /// variable.
        pub type OnChangedtickArgs = (String, Buffer, u32);

        /// Arguments passed to the callback registered to
        /// [`on_detach`](BufAttachOptsBuilder::on_detach).
        ///
        /// The first tuple element is the string literal `"detach"`, the second is the
        /// [`Buffer`] that triggered the callback.
        pub type OnDetachArgs = (String, Buffer);

        /// Arguments passed to the callback registered to
        /// [`on_reload`](BufAttachOptsBuilder::on_reload).
        ///
        /// The first tuple element is the string literal `"reload"`, the second is the
        /// [`Buffer`] that triggered the callback.
        pub type OnReloadArgs = (String, Buffer);
      metadata: {}
    - page_content: |-
        /// All the registered callbacks can detach by returning `true`, as described
        /// in `:h api-lua-detach`.
        pub type ShouldDetach = bool;

        /// Options passed to [`Buffer::attach`](crate::Buffer::attach).
        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        #[derive(Clone, Debug, Default)]
        pub struct BufAttachOpts {
            on_bytes: types::Object,
            on_changedtick: types::Object,
            on_detach: types::Object,
            on_lines: types::Object,
            on_reload: types::Object,
            preview: types::Object,
            utf_sizes: types::Object,
        }

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl BufAttachOpts {
            #[inline(always)]
            /// Creates a new [`BufAttachOptsBuilder`].
            pub fn builder() -> BufAttachOptsBuilder {
                BufAttachOptsBuilder::default()
            }
        }

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        #[derive(Clone, Default)]
        pub struct BufAttachOptsBuilder(BufAttachOpts);
      metadata: {}
    - page_content: |-
        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl BufAttachOptsBuilder {
            /// Callback invoked on change. It receives more granular information about
            /// the change compared to [`on_lines`](BufAttachOptsBuilder::on_lines).
            #[inline]
            pub fn on_bytes<F>(&mut self, on_bytes: F) -> &mut Self
            where
                F: ToFunction<OnBytesArgs, ShouldDetach>,
            {
                self.0.on_bytes = types::Object::from_luaref(on_bytes.into_luaref());
                self
            }

            /// Callback invoked on changedtick increment without text change.
            #[inline]
            pub fn on_changedtick<F>(&mut self, on_changedtick: F) -> &mut Self
            where
                F: ToFunction<OnChangedtickArgs, ShouldDetach>,
            {
                self.0.on_changedtick =
                    types::Object::from_luaref(on_changedtick.into_luaref());
                self
            }
      metadata: {}
    - page_content: |-
        /// Callback invoked on detach.
            #[inline]
            pub fn on_detach<F>(&mut self, on_detach: F) -> &mut Self
            where
                F: ToFunction<OnDetachArgs, ShouldDetach>,
            {
                self.0.on_detach = types::Object::from_luaref(on_detach.into_luaref());
                self
            }

            /// Callback invoked on change.
            #[inline]
            pub fn on_lines<F>(&mut self, fun: F) -> &mut Self
            where
                F: ToFunction<OnLinesArgs, ShouldDetach>,
            {
                self.0.on_lines = types::Object::from_luaref(fun.into_luaref());
                self
            }

            /// Callback invoked on reload. The entire buffer content should be
            /// considered changed.
            #[inline]
            pub fn on_reload<F>(&mut self, on_reload: F) -> &mut Self
            where
                F: ToFunction<OnReloadArgs, ShouldDetach>,
            {
                self.0.on_reload = types::Object::from_luaref(on_reload.into_luaref());
                self
            }
      metadata: {}
    - page_content: |-
        /// Whether to also attach to command preview (i.e.
            /// [`inccommand`](https://neovim.io/doc/user/options.html#'inccommand'))
            /// events.
            #[inline]
            pub fn preview(&mut self, preview: bool) -> &mut Self {
                self.0.preview = preview.into();
                self
            }

            /// Whether to include the UTF-32 and UTF-16 sizes of the replaced region
            /// as the last arguments of the
            /// [`on_lines`](BufAttachOptsBuilder::on_lines) callback.
            #[inline]
            pub fn utf_sizes(&mut self, utf_sizes: bool) -> &mut Self {
                self.0.utf_sizes = utf_sizes.into();
                self
            }

            #[inline]
            pub fn build(&mut self) -> BufAttachOpts {
                std::mem::take(&mut self.0)
            }
        }
      metadata: {}
    - page_content: |-
        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl From<&BufAttachOpts> for types::Dictionary {
            #[inline]
            fn from(opts: &BufAttachOpts) -> Self {
                Self::from_iter([
                    ("on_bytes", opts.on_bytes.clone()),
                    ("on_changedtick", opts.on_changedtick.clone()),
                    ("on_detach", opts.on_detach.clone()),
                    ("on_lines", opts.on_lines.clone()),
                    ("on_reload", opts.on_reload.clone()),
                    ("preview", opts.preview.clone()),
                    ("utf_sizes", opts.utf_sizes.clone()),
                ])
            }
        }

        /// Options passed to [`Buffer::attach`](crate::Buffer::attach).
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        #[derive(Clone, Debug, Default, macros::OptsBuilder)]
        #[repr(C)]
        pub struct BufAttachOpts {
            #[builder(mask)]
            mask: u64,
      metadata: {}
    - page_content: |-
        /// Callback invoked on change.
            #[builder(
                generics = "F: ToFunction<OnLinesArgs, ShouldDetach>",
                argtype = "F",
                inline = "{0}.into_luaref()"
            )]
            on_lines: types::LuaRef,

            /// Callback invoked on change. It receives more granular information about
            /// the change compared to [`on_lines`](BufAttachOptsBuilder::on_lines).
            #[builder(
                generics = "F: ToFunction<OnBytesArgs, ShouldDetach>",
                argtype = "F",
                inline = "{0}.into_luaref()"
            )]
            on_bytes: types::LuaRef,

            /// Callback invoked on changedtick increment without text change.
            #[builder(
                generics = "F: ToFunction<OnChangedtickArgs, ShouldDetach>",
                argtype = "F",
                inline = "{0}.into_luaref()"
            )]
            on_changedtick: types::LuaRef,
      metadata: {}
    - page_content: |-
        /// Callback invoked on detach.
            #[builder(
                generics = "F: ToFunction<OnDetachArgs, ShouldDetach>",
                argtype = "F",
                inline = "{0}.into_luaref()"
            )]
            on_detach: types::LuaRef,

            /// Callback invoked on reload. The entire buffer content should be
            /// considered changed.
            #[builder(
                generics = "F: ToFunction<OnReloadArgs, ShouldDetach>",
                argtype = "F",
                inline = "{0}.into_luaref()"
            )]
            on_reload: types::LuaRef,

            /// Whether to include the UTF-32 and UTF-16 sizes of the replaced region
            /// as the last arguments of the
            /// [`on_lines`](BufAttachOptsBuilder::on_lines) callback.
            #[builder(argtype = "bool")]
            utf_sizes: types::Boolean,

            /// Whether to also attach to command preview (i.e.
            /// [`inccommand`](https://neovim.io/doc/user/options.html#'inccommand'))
            /// events.
            #[builder(argtype = "bool")]
            preview: types::Boolean,
        }
      metadata: {}
  59:
    hash: 86805fcbb1d463ceee39754403c03a4dc3e5b4afabd946bac23e3d5afdd38332
    path: ./opts/decoration_provider.rs
    documents:
    - page_content: |-
        use types::Object;

        use crate::ToFunction;
        use crate::{Buffer, Window};

        // NOTE: docs say a third argument of changedtick is passed. I don't see it.
        /// Arguments passed to the function registered to
        /// [`on_buf`](DecorationProviderOptsBuilder::on_buf).
        pub type OnBufArgs = (
            String, // the string literal "buf"
            Buffer, // buffer
        );

        /// Arguments passed to the function registered to
        /// [`on_end`](DecorationProviderOptsBuilder::on_end).
        pub type OnEndArgs = (
            String, // the string literal "end"
            u32,    // changedtick
        );

        /// Arguments passed to the function registered to
        /// [`on_line`](DecorationProviderOptsBuilder::on_line).
        pub type OnLineArgs = (
            String, // the string literal "win"
            Window, // window
            Buffer, // buffer
            usize,  // row
        );
      metadata: {}
    - page_content: |-
        /// Arguments passed to the function registered to
        /// [`on_start`](DecorationProviderOptsBuilder::on_start).
        pub type OnStartArgs = (
            String, // the string literal "start"
            u32,    // changedtick
            u32, /* `type`, undocumented? (https://github.com/neovim/neovim/blob/master/src/nvim/decoration_provider.c#L68) */
        );

        /// Arguments passed to the function registered to
        /// [`on_win`](DecorationProviderOptsBuilder::on_win).
        pub type OnWinArgs = (
            String, // the string literal "win"
            Window, // window
            Buffer, // buffer
            u32,    // topline
            u32,    // botline guess
        );

        /// The `on_start` callback can return `false` to disable the provider until
        /// the next redraw.
        pub type DontSkipRedrawCycle = bool;

        /// The `on_win` callback can return `false` to skip the `on_line` callback for
        /// that window.
        pub type DontSkipOnLines = bool;
      metadata: {}
    - page_content: |-
        /// Options passed to
        /// [`set_decoration_provider()`](crate::set_decoration_provider).
        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        #[derive(Clone, Debug, Default)]
        #[repr(C)]
        pub struct DecorationProviderOpts {
            on_buf: Object,
            on_end: Object,
            on_win: Object,
            on_line: Object,
            on_start: Object,
            _on_hl_def: Object,
            _on_spell_nav: Object,
        }

        /// Options passed to
        /// [`set_decoration_provider()`](crate::set_decoration_provider).
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        #[derive(Clone, Debug, Default)]
        #[repr(C)]
        pub struct DecorationProviderOpts {
            on_start: Object,
            on_buf: Object,
            on_win: Object,
            on_line: Object,
            on_end: Object,
            _on_hl_def: Object,
            _on_spell_nav: Object,
        }

        impl DecorationProviderOpts {
            #[inline(always)]
            /// Creates a new [`DecorationProviderOptsBuilder`].
            pub fn builder() -> DecorationProviderOptsBuilder {
                DecorationProviderOptsBuilder::default()
            }
        }
      metadata: {}
    - page_content: |-
        #[derive(Clone, Default)]
        pub struct DecorationProviderOptsBuilder(DecorationProviderOpts);

        impl DecorationProviderOptsBuilder {
            #[inline]
            pub fn on_buf<F>(&mut self, fun: F) -> &mut Self
            where
                F: ToFunction<OnBufArgs, ()>,
            {
                self.0.on_buf = Object::from_luaref(fun.into_luaref());
                self
            }

            #[inline]
            pub fn on_end<F>(&mut self, fun: F) -> &mut Self
            where
                F: ToFunction<OnEndArgs, ()>,
            {
                self.0.on_end = Object::from_luaref(fun.into_luaref());
                self
            }

            #[inline]
            pub fn on_line<F>(&mut self, fun: F) -> &mut Self
            where
                F: ToFunction<OnLineArgs, ()>,
            {
                self.0.on_line = Object::from_luaref(fun.into_luaref());
                self
            }

            #[inline]
            pub fn on_start<F>(&mut self, fun: F) -> &mut Self
            where
                F: ToFunction<OnStartArgs, DontSkipRedrawCycle>,
            {
                self.0.on_start = Object::from_luaref(fun.into_luaref());
                self
            }
      metadata: {}
    - page_content: |-
        #[inline]
            pub fn on_win<F>(&mut self, fun: F) -> &mut Self
            where
                F: ToFunction<OnWinArgs, DontSkipOnLines>,
            {
                self.0.on_win = Object::from_luaref(fun.into_luaref());
                self
            }

            #[inline]
            pub fn build(&mut self) -> DecorationProviderOpts {
                std::mem::take(&mut self.0)
            }
        }
      metadata: {}
  60:
    hash: aa9277003a14c979114200194fc1927bd81c70db958d86d5ca526750cb0f86fc
    path: ./opts/get_text.rs
    documents:
    - page_content: |-
        /// Options passed to [`Buffer::get_text()`](crate::Buffer::get_text).
        /// Currently unused.
        #[derive(Clone, Debug, Default, macros::OptsBuilder)]
        #[repr(C)]
        pub struct GetTextOpts {
            #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
            #[builder(mask)]
            mask: u64,
        }

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl From<&GetTextOpts> for types::Dictionary {
            #[inline]
            fn from(_: &GetTextOpts) -> Self {
                Self::new()
            }
        }
      metadata: {}
  61:
    hash: 619b240f743902c208156a29fd66c6d264a1abe57b55bc0a5aa6d9bdad53d4d5
    path: ./opts/mod.rs
    documents:
    - page_content: |-
        //! Contains the `*Opts` structs representing the optional arguments
        //! passsed to Neovim API functions.

        mod buf_attach;
        mod buf_delete;
        mod clear_autocmds;
        mod cmd;
        mod create_augroup;
        mod create_autocmd;
        mod create_command;
        mod decoration_provider;
        mod echo;
        mod eval_statusline;
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        mod exec;
        mod exec_autocmds;
        mod get_autocmds;
        mod get_commands;
        mod get_context;
        mod get_extmark_by_id;
        mod get_extmarks;
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        mod get_highlight;
        mod get_mark;
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        mod get_namespace;
        mod get_text;
        mod open_term;
        mod option;
        mod parse_cmd;
        mod select_popup_menu_item;
        mod set_extmark;
        mod set_highlight;
        mod set_keymap;
        mod set_mark;
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        mod win_text_height;
      metadata: {}
    - page_content: |-
        pub use buf_attach::*;
        pub use buf_delete::*;
        pub use clear_autocmds::*;
        pub use cmd::*;
        pub use create_augroup::*;
        pub use create_autocmd::*;
        pub use create_command::*;
        pub use decoration_provider::*;
        pub use echo::*;
        pub use eval_statusline::*;
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        pub use exec::*;
        pub use exec_autocmds::*;
        pub use get_autocmds::*;
        pub use get_commands::*;
        pub use get_context::*;
        pub use get_extmark_by_id::*;
        pub use get_extmarks::*;
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        pub use get_highlight::*;
        pub use get_mark::*;
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        pub use get_namespace::*;
        pub use get_text::*;
        pub use open_term::*;
        pub use option::*;
        pub use parse_cmd::*;
        pub use select_popup_menu_item::*;
        pub use set_extmark::*;
        pub use set_highlight::*;
        pub use set_keymap::*;
        pub use set_mark::*;
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        pub use win_text_height::*;
      metadata: {}
  62:
    hash: 5db577ab53c74c70f23d05663bf54e5a054e056f9e211fd8c31a090db9dc3fd4
    path: ./opts/option.rs
    documents:
    - page_content: |-
        use serde::Serialize;
        use types::conversion::FromObject;

        use crate::{Buffer, Window};

        /// Options passed to
        /// [`set_option_value()`](crate::set_option_value).
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        #[derive(Clone, Debug, Default, macros::OptsBuilder)]
        #[repr(C)]
        pub struct OptionOpts {
            #[builder(mask)]
            mask: u64,

            #[builder(argtype = "OptionScope", inline = "{0}.into()")]
            scope: types::String,

            #[builder(argtype = "Window", inline = "{0}.0")]
            win: types::WinHandle,

            #[builder(method = "buffer", argtype = "Buffer", inline = "{0}.0")]
            buf: types::BufHandle,

            #[builder(
                generics = "F: Into<types::String>",
                argtype = "F",
                inline = "{0}.into()"
            )]
            filetype: types::String,
        }
      metadata: {}
    - page_content: |-
        /// Options passed to
        /// [`set_option_value()`](crate::set_option_value).
        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        #[derive(Clone, Debug, Default)]
        #[repr(C)]
        pub struct OptionOpts {
            buf: types::Object,
            win: types::Object,
            scope: types::Object,
            filetype: types::Object,
        }

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl OptionOpts {
            #[inline(always)]
            pub fn builder() -> OptionOptsBuilder {
                OptionOptsBuilder::default()
            }
        }

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        #[derive(Clone, Default)]
        pub struct OptionOptsBuilder(OptionOpts);

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl OptionOptsBuilder {
            #[inline]
            pub fn buffer(&mut self, buffer: Buffer) -> &mut Self {
                self.0.buf = buffer.into();
                self
            }
      metadata: {}
    - page_content: |-
        #[inline]
            pub fn filetype(&mut self, filetype: &str) -> &mut Self {
                let filetype = types::String::from(filetype);
                self.0.filetype = filetype.into();
                self
            }

            #[inline]
            pub fn scope(&mut self, scope: OptionScope) -> &mut Self {
                let scope = types::String::from(scope);
                self.0.scope = scope.into();
                self
            }

            #[inline]
            pub fn window(&mut self, window: Window) -> &mut Self {
                self.0.win = window.into();
                self
            }

            #[inline]
            pub fn build(&mut self) -> OptionOpts {
                std::mem::take(&mut self.0)
            }
        }

        #[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, Serialize)]
        #[serde(rename_all = "lowercase")]
        pub enum OptionScope {
            Global,
            Local,
        }
      metadata: {}
    - page_content: |-
        impl From<OptionScope> for types::String {
            #[inline]
            fn from(ctx: OptionScope) -> Self {
                types::String::from_object(
                    ctx.serialize(types::serde::Serializer::new())
                        .expect("`OptionScope` is serializable"),
                )
                .expect("`OptionScope` is serialized into a string")
            }
        }
      metadata: {}
  63:
    hash: 3269e5a7dc32bb68020da9a887adf3cb61596545d0d816ef9d9ff722a50fa7f7
    path: ./opts/get_namespace.rs
    documents:
    - page_content: |-
        use crate::Window;

        /// Option passed to [`get_hl_ns()`][crate::get_hl_ns].
        #[derive(Clone, Debug, Default, macros::OptsBuilder)]
        #[repr(C)]
        pub struct GetNamespaceOpts {
            #[builder(mask)]
            mask: u64,

            /// Used to retrieve a window's highlight namespace. A value of `-1` is
            /// returned by [`get_hl_ns()`][crate::get_hl_ns] when
            /// `nvim_win_set_hl_ns()` has not been called for the window (or was
            /// called with a namespace of `-1`).
            #[builder(argtype = "Window", inline = "{0}.0")]
            winid: types::WinHandle,
        }
      metadata: {}
  64:
    hash: efa5a49df824148f4ff5633a3993eee80b8a1bc9a7455a002a1462b53a86cef2
    path: ./opts/set_highlight.rs
    documents:
    - page_content: |-
        use types::Object;
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        use types::{Boolean, Integer, String as NvimString};

        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        #[derive(Clone, Debug, Default, PartialEq, macros::OptsBuilder)]
        #[repr(C)]
        pub struct SetHighlightOpts {
            #[builder(mask)]
            mask: u64,

            #[builder(argtype = "bool")]
            bold: Boolean,

            #[builder(argtype = "bool")]
            standout: Boolean,

            #[builder(argtype = "bool")]
            strikethrough: Boolean,

            #[builder(argtype = "bool")]
            underline: Boolean,

            #[builder(argtype = "bool")]
            undercurl: Boolean,

            #[builder(argtype = "bool")]
            underdouble: Boolean,

            #[builder(argtype = "bool")]
            underdotted: Boolean,

            #[builder(argtype = "bool")]
            underdashed: Boolean,

            #[builder(argtype = "bool")]
            italic: Boolean,

            #[builder(argtype = "bool")]
            reverse: Boolean,

            #[builder(argtype = "bool")]
            altfont: Boolean,
      metadata: {}
    - page_content: |-
        #[builder(argtype = "bool")]
            nocombine: Boolean,

            #[builder(method = "builder", argtype = "bool")]
            // The field name is actually `default_`, but I think it somehow gets
            // converted to `default` at build time because the correct mask index
            // is obtained with `default`.
            default: Boolean,

            #[builder(argtype = "&str", inline = "types::String::from({0}).into()")]
            cterm: Object,

            #[builder(argtype = "&str", inline = "types::String::from({0}).into()")]
            foreground: Object,

            #[builder(skip)]
            fg: Object,

            #[builder(argtype = "&str", inline = "types::String::from({0}).into()")]
            background: Object,

            #[builder(skip)]
            bg: Object,

            #[builder(argtype = "&str", inline = "types::String::from({0}).into()")]
            ctermfg: Object,

            #[builder(argtype = "&str", inline = "types::String::from({0}).into()")]
            ctermbg: Object,

            #[builder(argtype = "&str", inline = "types::String::from({0}).into()")]
            special: Object,
      metadata: {}
    - page_content: |-
        #[builder(skip)]
            sp: Object,

            #[cfg(all(feature = "neovim-0-10", not(feature = "neovim-nightly")))] // Only on 0.10.
            #[builder(
                generics = "Hl: crate::HlGroup",
                argtype = "Hl",
                inline = r#"{ let Ok(hl_id) = {0}.to_hl_id() else { return self; }; hl_id.into() }"#
            )]
            link: Object,

            #[cfg(feature = "neovim-nightly")] // Only on Nightly.
            #[builder(
                generics = "Hl: crate::HlGroup",
                argtype = "Hl",
                inline = r#"{ let Ok(hl_id) = {0}.to_hl_id() else { return self; }; hl_id }"#
            )]
            link: types::HlGroupId,

            #[cfg(all(feature = "neovim-0-10", not(feature = "neovim-nightly")))] // Only on 0.10.
            #[builder(skip)]
            global_link: Object,

            #[cfg(feature = "neovim-nightly")] // Only on Nightly.
            #[builder(skip)]
            global_link: types::HlGroupId,

            #[builder(argtype = "bool")]
            fallback: Boolean,

            #[builder(argtype = "u8", inline = "{0} as Integer")]
            blend: Integer,
      metadata: {}
    - page_content: |-
        #[builder(argtype = "bool")]
            fg_indexed: Boolean,

            #[builder(argtype = "bool")]
            bg_indexed: Boolean,

            #[builder(argtype = "bool")]
            force: Boolean,

            #[builder(skip)]
            url: NvimString,
        }
      metadata: {}
    - page_content: |-
        #[builder(skip)]
            url: NvimString,
        }

        /// Options passed to [`set_hl()`](crate::set_hl).
        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        #[derive(Clone, Debug, Default, PartialEq)]
        #[repr(C)]
        pub struct SetHighlightOpts {
            bg: Object,
            fg: Object,
            sp: Object,
            bold: Object,
            link: Object,
            blend: Object,
            cterm: Object,
            italic: Object,
            special: Object,
            ctermbg: Object,
            ctermfg: Object,
            default: Object,
            altfont: Object,
            reverse: Object,
            fallback: Object,
            standout: Object,
            nocombine: Object,
            undercurl: Object,
            underline: Object,
            background: Object,
            bg_indexed: Object,
            foreground: Object,
            fg_indexed: Object,
            global_link: Object,
            underdashed: Object,
            underdotted: Object,
            underdouble: Object,
            strikethrough: Object,
        }
      metadata: {}
    - page_content: |-
        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl SetHighlightOpts {
            /// Creates a new [`SetHighlightOptsBuilder`].
            #[inline]
            pub fn builder() -> SetHighlightOptsBuilder {
                <SetHighlightOptsBuilder as Default>::default()
            }
        }

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        #[derive(Clone, Default)]
        pub struct SetHighlightOptsBuilder(SetHighlightOpts);

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl SetHighlightOptsBuilder {
            #[inline]
            pub fn background(&mut self, background: &str) -> &mut Self {
                self.0.background = types::String::from(background).into();
                self
            }

            #[inline]
            pub fn blend(&mut self, blend: u8) -> &mut Self {
                self.0.blend = blend.into();
                self
            }

            #[inline]
            pub fn bold(&mut self, bold: bool) -> &mut Self {
                self.0.bold = bold.into();
                self
            }
      metadata: {}
    - page_content: |-
        #[inline]
            pub fn cterm(&mut self, cterm: &str) -> &mut Self {
                self.0.cterm = types::String::from(cterm).into();
                self
            }

            #[inline]
            pub fn ctermbg(&mut self, ctermbg: &str) -> &mut Self {
                self.0.ctermbg = types::String::from(ctermbg).into();
                self
            }

            #[inline]
            pub fn ctermfg(&mut self, ctermfg: &str) -> &mut Self {
                self.0.ctermfg = types::String::from(ctermfg).into();
                self
            }

            #[inline]
            pub fn default(&mut self, default: bool) -> &mut Self {
                self.0.default = default.into();
                self
            }

            #[inline]
            pub fn fallback(&mut self, fallback: bool) -> &mut Self {
                self.0.fallback = fallback.into();
                self
            }

            #[inline]
            pub fn foreground(&mut self, foreground: &str) -> &mut Self {
                self.0.foreground = types::String::from(foreground).into();
                self
            }
      metadata: {}
    - page_content: |-
        #[inline]
            pub fn global_link(&mut self, global_link: &str) -> &mut Self {
                self.0.global_link = types::String::from(global_link).into();
                self
            }

            #[inline]
            pub fn italic(&mut self, italic: bool) -> &mut Self {
                self.0.italic = italic.into();
                self
            }

            #[inline]
            pub fn link(&mut self, link: &str) -> &mut Self {
                self.0.link = types::String::from(link).into();
                self
            }

            #[inline]
            pub fn nocombine(&mut self, nocombine: bool) -> &mut Self {
                self.0.nocombine = nocombine.into();
                self
            }

            #[inline]
            pub fn reverse(&mut self, reverse: bool) -> &mut Self {
                self.0.reverse = reverse.into();
                self
            }

            #[inline]
            pub fn special(&mut self, special: &str) -> &mut Self {
                self.0.special = types::String::from(special).into();
                self
            }
      metadata: {}
    - page_content: |-
        #[inline]
            pub fn standout(&mut self, standout: bool) -> &mut Self {
                self.0.standout = standout.into();
                self
            }

            #[inline]
            pub fn strikethrough(&mut self, strikethrough: bool) -> &mut Self {
                self.0.strikethrough = strikethrough.into();
                self
            }

            #[inline]
            pub fn undercurl(&mut self, undercurl: bool) -> &mut Self {
                self.0.undercurl = undercurl.into();
                self
            }

            #[inline]
            pub fn underdashed(&mut self, underdashed: bool) -> &mut Self {
                self.0.underdashed = underdashed.into();
                self
            }

            #[inline]
            pub fn underdotted(&mut self, underdotted: bool) -> &mut Self {
                self.0.underdotted = underdotted.into();
                self
            }

            #[inline]
            pub fn underdouble(&mut self, underdouble: bool) -> &mut Self {
                self.0.underdouble = underdouble.into();
                self
            }
      metadata: {}
    - page_content: |-
        #[inline]
            pub fn underline(&mut self, underline: bool) -> &mut Self {
                self.0.underline = underline.into();
                self
            }

            #[inline]
            pub fn altfont(&mut self, altfont: bool) -> &mut Self {
                self.0.altfont = altfont.into();
                self
            }

            #[inline]
            pub fn bg_indexed(&mut self, bg_indexed: bool) -> &mut Self {
                self.0.bg_indexed = bg_indexed.into();
                self
            }

            #[inline]
            pub fn fg_indexed(&mut self, fg_indexed: bool) -> &mut Self {
                self.0.fg_indexed = fg_indexed.into();
                self
            }

            #[inline]
            pub fn build(&mut self) -> SetHighlightOpts {
                std::mem::take(&mut self.0)
            }
        }
      metadata: {}
  65:
    hash: d51b98f94a79f3c571be1215bb031268d520980980c1a9a603064bbbf88e48b0
    path: ./opts/exec_autocmds.rs
    documents:
    - page_content: |-
        use crate::Buffer;
        use crate::{StringOrInt, StringOrListOfStrings};

        /// Options passed to [`exec_autocmds()`](crate::exec_autocmds).
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        #[derive(Clone, Debug, Default, macros::OptsBuilder)]
        #[repr(C)]
        pub struct ExecAutocmdsOpts {
            #[builder(mask)]
            mask: u64,

            /// A specific [`Buffer`] for buffer-local autocommands. Cannot be used
            /// together with [`patterns`](ExecAutocmdsOptsBuilder::patterns).
            #[builder(argtype = "Buffer", inline = "{0}.0")]
            buffer: types::BufHandle,

            /// The autocommand group name or id to match against.
            #[builder(
                generics = "G: StringOrInt",
                argtype = "G",
                inline = "{0}.to_object()"
            )]
            group: types::Object,

            /// Whether to process the modeline after the autocommands.
            #[builder(argtype = "bool")]
            modeline: types::Boolean,
      metadata: {}
    - page_content: |-
        /// Patterns to match against. Cannot be used together with
            /// [`buffer`](ExecAutocmdsOptsBuilder::buffer).
            #[builder(
                generics = "P: StringOrListOfStrings",
                method = "patterns",
                argtype = "P",
                inline = "{0}.to_object()"
            )]
            pattern: types::Object,

            #[builder(
                generics = "D: Into<types::Object>",
                argtype = "D",
                inline = "{0}.into()"
            )]
            data: types::Object,
        }

        /// Options passed to [`exec_autocmds()`](crate::exec_autocmds).
        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        #[derive(Clone, Debug, Default)]
        #[repr(C)]
        pub struct ExecAutocmdsOpts {
            data: types::Object,
            group: types::Object,
            buffer: types::Object,
            patterns: types::Object,
            modeline: types::Object,
        }

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl ExecAutocmdsOpts {
            #[inline(always)]
            pub fn builder() -> ExecAutocmdsOptsBuilder {
                ExecAutocmdsOptsBuilder::default()
            }
        }
      metadata: {}
    - page_content: |-
        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        #[derive(Clone, Default)]
        pub struct ExecAutocmdsOptsBuilder(ExecAutocmdsOpts);

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl ExecAutocmdsOptsBuilder {
            /// A specific [`Buffer`] for buffer-local autocommands. Cannot be used
            /// together with [`patterns`](ExecAutocmdsOptsBuilder::patterns).
            #[inline]
            pub fn buffer(&mut self, buffer: Buffer) -> &mut Self {
                self.0.buffer = buffer.into();
                self
            }

            #[inline]
            pub fn data(&mut self, any: impl Into<types::Object>) -> &mut Self {
                self.0.data = any.into();
                self
            }

            /// The autocommand group name or id to match against.
            #[inline]
            pub fn group<Grp>(&mut self, group: Grp) -> &mut Self
            where
                Grp: StringOrInt,
            {
                self.0.group = group.to_object();
                self
            }
      metadata: {}
    - page_content: |-
        /// Whether to process the modeline after the autocommands.
            #[inline]
            pub fn modeline(&mut self, modeline: bool) -> &mut Self {
                self.0.modeline = modeline.into();
                self
            }

            /// Patterns to match against. Cannot be used together with
            /// [`buffer`](ExecAutocmdsOptsBuilder::buffer).
            #[inline]
            pub fn patterns<Patterns>(&mut self, patterns: Patterns) -> &mut Self
            where
                Patterns: StringOrListOfStrings,
            {
                self.0.patterns = patterns.to_object();
                self
            }

            #[inline]
            pub fn build(&mut self) -> ExecAutocmdsOpts {
                std::mem::take(&mut self.0)
            }
        }
      metadata: {}
  66:
    hash: a5365a3b5e98e91e0e725af9e9dc6d22b03bde48536f02c1306b91afc3becb4c
    path: ./opts/win_text_height.rs
    documents:
    - page_content: |-
        /// Option passed to [`Window::text_height()`][crate::Window::text_height].
        #[derive(Clone, Debug, Default, macros::OptsBuilder)]
        #[repr(C)]
        pub struct WinTextHeightOpts {
            #[builder(mask)]
            mask: u64,

            /// Starting line index, 0-based inclusive. When omitted start at the very
            /// top.
            #[builder(argtype = "usize", inline = "{0} as types::Integer")]
            start_row: types::Integer,

            /// Ending line index, 0-based inclusive. When omitted end at the very
            /// bottom.
            #[builder(argtype = "usize", inline = "{0} as types::Integer")]
            end_row: types::Integer,

            /// Starting virtual column index on `start_row`, 0-based inclusive,
            /// rounded down to full screen lines. When omitted include the whole line.
            #[builder(argtype = "usize", inline = "{0} as types::Integer")]
            start_vcol: types::Integer,
      metadata: {}
    - page_content: |-
        /// Ending virtual column index on `end_row`, 0-based exclusive, rounded up
            /// to full screen lines. When omitted include the whole line.
            #[builder(argtype = "usize", inline = "{0} as types::Integer")]
            end_vcol: types::Integer,
        }
      metadata: {}
  67:
    hash: 2756f5e661accd839b5000d722e7719fe03098445882acbd774cc21108030322
    path: ./opts/get_highlight.rs
    documents:
    - page_content: |-
        use types::{String as NvimString, *};

        /// Option passed to [`get_hl()`][crate::get_hl].
        #[derive(Clone, Debug, Default, macros::OptsBuilder)]
        #[repr(C)]
        pub struct GetHighlightOpts {
            #[builder(mask)]
            mask: u64,

            /// Get a highlight definition by id.
            #[builder(argtype = "u32", inline = "{0} as Integer")]
            id: Integer,

            /// Get a highlight definition by name.
            #[builder(
                generics = "S: Into<types::String>",
                argtype = "S",
                inline = "{0}.into()"
            )]
            name: NvimString,

            /// Show linked group name instead of effective definition (default is
            /// `true`).
            #[builder(argtype = "bool")]
            link: Boolean,

            /// When highlight group doesn't exist create it (default is
            /// `true`).
            #[builder(argtype = "bool")]
            create: Boolean,
        }
      metadata: {}
  68:
    hash: bd9dd0baef43c47684dd23d819d9cb4c8621231e415dc057d8750a6e3733cb3a
    path: ./opts/get_context.rs
    documents:
    - page_content: |-
        use crate::types::ContextType;

        /// Options passed to [`get_context()`](crate::get_context).
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        #[derive(Clone, Debug, Default, macros::OptsBuilder)]
        #[repr(C)]
        pub struct GetContextOpts {
            #[builder(mask)]
            mask: u64,

            /// List of [`ContextType`]s to gather, or empty for all.
            #[builder(
                generics = "T: IntoIterator<Item = ContextType>",
                argtype = "T",
                inline = "{0}.into_iter().map(types::String::from).collect()"
            )]
            types: types::Array,
        }

        /// Options passed to [`get_context()`](crate::get_context).
        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        #[derive(Clone, Debug, Default)]
        #[repr(C)]
        pub struct GetContextOpts {
            types: types::Object,
        }

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl GetContextOpts {
            /// Creates a new [`GetContextOptsBuilder`].
            #[inline]
            pub fn builder() -> GetContextOptsBuilder {
                GetContextOptsBuilder::default()
            }
        }
      metadata: {}
    - page_content: |-
        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        #[derive(Clone, Default)]
        pub struct GetContextOptsBuilder(GetContextOpts);

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl GetContextOptsBuilder {
            /// List of [`ContextType`]s to gather, or empty for all.
            #[inline]
            pub fn types<T>(&mut self, types: T) -> &mut Self
            where
                T: IntoIterator<Item = ContextType>,
            {
                self.0.types = types
                    .into_iter()
                    .map(types::String::from)
                    .collect::<types::Array>()
                    .into();
                self
            }

            #[inline]
            pub fn build(&mut self) -> GetContextOpts {
                std::mem::take(&mut self.0)
            }
        }
      metadata: {}
  69:
    hash: ea0505efa42edb39300fb1ea64c71def4c27ed32e2e5ce138b51898a88dd5a4a
    path: ./opts/open_term.rs
    documents:
    - page_content: |-
        use crate::Buffer;
        use crate::ToFunction;

        /// Arguments passed to the callback registered to
        /// [`on_input`](OpenTermOptsBuilder::on_input). The `(a, b, c, d)` tuple
        /// represents:
        ///
        /// - `a`: the string literal `"input"`;
        /// - `b`: channel id;
        /// - `c`: the [`Buffer`] associated to the terminal instance;
        /// - `d`: data input.
        pub type OnInputArgs = (
            String,        // the string literal `"input"`
            u32,           // channel_id
            Buffer,        // buffer
            types::String, // data input
        );

        /// Options passed to [`open_term()`](crate::open_term).
        #[derive(Clone, Debug, Default, macros::OptsBuilder)]
        #[repr(C)]
        pub struct OpenTermOpts {
            #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
            #[builder(mask)]
            mask: u64,
      metadata: {}
    - page_content: |-
        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
            #[builder(
                generics = "F: ToFunction<OnInputArgs, ()>",
                argtype = "F",
                inline = "types::Object::from_luaref({0}.into_luaref())"
            )]
            /// Callback invoked on data input (like keypresses in terminal mode).
            on_input: types::Object,

            #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
            #[builder(
                generics = "F: ToFunction<OnInputArgs, ()>",
                argtype = "F",
                inline = "{0}.into_luaref()"
            )]
            /// Callback invoked on data input (like keypresses in terminal mode).
            on_input: types::LuaRef,
        }

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl From<&OpenTermOpts> for types::Dictionary {
            fn from(opts: &OpenTermOpts) -> Self {
                Self::from_iter([("on_input", opts.on_input.clone())])
            }
        }
      metadata: {}
  70:
    hash: 0e7d0e8a8cebd7ee0a697139886a1c2ba17f7b02bfcf3279fd60828e15aa9cd6
    path: ./opts/get_extmarks.rs
    documents:
    - page_content: |-
        /// Options passed to
        /// [`Buffer::get_extmarks()`](crate::Buffer::get_extmarks).
        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        #[derive(Clone, Debug, Default)]
        #[repr(C)]
        pub struct GetExtmarksOpts {
            details: types::Object,
            limits: types::Object,
        }

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl GetExtmarksOpts {
            #[inline(always)]
            /// Creates a new [`GetExtmarksOptsBuilder`].
            pub fn builder() -> GetExtmarksOptsBuilder {
                GetExtmarksOptsBuilder::default()
            }
        }

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        #[derive(Clone, Default)]
        pub struct GetExtmarksOptsBuilder(GetExtmarksOpts);
      metadata: {}
    - page_content: |-
        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl GetExtmarksOptsBuilder {
            /// Whether to include the extmark's
            /// [`ExtmarkInfos`](crate::types::ExtmarkInfos) as the last element of
            /// the tuples returned by
            /// [`Buffer::get_extmarks()`](crate::Buffer::get_extmarks).
            #[inline]
            pub fn details(&mut self, details: bool) -> &mut Self {
                #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
                {
                    self.0.details = details.into();
                }
                #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                {
                    self.0.details = details;
                    self.0.mask |= 0b1001;
                }
                self
            }

            #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
            #[inline]
            pub fn hl_name(&mut self, hl_name: bool) -> &mut Self {
                self.0.hl_name = hl_name;
                self.0.mask |= 0b10001;
                self
            }
      metadata: {}
    - page_content: |-
        #[inline]
            pub fn limits(&mut self, limits: bool) -> &mut Self {
                #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
                {
                    self.0.limits = limits.into();
                }
                #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                {
                    self.0.limits = limits as Integer;
                    self.0.mask |= 0b101;
                }
                self
            }

            #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
            #[inline]
            pub fn overlap(&mut self, overlap: bool) -> &mut Self {
                self.0.overlap = overlap;
                self.0.mask |= 0b100001;
                self
            }

            #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
            #[inline]
            pub fn ty<S: Into<nvim::String>>(&mut self, ty: S) -> &mut Self {
                self.0.ty = ty.into();
                self.0.mask |= 0b11;
                self
            }

            /// Maximum number of extmarks to return.
            #[inline]
            pub fn build(&mut self) -> GetExtmarksOpts {
                std::mem::take(&mut self.0)
            }
        }
      metadata: {}
    - page_content: |-
        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl From<&GetExtmarksOpts> for types::Dictionary {
            fn from(opts: &GetExtmarksOpts) -> Self {
                Self::from_iter([
                    ("details", opts.details.clone()),
                    ("limits", opts.limits.clone()),
                ])
            }
        }

        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        #[derive(Clone, Debug, Default, macros::OptsBuilder)]
        #[repr(C)]
        /// Options passed to
        /// [`Buffer::get_extmarks()`](crate::Buffer::get_extmarks).
        pub struct GetExtmarksOpts {
            #[builder(mask)]
            mask: u64,

            #[builder(
                method = "limits",
                argtype = "bool",
                inline = "{0} as types::Integer"
            )]
            limit: types::Integer,

            /// Whether to include the extmark's
            /// [`ExtmarkInfos`](crate::types::ExtmarkInfos) as the last element of
            /// the tuples returned by
            /// [`Buffer::get_extmarks()`](crate::Buffer::get_extmarks).
            #[builder(argtype = "bool")]
            details: types::Boolean,
      metadata: {}
    - page_content: |-
        #[builder(argtype = "bool")]
            hl_name: types::Boolean,

            #[builder(argtype = "bool")]
            overlap: types::Boolean,

            // TODO: fix `Into`.
            // TODO: name it `type` instead of `ty`.
            // #[builder(Into)]
            #[builder(
                generics = "S: Into<types::String>",
                argtype = "S",
                inline = "{0}.into()"
            )]
            ty: types::String,
        }
      metadata: {}
  71:
    hash: b1a1a3edf27bc1fb98a10cf73f114e78df86f29880afe28dc881fb78e1f68aea
    path: ./opts/create_command.rs
    documents:
    - page_content: |-
        use types::conversion::ToObject;

        use crate::types::{
            CommandAddr,
            CommandArgs,
            CommandComplete,
            CommandNArgs,
            CommandRange,
        };
        use crate::Buffer;

        /// Options passed to [`create_user_command`](crate::create_user_command) and
        /// [`Buffer::create_user_command()`](crate::Buffer::create_user_command).
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        #[derive(Clone, Debug, Default, macros::OptsBuilder)]
        #[repr(C)]
        pub struct CreateCommandOpts {
            #[builder(mask)]
            mask: u64,

            #[builder(argtype = "CommandAddr", inline = "{0}.to_object().unwrap()")]
            addr: types::Object,

            #[builder(argtype = "bool")]
            bang: types::Boolean,

            #[builder(argtype = "bool")]
            bar: types::Boolean,

            #[builder(
                argtype = "CommandComplete",
                inline = "{0}.to_object().unwrap()"
            )]
            complete: types::Object,
      metadata: {}
    - page_content: |-
        // TODO: fix `builder(Into)`.
            #[builder(
                generics = "C: Into<types::Integer>",
                argtype = "C",
                inline = "{0}.into().into()"
            )]
            count: types::Object,

            /// Description for the command.
            #[builder(
                generics = "C: Into<types::String>",
                argtype = "C",
                inline = "{0}.into().into()"
            )]
            desc: types::Object,

            #[builder(argtype = "bool")]
            force: types::Boolean,

            #[builder(argtype = "bool")]
            keepscript: types::Boolean,

            #[builder(argtype = "CommandNArgs", inline = "{0}.to_object().unwrap()")]
            nargs: types::Object,

            #[builder(
                generics = r#"F: Into<types::Function<(CommandArgs, Option<u32>, Option<Buffer>), u8>>"#,
                argtype = "F",
                inline = "{0}.into().into()"
            )]
            preview: types::Object,

            #[builder(argtype = "CommandRange", inline = "{0}.to_object().unwrap()")]
            range: types::Object,
      metadata: {}
    - page_content: |-
        #[builder(method = "register", argtype = "bool")]
            register_: types::Boolean,
        }

        /// Options passed to
        /// [`Buffer::create_user_command()`](crate::Buffer::create_user_command).
        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        #[derive(Clone, Debug, Default)]
        #[repr(C)]
        pub struct CreateCommandOpts {
            bar: types::Object,
            addr: types::Object,
            bang: types::Object,
            desc: types::Object,
            count: types::Object,
            force: types::Object,
            nargs: types::Object,
            range: types::Object,
            preview: types::Object,
            complete: types::Object,
            register_: types::Object,
            keepscript: types::Object,
        }

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl CreateCommandOpts {
            #[inline(always)]
            /// Creates a new [`CreateCommandOptsBuilder`].
            pub fn builder() -> CreateCommandOptsBuilder {
                CreateCommandOptsBuilder::default()
            }
        }
      metadata: {}
    - page_content: |-
        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        #[derive(Clone, Default)]
        pub struct CreateCommandOptsBuilder(CreateCommandOpts);

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl CreateCommandOptsBuilder {
            #[inline]
            pub fn addr(&mut self, addr: CommandAddr) -> &mut Self {
                self.0.addr = addr.to_object().unwrap();
                self
            }

            #[inline]
            pub fn bang(&mut self, bang: bool) -> &mut Self {
                self.0.bang = bang.into();
                self
            }

            #[inline]
            pub fn bar(&mut self, bar: bool) -> &mut Self {
                self.0.bar = bar.into();
                self
            }

            #[inline]
            pub fn complete(&mut self, complete: CommandComplete) -> &mut Self {
                self.0.complete = complete.to_object().unwrap();
                self
            }

            #[inline]
            pub fn count(&mut self, count: impl Into<types::Integer>) -> &mut Self {
                self.0.count = count.into().into();
                self
            }
      metadata: {}
    - page_content: |-
        /// Description for the command.
            #[inline]
            pub fn desc<S: Into<types::String>>(&mut self, desc: S) -> &mut Self {
                self.0.desc = desc.into().into();
                self
            }

            #[inline]
            pub fn force(&mut self, force: bool) -> &mut Self {
                self.0.force = force.into();
                self
            }

            #[inline]
            pub fn keepscript(&mut self, keepscript: bool) -> &mut Self {
                self.0.keepscript = keepscript.into();
                self
            }

            #[inline]
            pub fn nargs(&mut self, nargs: CommandNArgs) -> &mut Self {
                self.0.nargs = nargs.to_object().unwrap();
                self
            }

            #[inline]
            pub fn preview<F>(&mut self, fun: F) -> &mut Self
            where
                F: Into<
                    types::Function<(CommandArgs, Option<u32>, Option<Buffer>), u8>,
                >,
            {
                self.0.preview = fun.into().into();
                self
            }
      metadata: {}
    - page_content: |-
        #[inline]
            pub fn range(&mut self, range: CommandRange) -> &mut Self {
                self.0.range = range.to_object().unwrap();
                self
            }

            #[inline]
            pub fn register(&mut self, register: bool) -> &mut Self {
                self.0.register_ = register.into();
                self
            }

            #[inline]
            pub fn build(&mut self) -> CreateCommandOpts {
                std::mem::take(&mut self.0)
            }
        }
      metadata: {}
  72:
    hash: ee7c2e839c6a73c89e185bac6b23417b8330d2fdbf1994f8fd0a589aaa9eedfb
    path: ./opts/set_extmark.rs
    documents:
    - page_content: |-
        use types::{Array, Integer};

        use crate::trait_utils::StringOrListOfStrings;
        use crate::types::{ExtmarkHlMode, ExtmarkVirtTextPosition};
      metadata: {}
    - page_content: |-
        /// Options passed to [`Buffer::set_extmark()`](crate::Buffer::set_extmark).
        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        #[derive(Clone, Debug, Default)]
        #[repr(C)]
        pub struct SetExtmarkOpts {
            id: types::Object,
            spell: types::Object,
            hl_eol: types::Object,
            strict: types::Object,
            end_col: types::Object,
            conceal: types::Object,
            hl_mode: types::Object,
            end_row: types::Object,
            /// The docs don't mention this but it's there.
            end_line: types::Object,
            hl_group: types::Object,
            priority: types::Object,
            ephemeral: types::Object,
            sign_text: types::Object,
            virt_text: types::Object,
            ui_watched: types::Object,
            virt_lines: types::Object,
            line_hl_group: types::Object,
            right_gravity: types::Object,
            sign_hl_group: types::Object,
            virt_text_pos: types::Object,
            virt_text_hide: types::Object,
            number_hl_group: types::Object,
            virt_lines_above: types::Object,
            end_right_gravity: types::Object,
      metadata: {}
    - page_content: |-
        end_right_gravity: types::Object,
            virt_text_win_col: types::Object,
            virt_lines_leftcol: types::Object,
            cursorline_hl_group: types::Object,
        }
      metadata: {}
    - page_content: |-
        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        #[derive(Clone, Default)]
        pub struct SetExtmarkOptsBuilder(SetExtmarkOpts);

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl SetExtmarkOpts {
            #[inline(always)]
            pub fn builder() -> SetExtmarkOptsBuilder {
                SetExtmarkOptsBuilder::default()
            }
        }

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl SetExtmarkOptsBuilder {
            /// Enable concealing symilar to `:syn-conceal`. If a character is supplied
            /// it is used as `:syn-cchar`.
            ///
            /// [`hl_group`](SetExtmarkOptsBuilder::hl_group) is used to highlight the
            /// character if provided, otherwise it defaults to `hl-Conceal`.
            #[inline]
            pub fn conceal(&mut self, conceal: Option<char>) -> &mut Self {
                let ch = conceal.map(types::String::from).unwrap_or_default();
                self.0.conceal = ch.into();
                self
            }
      metadata: {}
    - page_content: |-
        /// Name of the highlight group used to highlight the line when the cursor
            /// is on the same line as the mark and `cursorline` is enabled.
            #[inline]
            pub fn cursorline_hl_group(
                &mut self,
                cursorline_hl_group: &str,
            ) -> &mut Self {
                self.0.cursorline_hl_group =
                    types::String::from(cursorline_hl_group).into();
                self
            }

            /// Ending line of the mark. 0-indexed and exclusive.
            #[inline]
            pub fn end_col(&mut self, end_col: usize) -> &mut Self {
                let end_col = end_col as Integer;
                self.0.end_col = end_col.into();
                self
            }

            /// Indicates the direction the extmark's end position (if it exists) will
            /// be shifted in when new text is inserted (`true` for right, `false` for
            /// left). Defaults to left.
            #[inline]
            pub fn end_right_gravity(&mut self, end_right_gravity: bool) -> &mut Self {
                self.0.end_right_gravity = end_right_gravity.into();
                self
            }
      metadata: {}
    - page_content: |-
        /// Ending line of the mark. 0-indexed and inclusive.
            #[inline]
            pub fn end_row(&mut self, end_row: usize) -> &mut Self {
                let end_row = end_row as Integer;
                self.0.end_row = end_row.into();
                self
            }

            /// For use with
            /// [`set_decoration_provider()`](crate::set_decoration_provider)
            /// callbacks. The mark will only be used for the current redraw cycle, and
            /// not be permanently stored in the buffer.
            #[inline]
            pub fn ephemeral(&mut self, ephemeral: bool) -> &mut Self {
                self.0.ephemeral = ephemeral.into();
                self
            }

            /// Whether to continue the highlight for the rest of the screen line for
            /// multiline highlights covering the EOL of a line.
            #[inline]
            pub fn hl_eol(&mut self, hl_eol: bool) -> &mut Self {
                self.0.hl_eol = hl_eol.into();
                self
            }
      metadata: {}
    - page_content: |-
        /// Name of the highlight group used to highlight this mark.
            #[inline]
            pub fn hl_group(&mut self, hl_group: &str) -> &mut Self {
                self.0.hl_group = types::String::from(hl_group).into();
                self
            }

            /// Controls how highlights are combined with the highlights of the text.
            #[inline]
            pub fn hl_mode(&mut self, hl_mode: ExtmarkHlMode) -> &mut Self {
                let hl_mode = types::String::from(hl_mode);
                self.0.hl_mode = hl_mode.into();
                self
            }

            /// Id of the extmark to edit.
            #[inline]
            pub fn id(&mut self, id: u32) -> &mut Self {
                let id = id as Integer;
                self.0.id = id.into();
                self
            }

            /// Name of the highlight group used to highlight the whole line.
            #[inline]
            pub fn line_hl_group(&mut self, line_hl_group: &str) -> &mut Self {
                self.0.line_hl_group = types::String::from(line_hl_group).into();
                self
            }
      metadata: {}
    - page_content: |-
        /// Name of the highlight group used to highlight the number column.
            #[inline]
            pub fn number_hl_group(&mut self, number_hl_group: &str) -> &mut Self {
                self.0.number_hl_group = types::String::from(number_hl_group).into();
                self
            }

            /// A priority value for the highlight group. For example, treesitter
            /// highlights use a value of 100.
            #[inline]
            pub fn priority(&mut self, priority: u32) -> &mut Self {
                let priority = priority as Integer;
                self.0.priority = priority.into();
                self
            }

            /// Indicates the direction the extmark will be shifted in when new text is
            /// inserted (`true` for right, `false` for left). Defaults to right.
            #[inline]
            pub fn right_gravity(&mut self, right_gravity: bool) -> &mut Self {
                self.0.right_gravity = right_gravity.into();
                self
            }
      metadata: {}
    - page_content: |-
        /// Name of the highlight group used to highlight the sign column text.
            #[inline]
            pub fn sign_hl_group(&mut self, sign_hl_group: &str) -> &mut Self {
                self.0.sign_hl_group = types::String::from(sign_hl_group).into();
                self
            }

            /// Text to display in the sign column. Should take up 1-2 display cells.
            #[inline]
            pub fn sign_text(&mut self, sign_text: &str) -> &mut Self {
                let sign_text = types::String::from(sign_text);
                self.0.sign_text = sign_text.into();
                self
            }

            /// Whether the extmark should not be placed if the line or column value is
            /// past the end of the buffer or end of the line, respectively. Defaults
            /// to `true`.
            #[inline]
            pub fn strict(&mut self, strict: bool) -> &mut Self {
                self.0.strict = strict.into();
                self
            }
      metadata: {}
    - page_content: |-
        /// Whether the mark should be drawn by an external UI. When `true` the UI
            /// will receive `win_extmark` events.
            #[inline]
            pub fn ui_watched(&mut self, ui_watched: bool) -> &mut Self {
                self.0.ui_watched = ui_watched.into();
                self
            }

            /// Virtual lines to add next to the mark.
            #[inline]
            pub fn virt_lines<Txt, Hl, Cnk, ChunkyCnk>(
                &mut self,
                virt_lines: ChunkyCnk,
            ) -> &mut Self
            where
                ChunkyCnk: IntoIterator<Item = Cnk>,
                Cnk: IntoIterator<Item = (Txt, Hl)>,
                Txt: Into<types::String>,
                Hl: StringOrListOfStrings,
            {
                let mut virt = types::Array::default();
                set_virt_lines(&mut virt, virt_lines);
                self.0.virt_lines = virt.into();
                self
            }
      metadata: {}
    - page_content: |-
        /// Whether to place virtual lines above the buffer line containing the
            /// mark.
            #[inline]
            pub fn virt_lines_above(&mut self, virt_lines_above: bool) -> &mut Self {
                self.0.virt_lines_above = virt_lines_above.into();
                self
            }

            /// Whether to place extmarks in the leftmost column of the ewindow,
            /// bypassing sign and number columns.
            #[inline]
            pub fn virt_lines_leftcol(
                &mut self,
                virt_lines_leftcol: bool,
            ) -> &mut Self {
                self.0.virt_lines_leftcol = virt_lines_leftcol.into();
                self
            }
      metadata: {}
    - page_content: |-
        /// Virtual text to link to this mark. Every `(text, highlights)` tuple
            /// represents a text chunk with a specified highlight. The highlights
            /// specified in `highlights` will be combined together, with the highest
            /// priority highlight beign applied last. Each highlight group can either
            /// be a string or an integer, the latter obtained using
            /// [`get_hl_id_by_name()`](crate::get_hl_id_by_name).
            #[inline]
            pub fn virt_text<Txt, Hl, Cnk>(&mut self, virt_text: Cnk) -> &mut Self
            where
                Cnk: IntoIterator<Item = (Txt, Hl)>,
                Txt: Into<types::String>,
                Hl: StringOrListOfStrings,
            {
                let mut array = types::Array::default();
                set_virt_text(&mut array, virt_text);
                self.0.virt_text = array.into();
                self
            }
      metadata: {}
    - page_content: |-
        /// Whether to hide the virtual text when the background text is selected
            /// or hidden due to horizontal scroll.
            #[inline]
            pub fn virt_text_hide(&mut self, virt_text_hide: bool) -> &mut Self {
                self.0.virt_text_hide = virt_text_hide.into();
                self
            }

            /// Position of the virtual text.
            #[inline]
            pub fn virt_text_pos(
                &mut self,
                virt_text_pos: ExtmarkVirtTextPosition,
            ) -> &mut Self {
                let virt_text_pos = types::String::from(virt_text_pos);
                self.0.virt_text_pos = virt_text_pos.into();
                self
            }

            /// Position the virtual text at a fixed window column (starting from the
            /// first text column).
            #[inline]
            pub fn virt_text_win_col(&mut self, virt_text_win_col: u32) -> &mut Self {
                let virt_text_win_col = virt_text_win_col as Integer;
                self.0.virt_text_win_col = virt_text_win_col.into();
                self
            }
      metadata: {}
    - page_content: |-
        #[inline]
            pub fn build(&mut self) -> SetExtmarkOpts {
                std::mem::take(&mut self.0)
            }
        }

        /// Options passed to [`Buffer::set_extmark()`](crate::Buffer::set_extmark).
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        #[derive(Clone, Debug, Default, macros::OptsBuilder)]
        #[repr(C)]
        pub struct SetExtmarkOpts {
            #[builder(mask)]
            mask: u64,

            /// Id of the extmark to edit.
            #[builder(argtype = "u32", inline = "{0} as types::Integer")]
            id: types::Integer,

            #[builder(argtype = "u32", inline = "{0} as types::Integer")]
            end_line: types::Integer,

            /// Ending line of the mark. 0-indexed and inclusive.
            #[builder(argtype = "usize", inline = "{0} as types::Integer")]
            end_row: types::Integer,

            /// Ending line of the mark. 0-indexed and exclusive.
            #[builder(argtype = "usize", inline = "{0} as types::Integer")]
            end_col: types::Integer,
      metadata: {}
    - page_content: |-
        /// Name of the highlight group used to highlight this mark.
            #[cfg(not(feature = "neovim-nightly"))] // On 0.9 and 0.10.
            #[cfg_attr(docsrs, doc(cfg(not(feature = "neovim-nightly"))))]
            #[builder(
                generics = "Hl: crate::HlGroup",
                argtype = "Hl",
                inline = r#"{ let Ok(hl_id) = {0}.to_hl_id() else { return self; }; hl_id }"#
            )]
            hl_group: types::HlGroupId,

            /// Name of the highlight group used to highlight this mark.
            #[cfg(feature = "neovim-nightly")] // Only on Nightly.
            #[cfg_attr(docsrs, doc(cfg(feature = "neovim-nightly")))]
            #[builder(
                generics = "Hl: crate::SetExtmarkHlGroup",
                argtype = "Hl",
                inline = r#"{0}.into_object()"#
            )]
            hl_group: types::Object,
      metadata: {}
    - page_content: |-
        /// Virtual text to link to this mark. Every `(text, highlights)` tuple
            /// represents a text chunk with a specified highlight. The highlights
            /// specified in `highlights` will be combined together, with the highest
            /// priority highlight beign applied last. Each highlight group can either
            /// be a string or an integer, the latter obtained using
            /// [`get_hl_id_by_name()`](crate::get_hl_id_by_name).
            #[builder(
                generics = r#"Txt: Into<types::String>, Hl: StringOrListOfStrings, Cnk: IntoIterator<Item = (Txt, Hl)>"#,
                argtype = "Cnk",
                setter = "set_virt_text"
            )]
            virt_text: types::Array,

            /// Position of the virtual text.
            #[builder(
                argtype = "ExtmarkVirtTextPosition",
                inline = "types::String::from({0})"
            )]
            virt_text_pos: types::String,
      metadata: {}
    - page_content: |-
        /// Position the virtual text at a fixed window column (starting from the
            /// first text column).
            #[builder(argtype = "u32", inline = "{0} as types::Integer")]
            virt_text_win_col: Integer,

            /// Whether to hide the virtual text when the background text is selected
            /// or hidden due to horizontal scroll.
            #[builder(argtype = "bool")]
            virt_text_hide: types::Boolean,

            /// Whether to repeat the virtual text on wrapped lines.
            #[builder(argtype = "bool")]
            virt_text_repeat_linebreak: types::Boolean,

            /// Whether to continue the highlight for the rest of the screen line for
            /// multiline highlights covering the EOL of a line.
            #[builder(argtype = "bool")]
            hl_eol: types::Boolean,

            /// Controls how highlights are combined with the highlights of the text.
            #[builder(argtype = "ExtmarkHlMode", inline = "types::String::from({0})")]
            hl_mode: types::String,

            #[builder(argtype = "bool")]
            invalidate: types::Boolean,
      metadata: {}
    - page_content: |-
        /// For use with
            /// [`set_decoration_provider()`](crate::set_decoration_provider)
            /// callbacks. The mark will only be used for the current redraw cycle, and
            /// not be permanently stored in the buffer.
            #[builder(argtype = "bool")]
            ephemeral: types::Boolean,

            /// A priority value for the highlight group. For example, treesitter
            /// highlights use a value of 100.
            #[builder(argtype = "u32", inline = "{0} as types::Integer")]
            priority: Integer,

            /// Indicates the direction the extmark will be shifted in when new text is
            /// inserted (`true` for right, `false` for left). Defaults to right.
            #[builder(argtype = "bool")]
            right_gravity: types::Boolean,

            /// Indicates the direction the extmark's end position (if it exists) will
            /// be shifted in when new text is inserted (`true` for right, `false` for
            /// left). Defaults to left.
            #[builder(argtype = "bool")]
            end_right_gravity: types::Boolean,
      metadata: {}
    - page_content: |-
        /// Virtual lines to add next to the mark.
            #[builder(
                generics = r#"Txt: Into<types::String>, Hl: StringOrListOfStrings, Cnk: IntoIterator<Item = (Txt, Hl)>, ChunkyCnk: IntoIterator<Item = Cnk>"#,
                argtype = "ChunkyCnk",
                setter = "set_virt_lines"
            )]
            virt_lines: types::Array,

            /// Whether to place virtual lines above the buffer line containing the
            /// mark.
            #[builder(argtype = "bool")]
            virt_lines_above: types::Boolean,

            /// Whether to place extmarks in the leftmost column of the ewindow,
            /// bypassing sign and number columns.
            #[builder(argtype = "bool")]
            virt_lines_leftcol: types::Boolean,

            /// Whether the extmark should not be placed if the line or column value is
            /// past the end of the buffer or end of the line, respectively. Defaults
            /// to `true`.
            #[builder(argtype = "bool")]
            strict: types::Boolean,
      metadata: {}
    - page_content: |-
        /// Text to display in the sign column. Should take up 1-2 display cells.
            #[builder(argtype = "&str", inline = "types::String::from({0})")]
            sign_text: types::String,

            /// Name of the highlight group used to highlight the sign column text.
            #[builder(
                generics = "Hl: crate::HlGroup",
                argtype = "Hl",
                inline = r#"{ let Ok(hl_id) = {0}.to_hl_id() else { return self; }; hl_id }"#
            )]
            sign_hl_group: types::HlGroupId,

            /// Name of the highlight group used to highlight the number column.
            #[builder(
                generics = "Hl: crate::HlGroup",
                argtype = "Hl",
                inline = r#"{ let Ok(hl_id) = {0}.to_hl_id() else { return self; }; hl_id }"#
            )]
            number_hl_group: types::HlGroupId,
      metadata: {}
    - page_content: |-
        /// Name of the highlight group used to highlight the whole line.
            #[builder(
                generics = "Hl: crate::HlGroup",
                argtype = "Hl",
                inline = r#"{ let Ok(hl_id) = {0}.to_hl_id() else { return self; }; hl_id }"#
            )]
            line_hl_group: types::HlGroupId,

            /// Name of the highlight group used to highlight the line when the cursor
            /// is on the same line as the mark and `cursorline` is enabled.
            #[builder(
                generics = "Hl: crate::HlGroup",
                argtype = "Hl",
                inline = r#"{ let Ok(hl_id) = {0}.to_hl_id() else { return self; }; hl_id }"#
            )]
            cursorline_hl_group: types::HlGroupId,
      metadata: {}
    - page_content: |-
        /// Enable concealing symilar to `:syn-conceal`. If a character is supplied
            /// it is used as `:syn-cchar`.
            ///
            /// [`hl_group`](SetExtmarkOptsBuilder::hl_group) is used to highlight the
            /// character if provided, otherwise it defaults to `hl-Conceal`.
            #[builder(
                argtype = "Option<char>",
                inline = "{0}.map(types::String::from).unwrap_or_default()"
            )]
            conceal: types::String,

            #[builder(argtype = "bool")]
            spell: types::Boolean,

            /// Whether the mark should be drawn by an external UI. When `true` the UI
            /// will receive `win_extmark` events.
            #[builder(argtype = "bool")]
            ui_watched: types::Boolean,
      metadata: {}
    - page_content: |-
        /// Whether to restore the exact position of the mark if text around the
            /// mark was deleted and then restored by undo.
            ///
            /// Defaults to `true`.
            #[builder(argtype = "bool")]
            #[cfg_attr(
                docsrs,
                doc(cfg(any(feature = "neovim-0-10", feature = "neovim-nightly")))
            )]
            undo_restore: types::Boolean,

            /// A URL to associate with this extmark.
            ///
            /// In the TUI, the OSC 8 control sequence is used to generate a clickable
            /// hyperlink to this URL.
            #[builder(argtype = "&str", inline = "types::String::from({0})")]
            url: types::String,

            // This was an experimental option in Neovim 0.10 but has been removed from
            // the public API on nightly, even though it's still included in the opts.
            scoped: types::Boolean,
        }

        #[inline]
      metadata: {}
    - page_content: |-
        fn set_virt_lines<Txt, Hl, Cnk, ChunkyCnk>(
            field: &mut Array,
            virt_lines: ChunkyCnk,
        ) where
            ChunkyCnk: IntoIterator<Item = Cnk>,
            Cnk: IntoIterator<Item = (Txt, Hl)>,
            Txt: Into<types::String>,
            Hl: StringOrListOfStrings,
        {
            *field = virt_lines
                .into_iter()
                .map(|chnky| {
                    Array::from_iter(chnky.into_iter().map(|(txt, hl)| {
                        Array::from_iter([txt.into().into(), hl.to_object()])
                    }))
                })
                .collect::<Array>();
        }

        #[inline]
        fn set_virt_text<Txt, Hl, Cnk>(field: &mut Array, virt_text: Cnk)
        where
            Cnk: IntoIterator<Item = (Txt, Hl)>,
            Txt: Into<types::String>,
            Hl: StringOrListOfStrings,
        {
            *field = virt_text
                .into_iter()
                .map(|(txt, hl)| Array::from_iter([txt.into().into(), hl.to_object()]))
                .collect::<Array>();
        }
      metadata: {}
  73:
    hash: 1db598740fdf1b3e304ce4c38f6f8c48059d62c6c50afafd92a35052d1e4e188
    path: ./opts/select_popup_menu_item.rs
    documents:
    - page_content: |-
        /// Options passed to
        /// [`select_popupmenu_item()`](crate::select_popupmenu_item).
        /// Currently unused.
        #[derive(Clone, Debug, Default, macros::OptsBuilder)]
        #[repr(C)]
        pub struct SelectPopupMenuItemOpts {
            #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
            #[builder(mask)]
            mask: u64,
        }

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl From<&SelectPopupMenuItemOpts> for types::Dictionary {
            fn from(_: &SelectPopupMenuItemOpts) -> Self {
                Self::new()
            }
        }
      metadata: {}
  74:
    hash: 986dc48a03e63b662e457c92292462f335d15d28bc4e632752d894389de6a7da
    path: ./opts/create_autocmd.rs
    documents:
    - page_content: |-
        use crate::types::AutocmdCallbackArgs;
        use crate::Buffer;
        use crate::StringOrInt;

        pub type ShouldDeleteAutocmd = bool;

        /// Options passed to [`create_autocmd()`](crate::create_autocmd).
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        #[derive(Clone, Debug, Default, macros::OptsBuilder)]
        #[repr(C)]
        pub struct CreateAutocmdOpts {
            #[builder(mask)]
            mask: u64,

            /// A specific `Buffer` for buffer-local autocommands.
            #[builder(argtype = "Buffer", inline = "{0}.0")]
            buffer: types::BufHandle,

            /// Callback to execute when the autocommand is triggered. Cannot be used
            /// together with `command`.
            #[builder(
                generics = r#"F: Into<types::Function<AutocmdCallbackArgs, ShouldDeleteAutocmd>>"#,
                argtype = "F",
                inline = "{0}.into().into()"
            )]
            callback: types::Object,
      metadata: {}
    - page_content: |-
        /// Vim command to execute when the autocommand is triggered. Cannot be
            /// used together with `callback`.
            // TODO: fix builder(Into).
            #[builder(
                generics = "S: Into<types::String>",
                argtype = "S",
                inline = "{0}.into()"
            )]
            command: types::String,

            /// Description of the autocommand.
            // TODO: fix builder(Into).
            #[builder(
                generics = "S: Into<types::String>",
                argtype = "S",
                inline = "{0}.into()"
            )]
            desc: types::String,

            /// The autocommand group name or id to match against.
            #[builder(
                generics = "G: StringOrInt",
                argtype = "G",
                inline = "{0}.to_object()"
            )]
            group: types::Object,

            /// Run nested autocommands.
            #[builder(argtype = "bool")]
            nested: types::Boolean,

            /// Only run the autocommand once.
            #[builder(argtype = "bool")]
            once: types::Boolean,
      metadata: {}
    - page_content: |-
        /// Patterns to match against.
            #[builder(
                generics = "'a, I: IntoIterator<Item = &'a str>",
                method = "patterns",
                argtype = "I",
                inline = "types::Array::from_iter({0}).into()"
            )]
            pattern: types::Object,
        }

        /// Options passed to [`create_autocmd()`](crate::create_autocmd).
        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        #[derive(Clone, Debug, Default)]
        #[repr(C)]
        pub struct CreateAutocmdOpts {
            desc: types::Object,
            once: types::Object,
            group: types::Object,
            buffer: types::Object,
            nested: types::Object,
            command: types::Object,
            pattern: types::Object,
            callback: types::Object,
        }

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl CreateAutocmdOpts {
            #[inline(always)]
            pub fn builder() -> CreateAutocmdOptsBuilder {
                CreateAutocmdOptsBuilder::default()
            }
        }
      metadata: {}
    - page_content: |-
        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        #[derive(Clone, Default)]
        pub struct CreateAutocmdOptsBuilder(CreateAutocmdOpts);

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl CreateAutocmdOptsBuilder {
            /// A specific `Buffer` for buffer-local autocommands.
            #[inline]
            pub fn buffer(&mut self, buffer: Buffer) -> &mut Self {
                self.0.buffer = buffer.into();
                self
            }

            /// Callback to execute when the autocommand is triggered. Cannot be used
            /// together with `command`.
            #[inline]
            pub fn callback<F>(&mut self, callback: F) -> &mut Self
            where
                F: Into<types::Function<AutocmdCallbackArgs, ShouldDeleteAutocmd>>,
            {
                self.0.callback = callback.into().into();
                self
            }
      metadata: {}
    - page_content: |-
        /// Vim command to execute when the autocommand is triggered. Cannot be
            /// used together with `callback`.
            #[inline]
            pub fn command<S>(&mut self, command: S) -> &mut Self
            where
                S: Into<types::String>,
            {
                self.0.command = command.into().into();
                self
            }

            /// Description of the autocommand.
            #[inline]
            pub fn desc<S>(&mut self, desc: S) -> &mut Self
            where
                S: Into<types::String>,
            {
                self.0.desc = desc.into().into();
                self
            }

            /// The autocommand group name or id to match against.
            #[inline]
            pub fn group<Grp>(&mut self, group: Grp) -> &mut Self
            where
                Grp: StringOrInt,
            {
                self.0.group = group.to_object();
                self
            }

            /// Run nested autocommands.
            #[inline]
            pub fn nested(&mut self, nested: bool) -> &mut Self {
                self.0.nested = nested.into();
                self
            }
      metadata: {}
    - page_content: |-
        /// Only run the autocommand once.
            #[inline]
            pub fn once(&mut self, once: bool) -> &mut Self {
                self.0.once = once.into();
                self
            }

            /// Patterns to match against.
            #[inline]
            pub fn patterns<'a, I>(&mut self, patterns: I) -> &mut Self
            where
                I: IntoIterator<Item = &'a str>,
            {
                self.0.pattern = types::Array::from_iter(patterns).into();
                self
            }

            #[inline]
            pub fn build(&mut self) -> CreateAutocmdOpts {
                std::mem::take(&mut self.0)
            }
        }
      metadata: {}
  75:
    hash: 14f0585fa20ec50a7a509c8e1b2c0d2cddccfa3378c4540a8622006dbe73b66b
    path: ./opts/create_augroup.rs
    documents:
    - page_content: |-
        /// Options passed to [`create_augroup()`](crate::create_augroup).
        #[cfg(feature = "neovim-nightly")] // Only on Nightly.
        #[derive(Clone, Debug, Default, macros::OptsBuilder)]
        #[repr(C)]
        pub struct CreateAugroupOpts {
            #[builder(mask)]
            mask: u64,

            /// Whether to clear existing commands if the group already exists.
            #[builder(argtype = "bool")]
            clear: types::Boolean,
        }

        /// Options passed to [`create_augroup()`](crate::create_augroup).
        #[cfg(not(feature = "neovim-nightly"))] // On 0.9 and 0.10.
        #[derive(Clone, Debug, Default)]
        #[repr(C)]
        pub struct CreateAugroupOpts {
            clear: types::Object,
        }

        #[cfg(not(feature = "neovim-nightly"))] // On 0.9 and 0.10.
        impl CreateAugroupOpts {
            #[inline(always)]
            pub fn builder() -> CreateAugroupOptsBuilder {
                CreateAugroupOptsBuilder::default()
            }
        }

        #[cfg(not(feature = "neovim-nightly"))] // On 0.9 and 0.10.
        #[derive(Clone, Default)]
        pub struct CreateAugroupOptsBuilder(CreateAugroupOpts);
      metadata: {}
    - page_content: |-
        #[cfg(not(feature = "neovim-nightly"))] // On 0.9 and 0.10.
        impl CreateAugroupOptsBuilder {
            /// Whether to clear existing commands if the group already exists.
            #[inline]
            pub fn clear(&mut self, clear: bool) -> &mut Self {
                self.0.clear = clear.into();
                self
            }

            #[inline]
            pub fn build(&mut self) -> CreateAugroupOpts {
                std::mem::take(&mut self.0)
            }
        }
      metadata: {}
  76:
    hash: 21fb3c3dbc916e75d0f9f406a6e8c245d76241ecd71ab6ced68b1eceba6b13b2
    path: ./opts/set_keymap.rs
    documents:
    - page_content: |-
        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        use types::Object;
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        use types::{Boolean, LuaRef};

        use crate::ToFunction;

        /// Options passed to [`Buffer::set_keymap()`](crate::Buffer::set_keymap)
        /// and [`set_keymap()`](crate::set_keymap).
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        #[derive(Clone, Debug, Default, PartialEq, macros::OptsBuilder)]
        #[repr(C)]
        pub struct SetKeymapOpts {
            #[builder(mask)]
            mask: u64,

            /// Whether the right-hand side of the mapping shouldn't be remappable.
            #[builder(argtype = "bool")]
            noremap: Boolean,

            /// For buffer-local mappings, whether Neovim should wait for more
            /// characters to be typed if there's a global mapping that could also
            /// match. See `:h map-nowait` for more details.
            #[builder(argtype = "bool")]
            nowait: Boolean,

            /// Whether the keymap should be silent.
            #[builder(argtype = "bool")]
            silent: Boolean,
      metadata: {}
    - page_content: |-
        /// Whether to remap characters in the right-hand side by expanding the
            /// `<sid>` script tag.
            #[builder(argtype = "bool")]
            script: Boolean,

            /// Whether the keymap argument is an expression.
            #[builder(argtype = "bool")]
            expr: Boolean,

            /// If `true` setting the keymap fill fail if another keymap with the same
            /// left-hand side already exists.
            #[builder(argtype = "bool")]
            unique: Boolean,

            /// A function to call when the mapping is executed.
            #[builder(
                generics = "F: ToFunction<(), ()>",
                argtype = "F",
                inline = "{0}.into_luaref()"
            )]
            callback: LuaRef,

            /// A description for the keymap.
            #[builder(
                generics = "D: Into<types::String>",
                argtype = "D",
                inline = "{0}.into()"
            )]
            desc: types::String,
      metadata: {}
    - page_content: |-
        /// When [`expr`](SetKeymapOptsBuilder::expr) is `true`, this option can be
            /// used to replace the keycodes in the resulting string (see
            /// [replace_termcodes()](crate::replace_termcodes)).
            #[builder(argtype = "bool")]
            replace_keycodes: Boolean,
        }

        /// Options passed to [`Buffer::set_keymap()`](crate::Buffer::set_keymap)
        /// and [`set_keymap()`](crate::set_keymap).
        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        #[derive(Clone, Debug, Default, PartialEq)]
        #[repr(C)]
        pub struct SetKeymapOpts {
            desc: Object,
            expr: Object,
            script: Object,
            silent: Object,
            unique: Object,
            nowait: Object,
            noremap: Object,
            callback: Object,
            replace_keycodes: Object,
        }

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl SetKeymapOpts {
            #[inline(always)]
            /// Creates a new [`SetKeymapOptsBuilder`].
            pub fn builder() -> SetKeymapOptsBuilder {
                SetKeymapOptsBuilder::default()
            }
        }
      metadata: {}
    - page_content: |-
        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        #[derive(Clone, Default)]
        pub struct SetKeymapOptsBuilder(SetKeymapOpts);

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl SetKeymapOptsBuilder {
            /// A function to call when the mapping is executed.
            #[inline]
            pub fn callback<F>(&mut self, fun: F) -> &mut Self
            where
                F: ToFunction<(), ()>,
            {
                let callback = fun.into_luaref();
                self.0.callback = Object::from_luaref(callback);
                self
            }

            /// A description for the keymap.
            #[inline]
            pub fn desc(&mut self, desc: &str) -> &mut Self {
                let desc = types::String::from(desc);
                self.0.desc = desc.into();
                self
            }

            /// Whether the keymap argument is an expression.
            #[inline]
            pub fn expr(&mut self, expr: bool) -> &mut Self {
                self.0.expr = expr.into();
                self
            }
      metadata: {}
    - page_content: |-
        /// Whether the right-hand side of the mapping shouldn't be remappable.
            #[inline]
            pub fn noremap(&mut self, noremap: bool) -> &mut Self {
                self.0.noremap = noremap.into();
                self
            }

            /// For buffer-local mappings, whether Neovim should wait for more
            /// characters to be typed if there's a global mapping that could also
            /// match. See `:h map-nowait` for more details.
            #[inline]
            pub fn nowait(&mut self, nowait: bool) -> &mut Self {
                self.0.nowait = nowait.into();
                self
            }

            /// When [`expr`](SetKeymapOptsBuilder::expr) is `true`, this option can be
            /// used to replace the keycodes in the resulting string (see
            /// [replace_termcodes()](crate::replace_termcodes)).
            #[inline]
            pub fn replace_keycodes(&mut self, replace_keycodes: bool) -> &mut Self {
                self.0.replace_keycodes = replace_keycodes.into();
                self
            }
      metadata: {}
    - page_content: |-
        /// Whether to remap characters in the right-hand side by expanding the
            /// `<sid>` script tag.
            #[inline]
            pub fn script(&mut self, script: bool) -> &mut Self {
                self.0.script = script.into();
                self
            }

            /// Whether the keymap should be silent.
            #[inline]
            pub fn silent(&mut self, silent: bool) -> &mut Self {
                self.0.silent = silent.into();
                self
            }

            /// If `true` setting the keymap fill fail if another keymap with the same
            /// left-hand side already exists.
            #[inline]
            pub fn unique(&mut self, unique: bool) -> &mut Self {
                self.0.unique = unique.into();
                self
            }

            #[inline]
            pub fn build(&mut self) -> SetKeymapOpts {
                std::mem::take(&mut self.0)
            }
        }
      metadata: {}
  77:
    hash: 3d0d96b6da3a7399cefb2f8d30b7f1d9792aac8f2c99f51bf1afe94cfa87c822
    path: ./opts/set_mark.rs
    documents:
    - page_content: |-
        /// Options passed to [`Buffer::set_mark()`](crate::Buffer::get_mark).
        /// Currently unused.
        #[derive(Clone, Debug, Default, macros::OptsBuilder)]
        #[repr(C)]
        pub struct SetMarkOpts {
            #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
            #[builder(mask)]
            mask: u64,
        }

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl From<&SetMarkOpts> for types::Dictionary {
            fn from(_: &SetMarkOpts) -> Self {
                Self::new()
            }
        }
      metadata: {}
  78:
    hash: 05b046ddeb0894ebe9d0d1557f1f7cd93111bfec73b706ee910af64860b8347f
    path: ./opts/get_extmark_by_id.rs
    documents:
    - page_content: |-
        /// Options passed to
        /// [`Buffer::get_extmark_by_id()`](crate::Buffer::get_extmark_by_id).
        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        #[derive(Clone, Debug, Default)]
        pub struct GetExtmarkByIdOpts {
            details: types::Object,
        }

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl GetExtmarkByIdOpts {
            #[inline]
            pub fn builder() -> GetExtmarkByIdOptsBuilder {
                GetExtmarkByIdOptsBuilder::default()
            }
        }

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        #[derive(Clone, Default)]
        pub struct GetExtmarkByIdOptsBuilder(GetExtmarkByIdOpts);
      metadata: {}
    - page_content: |-
        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl GetExtmarkByIdOptsBuilder {
            /// Whether to include the extmark's
            /// [`ExtmarkInfos`](crate::types::ExtmarkInfos) as the last element of the
            /// tuple returned by
            /// [`Buffer::get_extmark_by_id`](crate::Buffer::get_extmark_by_id).
            #[inline]
            pub fn details(&mut self, details: bool) -> &mut Self {
                self.0.details = details.into();
                self
            }

            #[inline]
            pub fn build(&mut self) -> GetExtmarkByIdOpts {
                std::mem::take(&mut self.0)
            }
        }

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl From<&GetExtmarkByIdOpts> for types::Dictionary {
            fn from(opts: &GetExtmarkByIdOpts) -> Self {
                Self::from_iter([("details", opts.details.clone())])
            }
        }
      metadata: {}
    - page_content: |-
        /// Options passed to
        /// [`Buffer::get_extmark_by_id()`](crate::Buffer::get_extmark_by_id).
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        #[derive(Clone, Debug, Default, macros::OptsBuilder)]
        #[repr(C)]
        pub struct GetExtmarkByIdOpts {
            #[builder(mask)]
            mask: u64,

            /// Whether to include the extmark's
            /// [`ExtmarkInfos`](crate::types::ExtmarkInfos) as the last element of the
            /// tuple returned by
            /// [`Buffer::get_extmark_by_id`](crate::Buffer::get_extmark_by_id).
            #[builder(argtype = "bool")]
            details: types::Boolean,

            #[builder(argtype = "bool")]
            hl_name: types::Boolean,
        }
      metadata: {}
  79:
    hash: c3ef806db6ad8ccb62065542c6c555dfcb2d329dcc54741c82f82e471b6cbe61
    path: ./opts/parse_cmd.rs
    documents:
    - page_content: |-
        /// Options passed to [`parse_cmd()`](crate::parse_cmd). Currently unused.
        #[derive(Clone, Debug, Default, macros::OptsBuilder)]
        #[repr(C)]
        pub struct ParseCmdOpts {
            #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
            #[builder(mask)]
            mask: u64,
        }

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl From<&ParseCmdOpts> for types::Dictionary {
            fn from(_: &ParseCmdOpts) -> Self {
                Self::new()
            }
        }
      metadata: {}
  80:
    hash: 79173c47e2747100584f0be99533b6afbac994fc8639cb30b14ac1e6593a4f8e
    path: ./opts/clear_autocmds.rs
    documents:
    - page_content: |-
        use crate::Buffer;
        use crate::StringOrInt;

        /// Options passed to [`clear_autocmds()`](crate::clear_autocmds).
        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        #[derive(Clone, Debug, Default)]
        #[repr(C)]
        pub struct ClearAutocmdsOpts {
            event: types::Object,
            group: types::Object,
            buffer: types::Object,
            pattern: types::Object,
        }

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl ClearAutocmdsOpts {
            /// Creates a new [`ClearAutocmdsOptsBuilder`].
            #[inline(always)]
            pub fn builder() -> ClearAutocmdsOptsBuilder {
                ClearAutocmdsOptsBuilder::default()
            }
        }

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        #[derive(Clone, Default)]
        pub struct ClearAutocmdsOptsBuilder(ClearAutocmdsOpts);
      metadata: {}
    - page_content: |-
        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl ClearAutocmdsOptsBuilder {
            /// Only clear the autocommands local to a specific `Buffer`. Cannot be
            /// used together with [`patterns`](ClearAutocmdsOptsBuilder::patterns).
            #[inline]
            pub fn buffer(&mut self, buffer: Buffer) -> &mut Self {
                self.0.buffer = buffer.into();
                self
            }

            /// Clear all the autocommands triggered by one or more of the specified
            /// events.
            #[inline]
            pub fn events<'a, I>(&mut self, iter: I) -> &mut Self
            where
                I: IntoIterator<Item = &'a str>,
            {
                self.0.event = types::Array::from_iter(iter).into();
                self
            }
      metadata: {}
    - page_content: |-
        /// Only clear the autocommands matching specific patterns. For example, if
            /// you have `"*.py"` as a pattern for a particular autocommand, you must
            /// pass that exact pattern to clear it. Cannot be used together with
            /// [`buffer`](ClearAutocmdsOptsBuilder::buffer).
            #[inline]
            pub fn patterns<'a, I>(&mut self, iter: I) -> &mut Self
            where
                I: IntoIterator<Item = &'a str>,
            {
                self.0.pattern = types::Array::from_iter(iter).into();
                self
            }

            /// Only clear the autocommands belonging to a specific augroup. The
            /// augroup can be specified by both id and name.
            #[inline]
            pub fn group<Grp>(&mut self, group: Grp) -> &mut Self
            where
                Grp: StringOrInt,
            {
                self.0.group = group.to_object();
                self
            }

            #[inline]
            pub fn build(&mut self) -> ClearAutocmdsOpts {
                std::mem::take(&mut self.0)
            }
        }
      metadata: {}
    - page_content: |-
        /// Options passed to [`clear_autocmds()`](crate::clear_autocmds).
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        #[derive(Clone, Debug, Default, macros::OptsBuilder)]
        #[repr(C)]
        pub struct ClearAutocmdsOpts {
            #[builder(mask)]
            mask: u64,

            /// Only clear the autocommands local to a specific `Buffer`. Cannot be
            /// used together with [`patterns`](ClearAutocmdsOptsBuilder::patterns).
            #[builder(argtype = "Buffer", inline = "{0}.0")]
            buffer: types::BufHandle,

            /// Clear all the autocommands triggered by one or more of the specified
            /// events.
            #[builder(
                generics = "'a, I: IntoIterator<Item = &'a str>",
                method = "events",
                argtype = "I",
                inline = "types::Array::from_iter({0}).into()"
            )]
            event: types::Object,
      metadata: {}
    - page_content: |-
        /// Only clear the autocommands matching specific patterns. For example, if
            /// you have `"*.py"` as a pattern for a particular autocommand, you must
            /// pass that exact pattern to clear it. Cannot be used together with
            /// [`buffer`](ClearAutocmdsOptsBuilder::buffer).
            #[builder(
                generics = "G: StringOrInt",
                argtype = "G",
                inline = "{0}.to_object()"
            )]
            group: types::Object,

            /// Only clear the autocommands belonging to a specific augroup. The
            /// augroup can be specified by both id and name.
            #[builder(
                generics = "'a, I: IntoIterator<Item = &'a str>",
                method = "patterns",
                argtype = "I",
                inline = "types::Array::from_iter({0}).into()"
            )]
            pattern: types::Object,
        }
      metadata: {}
  81:
    hash: 14f1862c4645f5a40b095c7e5c39d7d3ac3acf43e219d58b63bd7e2357f7a14c
    path: ./opts/cmd.rs
    documents:
    - page_content: |-
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        use types::Boolean;
        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        use types::Object;

        /// Options passed to [cmd](crate::cmd).
        #[derive(Clone, Debug, Default)]
        #[repr(C)]
        pub struct CmdOpts {
            #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
            output: Object,
            #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
            output: Boolean,
        }

        impl CmdOpts {
            #[inline(always)]
            pub fn builder() -> CmdOptsBuilder {
                CmdOptsBuilder::default()
            }
        }

        #[derive(Clone, Default)]
        pub struct CmdOptsBuilder(CmdOpts);

        impl CmdOptsBuilder {
            #[inline]
            pub fn output(&mut self, output: bool) -> &mut Self {
                #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
                {
                    self.0.output = output.into();
                }
                #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                {
                    self.0.output = output;
                }
                self
            }
      metadata: {}
    - page_content: |-
        #[inline]
            pub fn build(&mut self) -> CmdOpts {
                std::mem::take(&mut self.0)
            }
        }
      metadata: {}
  82:
    hash: 1caeca33b3c0deb20d9d5bc12805b04b561bf559edd0a65261cad3a67d777af6
    path: ./opts/exec.rs
    documents:
    - page_content: |-
        /// Option passed to [`exec2()`][crate::exec2].
        #[derive(Clone, Debug, Default, macros::OptsBuilder)]
        #[repr(C)]
        pub struct ExecOpts {
            /// Whether to capture and return all (non-error, non-shell |:!|) output.
            #[builder(argtype = "bool")]
            output: types::Boolean,
        }
      metadata: {}
  83:
    hash: 1badf5a57566d38ce3d39be04cf2cf574bf5e925c9ef15692593baaa51d8c167
    path: ./opts/get_mark.rs
    documents:
    - page_content: |-
        /// Options passed to [`get_mark()`](crate::get_mark). Currently unused.
        #[derive(Clone, Debug, Default, macros::OptsBuilder)]
        #[repr(C)]
        pub struct GetMarkOpts {
            #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
            #[builder(mask)]
            mask: u64,
        }

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl From<&GetMarkOpts> for types::Dictionary {
            fn from(_: &GetMarkOpts) -> Self {
                Self::new()
            }
        }
      metadata: {}
  84:
    hash: 79974dbf42fa78f77599da0d664ca9b3d560c4000d2aa7cfd5cda5bdd64c1e11
    path: ./opts/eval_statusline.rs
    documents:
    - page_content: |-
        use types::Object;

        use crate::Window;

        /// Options passed to [`eval_statusline()`](crate::eval_statusline).
        #[derive(Clone, Debug, Default)]
        #[repr(C)]
        pub struct EvalStatuslineOpts {
            winid: Object,
            maxwidth: Object,
            fillchar: Object,
            highlights: Object,
            use_tabline: Object,
            use_winbar: Object,
            use_statuscol_lnum: Object,
        }

        impl EvalStatuslineOpts {
            #[inline(always)]
            /// Creates a new [`EvalStatuslineOptsBuilder`].
            pub fn builder() -> EvalStatuslineOptsBuilder {
                EvalStatuslineOptsBuilder::default()
            }
        }

        #[derive(Clone, Default)]
        pub struct EvalStatuslineOptsBuilder(EvalStatuslineOpts);

        impl EvalStatuslineOptsBuilder {
            /// Character used to fill blank spaces in the statusline.
            #[inline]
            pub fn fillchar(&mut self, fillchar: char) -> &mut Self {
                self.0.fillchar = fillchar.into();
                self
            }
      metadata: {}
    - page_content: |-
        /// Return statuline informations from
            /// [`eval_statusline()`](crate::eval_statusline).
            #[inline]
            pub fn highlights(&mut self, highlights: bool) -> &mut Self {
                self.0.highlights = highlights.into();
                self
            }

            /// Maximum width for the statusline.
            #[inline]
            pub fn maxwidth(&mut self, maxwidth: u32) -> &mut Self {
                self.0.maxwidth = maxwidth.into();
                self
            }

            #[inline]
            pub fn use_statuscol_lnum(
                &mut self,
                use_statuscol_lnum: bool,
            ) -> &mut Self {
                self.0.use_statuscol_lnum = use_statuscol_lnum.into();
                self
            }

            /// Evaluate the tabline instead of the statusline. When `true` the
            /// [`window`](EvalStatuslineOptsBuilder::window) field is ignored.
            #[inline]
            pub fn use_tabline(&mut self, use_tabline: bool) -> &mut Self {
                self.0.use_tabline = use_tabline.into();
                self
            }
      metadata: {}
    - page_content: |-
        /// Evaluate the winbar instead of the statusline. Mutually exclusive with
            /// [`use_tabline`](EvalStatuslineOptsBuilder::use_tabline).
            #[inline]
            pub fn use_winbar(&mut self, use_winbar: bool) -> &mut Self {
                self.0.use_winbar = use_winbar.into();
                self
            }

            /// Window to use as context for the statusline.
            #[inline]
            pub fn window(&mut self, window: Window) -> &mut Self {
                self.0.winid = window.into();
                self
            }

            #[inline]
            pub fn build(&mut self) -> EvalStatuslineOpts {
                std::mem::take(&mut self.0)
            }
        }
      metadata: {}
  85:
    hash: b0e49de1770a0f8b58edea13de18a9565c4c71a7d9191f720591c51ef59e979b
    path: ./opts/echo.rs
    documents:
    - page_content: |-
        /// Options passed to [`echo()`](crate::echo).
        #[derive(Clone, Debug, Default)]
        #[repr(C)]
        pub struct EchoOpts {
            #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
            verbose: types::Object,

            #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
            verbose: bool,
        }

        impl EchoOpts {
            #[inline(always)]
            pub fn builder() -> EchoOptsBuilder {
                EchoOptsBuilder::default()
            }
        }

        #[derive(Clone, Default)]
        pub struct EchoOptsBuilder(EchoOpts);

        impl EchoOptsBuilder {
            #[inline]
            pub fn verbose(&mut self, verbose: bool) -> &mut Self {
                #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
                {
                    self.0.verbose = verbose.into();
                }
                #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                {
                    self.0.verbose = verbose;
                }
                self
            }

            #[inline]
            pub fn build(&mut self) -> EchoOpts {
                core::mem::take(&mut self.0)
            }
        }
      metadata: {}
  86:
    hash: 28a02f11450f0f22fd4986bf9ab93ab038fa3a9803f48f3ea4022fa410afcdbf
    path: ./opts/get_commands.rs
    documents:
    - page_content: |-
        /// Options passed to [`Buffer::get_commands()`](crate::Buffer::get_commands)
        /// and [`get_commands()`](crate::get_commands).
        #[derive(Clone, Debug, Default)]
        #[repr(C)]
        pub struct GetCommandsOpts {
            #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
            builtin: types::Object,

            #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
            builtin: bool,
        }

        impl GetCommandsOpts {
            #[inline(always)]
            pub fn builder() -> GetCommandsOptsBuilder {
                GetCommandsOptsBuilder::default()
            }
        }

        #[derive(Clone, Default)]
        pub struct GetCommandsOptsBuilder(GetCommandsOpts);

        impl GetCommandsOptsBuilder {
            #[inline]
            pub fn builtin(&mut self, builtin: bool) -> &mut Self {
                #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
                {
                    self.0.builtin = builtin.into();
                }
                #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
                {
                    self.0.builtin = builtin;
                }
                self
            }
      metadata: {}
    - page_content: |-
        #[inline]
            pub fn build(&mut self) -> GetCommandsOpts {
                std::mem::take(&mut self.0)
            }
        }
      metadata: {}
  87:
    hash: 9797c8b07bb6084a404d20996c88d812744bd777ac4d17474d09795504249b76
    path: ./opts/get_autocmds.rs
    documents:
    - page_content: |-
        use types::{Array, Object};

        use crate::trait_utils::StringOrInt;
        use crate::Buffer;

        /// Options passed to [`get_autocmds()`](crate::get_autocmds).
        #[cfg(feature = "neovim-0-10")] // On 0.10 and nightly.
        #[derive(Clone, Debug, Default, macros::OptsBuilder)]
        #[repr(C)]
        pub struct GetAutocmdsOpts {
            #[builder(mask)]
            mask: u64,

            /// Get all the autocommands triggered by one or more of the specified
            /// events.
            #[builder(
                generics = "'a, E: IntoIterator<Item = &'a str>",
                method = "events",
                argtype = "E",
                inline = "Array::from_iter({0}).into()"
            )]
            event: Object,

            /// Only get the autocommands belonging to a specific augroup. The
            /// augroup can be specified by both id and name.
            #[builder(
                generics = "G: StringOrInt",
                method = "group",
                argtype = "G",
                inline = "{0}.to_object()"
            )]
            group: Object,
      metadata: {}
    - page_content: |-
        /// Only get the autocommands that match specific patterns. For example, if
            /// you have `"*.py"` as a pattern for a particular autocommand, you must
            /// pass that exact pattern to clear it. Cannot be used together with
            /// `buffer`.
            #[builder(
                generics = "'a, P: IntoIterator<Item = &'a str>",
                method = "patterns",
                argtype = "P",
                inline = "Array::from_iter({0}).into()"
            )]
            pattern: Object,

            /// Get the autocommands local to a specific `Buffer`. Cannot be used
            /// together with `patterns`.
            #[builder(argtype = "Buffer", inline = "{0}.into()")]
            buffer: Object,
        }

        /// Options passed to [`get_autocmds()`](crate::get_autocmds).
        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        #[derive(Clone, Debug, Default)]
        #[repr(C)]
        pub struct GetAutocmdsOpts {
            events: Object,
            group: Object,
            buffer: Object,
            patterns: Object,
        }
      metadata: {}
    - page_content: |-
        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl GetAutocmdsOpts {
            #[inline(always)]
            pub fn builder() -> GetAutocmdsOptsBuilder {
                GetAutocmdsOptsBuilder::default()
            }
        }

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        #[derive(Clone, Default)]
        pub struct GetAutocmdsOptsBuilder(GetAutocmdsOpts);

        #[cfg(not(feature = "neovim-0-10"))] // 0nly on 0.9.
        impl GetAutocmdsOptsBuilder {
            /// Get the autocommands local to a specific `Buffer`. Cannot be used
            /// together with `patterns`.
            #[inline]
            pub fn buffer(&mut self, buffer: Buffer) -> &mut Self {
                self.0.buffer = buffer.into();
                self
            }

            /// Get all the autocommands triggered by one or more of the specified
            /// events.
            #[inline]
            pub fn events<'a, I>(&mut self, events: I) -> &mut Self
            where
                I: IntoIterator<Item = &'a str>,
            {
                self.0.events = Array::from_iter(events).into();
                self
            }
      metadata: {}
    - page_content: |-
        /// Only get the autocommands belonging to a specific augroup. The
            /// augroup can be specified by both id and name.
            #[inline]
            pub fn group<Group>(&mut self, group: Group) -> &mut Self
            where
                Group: StringOrInt,
            {
                self.0.group = group.to_object();
                self
            }

            /// Only get the autocommands that match specific patterns. For example, if
            /// you have `"*.py"` as a pattern for a particular autocommand, you must
            /// pass that exact pattern to clear it. Cannot be used together with
            /// `buffer`.
            #[inline]
            pub fn patterns<'a, I>(&mut self, patterns: I) -> &mut Self
            where
                I: IntoIterator<Item = &'a str>,
            {
                self.0.patterns = Array::from_iter(patterns).into();
                self
            }

            #[inline]
            pub fn build(&mut self) -> GetAutocmdsOpts {
                std::mem::take(&mut self.0)
            }
        }
      metadata: {}
vectors:
  0-0: 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
  0-1: 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
  0-2: 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
  0-3: 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
  0-4: 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
  0-5: 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
  0-6: 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
  0-7: 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
  0-8: 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
  0-9: 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
  0-10: 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
  0-11: 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
  0-12: 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
  0-13: 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
  0-14: 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
  0-15: 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
  0-16: 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
  0-17: DLs4PX6ztr1Svdm7RmVmvQPVdj1puzw9cl5guwGmCb3DcSQ8TxNvvffR+jtNoO68y9tvvUnTwjwl7Jo74oReO3QmQz0zJsi8HaOavJ1pxTuX5GI8JYWDPOVZYT1zgJO8P47bu+nuJzwhf589DoHyvMAXRb1lrnG8e6t8vYhXnzxNOAm7mz12PLn4Ar2Xu+e50n2eu8rL2D04P8y90vRyve0V5r2IqJ29WejGu8pn5jzIPki9yqdVvRwpGT2+t0+9GQjOu7Fupjwemwg9/qonuo4RQzwHJEg9FoW0vd2ohjwLA7G8eThuvK3RJ72ZwNA8M4mbveRr/zwD3+a8eWfdPHxWibysoES9qeurvBUtAD0N2Gk8MRYGPFjec71/aZM8ukeFPKQoVjt9IeA8mvcmvUyj0LyVwSY9zPwdOxv7UD1EywG9j9E3PSUqPT0ONR07Y4devTxopbwIey09GFyVPM21hTy/nX+9ovw9vCs/Pz1d+EW9lmR9PVYqcb1JIcc8Wr3jPP6lOLl0eRe9mSuWvYpvp72APXk9u2jhvKmpIL2ZFLC6mjEFPSzLrLveulg9l/W0PPLp97ywEsy8JsMLPWQzcr2UUwe7R+QCPZMJBz2/9Fm9iU5xPPAcG7ySz1w89qrEvbvXiz1USay8pYlTvUhhFz1ARpQ9kZ89PeIktTzDEb08XUcwPTXqx7x4BAW8q2UpvOStKz3cbQo7b9lyPLjX57wLx8285hiyPG2JSz3grfq8yXYfPP/iwrp8TCq9TBwJvXXww7xDFQI9U1wHvaeXPD3wo2q8xMaTPR86ejyfrQa8/YyxPQfF0jy+SlE9CRQYPU2xBr3ya149Op4ave3ELb2slBY9TwB+OhkIsrxL50s970qrOn0z8LuZxlC8drcTPHsuMz1fyUo7JN1dvGV1Zrwu4g296JFePYjBTD1DNWS92Pq1O0hQaTyiyhE830YhPSNJg7wa3Jy9RfwUveKzLT3SY2A9MDQqPWYy8byTFIC6FEvHPEKnzbvJNto8mBoTPbFTarwFwua7fTA9vQLP9rvOjds8jUZ+PL2ewrydHBI84AhPvKjblLuPxTY9+2/YvJOEurwa+Ii8uqLQvI8ClT1wRRM9TEhlvcT8Er1eFqY70X1uPSOU0jwiP907UiToPMIivz1B0YS8PQuUPEhMRjyp8+S8UUjKPHZElzwvIdy8UOEavW5SS72ZOSM9F4AXuikWKb0TLoE7iQlbPN6CJL3BBt88JohmO7+RkDwLZDQ9juTbPLLPvry5tRq8aHQ8u8sBdjzH/Ho9F9yCPZyzlLzuQY85ATpDPdyDFDzM9wm8bGraPEXq+Lx8bk+9flcNvXeta7xusI28Tf4cvaFepb0y3OA8p9awO9y2ljp2byA5aLqQO8qQIL2BI0o8kExbu0kxazwKt+O6adiRPDIGRjtdgRC94wvhPLBn+jx7dWC9P4q8vG1ft7xt1EC9wZqzu43AXj1DeO+8wAo5vH9ADTwLSRC8II97vcB09Trqf0S9yz2hOxjdZ7yDFxg71rR0POP2k7x9+UM8pcBjPfU0MD239Ky7VxmEPcbdUTx2jBK9J9zsOdhoizuMERw8eRYfPM9LIrz9zsi9kQt5vFuc97tAev48Nwwhuwl0t7oE8ks8quZ2PEJhDzymsxK9aUB1PRD/QzwfmIe9VmDnPGjNlDzlZa+8vYJtPcLVBT337iK8iB+2PJMDFz0QiyU9sK56vYzWd73VYX89qV2luzhz3Ts/f+48vITXvHleLjzVPBy8bzSmPLudlbxh/vs7AMSlPJl9gTzV8mS7lvrAvJq1EDznoAC8y8RyvRDTurwE1JY7HAbXOpYgAT3zgPs8/2mcPXrWMb2kiwO9U5McvfMX4ryN/u88IBdxvaMqoDwciJM8K8AYvXupizs7DUu97SNcvUzRkjyiTAG7lX+guyq/iL2yA1m9GvEYPJWavDxR2J49X+mEvFB3FL2IUzg9jzuFPMidRjx5Rby8wcjwOxefYr1oMAS98hzSuxjGxTzubQ09CK1ePIBdpbzZYxe9ZzMQvetP5zzvE6q81TG3PDL1nLzyYVK9lw4KvZCk2jwdoau85MiRPRy9srvXDYA7uhhMPGqakTzz8MY89jFPPLKqqjzJyIQ9cpjlPA/lqzuyVMS8imz2PJkEJD3TsmQ8aOzzPFcwAL4NEg+9SGDFPE0BR70AiZK8TkTGvFjeBz0ovLw8AjbkvFa6sTyIa8M8xd7BumzeQr1t83Y6N/GvO/fQHz2DMKY8zWJePYcntTxEZGK8AqAePZevfb3H0hM8OtCYPeL4ub1f0BO9Uy5Gve2MWjy6IA29hkRwu827aD1rAqA7iiWLPVArlrzJEpc8K4UTPDE6xjxP8jk98VEAPBSplLzpJ1W7r8/4vBygJrxVE1i7CFsIvSlnPz0Pgg+9Xy+tvfy3gz0wxcG7DWJJvWHqMDwY0ig9dcKuvJ66FjxCc4a8Q/LvPHjUgD1XduC8GAiMveOtEL24bm+9asEPPeiUq7yWjze95rQvPfKdFDoGR8G7YiI6PCOqa7zdIOW81VVnvQfJxbxZFsA6unl/O7wsOb2JoDK9G2MLu8HIX7wB3QU8e4sIvdxJHb3TwrQ7y93ZO1u3O7wUOog9Ym4FPcJUhTvMNUC7ROXnO0qPATorIPu7tA5qPSG8I73uFiu8GwemvI6wHDxKRIG9N3n+vFI0ezzLAug8virlPFOMtDyUpJI8rdNYvTztAz1/+G49PG+EPCzMZr2bCD08qsQhPL28gbsCYmK8RKmqPabM7rxu9oE8dwvaPSnc6jwXtw28DoW/PEwHhzyuLzQ9Lf1huyS+hjxACYk9vZCfPNczY71yyyA9i6Y8PSCcOb1K4Rk9PjawvFPybb3TmJo885h9PUtvpjxU1yE9upyPO6uVBjwIiGY8Mm8ovS4LjL0jTog8oxlQPEpCOL0+EU88wF0CPb/MBz0YmfK8zMm2vFBANL1TQAE8iRH3vLYpQ71MuwK8sVbWvNv7f7yetiS7YDSNPUArWj15Riu8aNryPAcy87yfD389FdDHu/jV0jtI0Gg8QL/nPEnhR7oZDIs8HzQKO9gajL0HXTG9jDdDPJ0XcTtvMSy92/laPCMpOb06n1M7UUOavFW4OTxwbtc8yPQfPcqcTj2T5gO9IPh/PFHxwbtcnYu9Ij4UPcEYqD1Rsuq7l3LyvHD8Y70ljVO8ILEZO0rWrzsukQC9EMkRvZA4irw0xeE7XJ/lO42p1LwSdsy8T1uQvIHSPD3Shtq7/s6wPDNJcju+2Rw91GGaPDRSET1qH/I7W5EXPdY0sTzKWGu9983uPLJJF7wBYwm90tK9vBTUvLzZ1Zy8JKDSvNRlQjzQfyY9RdLfuIFSmLzGLoW9Gs+qvCw2gDwtd7i8pvg6PU9Aqr1Z/RA8yCZzPY//iDwLh4Q8dZHtvDvYAjxgNHU9l/SBPdPb37vS2O86YuabPIZHHLvaEsI8nnQMu3A3erxTXni9vYQ0Paug8juzRkO9VVAxvR6WKTtoq0e95tKyPI77sDqBwIg8S8wAvdZ4wrzX/Cs4t6YdPDzbqT15ITk9k2qxuoNW/7sd/Lm7AEKuPEOSFrxW4j09C+gPPDre2ztlxAw7dGNkuqHgtrtMc0w9ImmYPC/cn7x0ixm8wg69PM7H4Dz6oaS9BdM8vajFPDwUWiw9sJ+8POghpLxJ0C+9TRSKvC+Opz35Vcu8J4vqvEVXxDzil0G942PVvFAWg710dQG88LQoPcGFezsp1r28+f0LvcjzNjygFoq8FOMyPfH7nTx8vkS8AbCbPOW8sT3CjLK8wSo7PM2YJLy0NaQ8wWeSvItn6jzzKfk8PRnZPPRKEj25Vsk7uyxbvaSQnDttzhM78ZoOPFKGC7t5VWK9QvpOvdZ1MTwZCOq8HsnWO76Z3Txdcz+96PSdvfnwwjypZja7Nsx1OvyhxLuIxAk9/5WlPB7YmLyvanC8KqkRPAWe9Ty5bp88Gi1LPdzaRr2ScZY9cIu2vLanoTrRVoc8Yow3POZlSDwMH2A7d2ctPTFMGr2jbkc9aq4NvVGkMD0G79S9nfMNvQvonbucEzm9
  0-18: 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
  0-19: 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
  0-20: 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
  0-21: +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
  0-22: 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
  0-23: KHsavTrPvr10Zqm9/yY6vJvz8zuCjI49k6bLvKBN0Du1wOE9OiEjvd04Kzw8aAO86Cl7vHBLijzKam28VlgSPAQ+cj3ADIk9pDEnvUwoCb3B/6S8N86kPGViZT108MQ8oAKGvM1WFj2NlK89UKEIvSEbobzGQC+9deQrvfL03zwjhQk9QWEPPLqWsbtZLAK9hrasvJDQgD117L284mmDvJbkFb1yfoC928wwPStbobwi1Uq8lOAyPSIUWrzh+/e5rtyVu/VsIz0oXF08InryO1Ac2zwgcio8QZCnve/XHj16hxY8/jfnvF8T6bzEEou8UEWYvdFYOD1IRBQ9ss9JPIHNs7vivAy9T9ApPAunILznUly7cy+qvDooX716E6I8CPoQvbVQhDxgjPw8fQ9uvBS1YDrQ1Fc9NU9QvF5xAD3NT2c9wX9mPAoeubtlEmo8DlknvU9WAzyUJok8bPFKPJc5urxFgVK8Z7/hvJGSTD1XlpK9VaafPW1b8bwEKeQ5KEvcPBdN17ziYCK9KKpqvB4ytLxnN4I9CclWPRm2JL3fVNa8uWs5PJt6SLxrmbc893NxPWaji7u7u8Q7LJo/vPVO0LxBNla8ErGjO1pX+TwjKZa7/Sg7PZ+eMTu44Ae8WxlhvWdidz2HmXC9IDsRvfpvLD2ykOk8j5KpPI1ayDw2TTo9FHRaPBKW+7xT3h87kyFzPIi0fz0cO4g624Q1PUQfbDxXAwi99GgcPBPkCT2ERW88gjqGPCfSDj3ojwu7HvMKO+kjt7z6pWU9lRSNvN7kEz2CzDW91FgYvJEbDT3/pAG9GpLbPSUQ/Dyw9j09FmKqPMeqjr1u5Cs8+c4xvbTlrbwz4cM8ivVePSmaHTwRP8K8N7i5vKflQTy2qwg9CBsoPJLBoj0gJ/Q88jn6OR+pHb2K62O8q8HiOw//r7sq1ZW9+ws4NejfUjxcRcW8rSHMvE2swrz22rS8gq/hvGWX6zzY5IE9KC8GvKJe5jz4fAG80XJJvB3RdLxRR+Y8xO1dPB2IdbuEvoE8VcoQOtoYib0J/I09/bVHvQrVL73yD4M8j8DRO5rohLxsKnm7wNFrvUcw17zSrAU8XuJUuqb/GD1dwWa8xtKCvF+8hrzmdQi9x6iHPDi/dbwFOO48jdXaOmGIkzwEUQE9SWCCu0WM2z28nwQ9EAgHPafYWr3d52k8+F2fvIfnYbqvCjo9Ki2WOpnbKb027Fo9Ry9dPF3kD7zAjIQ9cPwLvRyFFL0Y04O8Qxd1vXBmBDwfvLk8edoLvee5MT0YugQ8xa50PHuoB73sTCs9eTeaO4/SaT2D9S6911U6PQbqBz2Q6Y693jNSvSv6zDy51Ra6rvmGPffZMr02iUy6eY2gPP32Xbu0u227lB0DvC5woLxiFUg9dCrEOyLErLwbgI28x88ePSHKQzw/Dye9a2+/vBBeqj3HuNW8KWUCvUdyZDssZpu7ADoQPFQoiD0rSVm7qmgrvOPBZT0zk0y7zhlrvIThYLyEbsS8xIBlvAHIlzvQwsi81li9vDBZor3gRZE9UDQHPfrTGD0fy2K8554OvZMLcbwlC9S9Q1Fmui6z2TxPrQQ9zd2svF9mcLztC7e9N8wkvZvdYTq0KBS9OqnMvNhHmjydsFC9SPlAvZQyML3Rpak7ICI3vE72bLyuXU69ZTyivDqoNz2mKn88MtXtPJCHIT2OBg87/d/qvJf50rleqO06EXDsvSSULbys4C09xfCduwcfurszuTU79E+rPB+JAztP6eS8LJK9vNv6aL1i61y8xGCNPNPODD2XbYc8ANilvKEIJL2j/M86rziOvNt0izkr3Xk7yR+BvbS97DxYq8E8JT6LPWb/67zlrdg7HnzRPEQXDbzO34G8KfWHPTZiGTt4UCc96eDSu3ClFLqVF0a9ZqpTPOB8ajx+QJE7o0msvMjXvrzWnoq9FQwPPVOgVrtiJoc9lUaePZjt/7yYyow8VRIRvVBvMj3SAA+9fDJSPKElB70WY8a8H9LovJUvhjvFkD68nav+O/1+jbs+BZq7OsgXPBLb4zy+Nhe9eMC4PIqoyDxAV8e8jHkmvXS/cjxBWec8INZpPTdyj7sEeTu8+fbaPGv0L7zSHfS80+wZvAltpjyl1MA8uN4qvRj3Iz0eQY48KPewPM/PEbvh7Cq9aNyNPBaygL3M5U07MWDWPOYNEL1fYkC9WaGIu3K3truBswa8Z3aBvUr5urzMoJ48IbLwvDonZL29lzq8sjRWPVC0gj03YZM8/dOBPKjp/LvgzMo86ERyPZkjvb3oCqE85/CSPF7zRLyr4gy9twt9PNpnAT091+G8yAETPaMAzD2pKnO9g/kFPbAHOz1GLdo7qEpFPAu1Gz2iBBo8IbFjPW7d67zXk1C8ryE0Ox0JG72XLqI8oe1Gvbq+Xj3ljnW9hpHevemUtD1wC4y7qH6OvFToL7zvH5U9yujqOoCypLxREOu7WwKQPGkMgzxfoJq8YqBrvMeIiLpm/dq8ujPCPNVMuLvkP5G5B5drPahfU71z/0o9TUwwPclfi712iGm90GsdvWg6qb12GoI75x0ePSlWGL2Y4v27sS23PIL4orw7K9k8eEVhvCykI703gSA9VofJPI1+5Lwg4Vo92RhHvfw87jr01Sw88rQmPepCkrweKSy8TQ57PYFhVzsMdLS8nDnRPMmu2TyWWfw8dYacPFoVQjwK6w29zMztvLEgpjyHRnQ94kSovYdNTT0kGWS81OkVvFxXk7vDQ4C998YzuloQHj3r4cQ8GPFXvGDFib0BZEA8bRW/PdNbvTwLKI85CDUVPP8yaT2cJW+688mZPHf0Oj1HyjC8sljBO2e0PryUmFE9wZcLPXD4lb1nmko9FHwRvYN9rDxcyw09zMNJvMiX/zzdC2895mspvdRX7Dwl5wm9YqDSvCOfAb6A7iC9NoGuPNr08TwTFcc7I16uPPE1hrwHn6O8FAcfvaSPCLvlUJa8BDNbvIcQEb23fla822fJvauig7xAaQy9/OvJvKL8bTwLCMY8Re/APMZY1jzzLEU9/boAvIoXirxaEkI8vYA3PKtv3rxCx4M8IPAfvbKjKL3zqQ89bIn+PIJ52rz6bLc6gIkDPI3uFL3aZIk7MaesvTNtGT0jUhC6gtX/vEMWabzkxxk9V4IIu7KO67znCYw7NCi2OxH/jz2wQ4W9dLisvLGUjjykAD696M90PH/YQT0/shC9+UFfvQHShjoEGuI8TOZ2vGiXsTv0Aps8COm5vGjG2z15FpG8bSUnPVnkdDsteJw8lyu1Pcz0WD395aK6U7dUPFacDDwgsUG9irAnPYzAeL3qC868xuD3u+a2jrwyG7Y8horlutXj1TkwkyU9lSQZPQSN2TvBeZ+819bvvPyZ6byBAKe9fCcmPSKogL1iaM28xANGvCBkWLwle5Q9UuA1vZrJErz8/oo8Mth7PSYsLbdlsYc8rLbTPA0JsjzJ8U09/2wRvDJFk7s7jjG83PZwPKsgGjwXn4q9M7zsvBOYLz396d+8f8mxPL5mHb3NhsU7ZKUlu4YQCb0M+xi9Yy2yOO6hLz0uhj286c7rO8qIhr1oRqE93H/UvB/SsDz9ubs8wFEwPNo2DL2Ol7G89kJMvRXVr7u5PtU8Ai0qvTC/Kb0r/oU9ge5OO5JbLjxrC1i9xdanPORJWDytfeA8r4Z/vAINzrw50CG9nq9vvNtFjzw3Zfi8lH1NvP2SlT2zqkG8J5L3Og0JH70vj8W8plkOPc4Npbz6KNG7DnFpvGLSMz11M/K5oCb1vKyxTLzOFcc7mh3OPC9Sjz0Qdhi8X/vqPEqkFr2tdcg8rgbLPGJcnLwmmiM9IerfupeVRbsURQ69Bu2ZvZ0gsryjUhg9NlCFPUp0wzpunmy8DpJCvZP4jru9IIk8ahfevKSdezudNEO9JkU3vZewB7tawwu9/IB8vHbIdbyEXW28hFKMPfbdvryzSZM8i7Q9vAdYsjqW76A8n1RVPcpyzDwfr+y8ymP/vE6jkz3j8AU9XxZQPIyzkjziaUO8+4szPR248rzwVyM9EDlNPP1zZDz6yw+9kRuGvEyGErxjLbO8
  0-24: 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
  0-25: 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
  0-26: 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
  0-27: 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
  0-28: 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
  0-29: 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
  0-30: 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
  0-31: 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
  0-32: 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
  0-33: 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
  0-34: 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
  0-35: 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
  0-36: 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
  0-37: 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
  0-38: 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
  0-39: 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
  0-40: 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
  0-41: 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
  0-42: UF1qO07oB71uanY8kRy+PMKtBz0FUio9lP7fO4YKyLxCMRI9EmzXu+ny4Dy+Atq7E86WvJg8i7n0++G86x89vC3YoD3XtMu7fZ3kPDqx+Tu5LYC8D9HUvFNwnj1S+SA89rfJvCx3trudjDI90qv3vBvWrzsuVAa99RafvFSW3Drwunc8aUJSPb5dnjzHf/07uPgzPVrDW70KgP67lzgZvWc9zr2LjUC97fBEPQXc7bws+OC8FA2RvLjFRz1qYTm9xM0ovbLXAb2kNTC6HwgcvISNxbuQVJI8vbkHvc2sij3uR988B+WoPOul6Dt9SZq9SEYZvSo8ybvO5KE8u+IxvJA8/7xKEQy9DZSLPe93lzxjp5M779VQvLEEAbyOFxw9fsqLu3kKuLwnI9k8Od+kOQjt67yhWvg8kFSuPQrZpjzBFlk9h9+BPYTOVD0d6y+82ixgPKzQAr2agEy8bh0sPb19Dzwmqsk8KwmrPBV7ID3vcd48MSkSPXyZK70EdDc922BoPS25d70Qtqm8N0ahvVSnKb2EbLE9wLS1PLPZ9ruulq69CXcCvQkWqrviYAo81ZIPPFmNWTx2LQM6+igFvRTeSjufaRq96Jm2PfrJPjqoeii9dFE8vImuOD2nvhm9822qvLKKW7zcBza9xPZBvZzJzTyoivU9S8m4uzQHkjw+hRQ9FPwtPaf2GLx7pT47YFj6PFxuGz1OIHg9qUBdPBpFAbuQN4w8Ioj6PKWxPTzTl0I8kqomPU3j+7uNtPe3KmnyuO+Tlj2V/2s9/8HXuqSBgD1sP6I8ZE68PJb+hLxG/2A8hvmJPboT0jys2Bs8wC0OPQuP4L0Htpo98P0Qve6YGDwn7sK8/op7vGSoVzy2TpC86CwYPGFBjbwlmX+8tb4CvUTj/jyNfsQ8gTQevM8uzbzHChA848jYPIHjHj0Ie5C912jgPKVy8Lp8SD+8LJz5OyoFJr0PgxW9snUVPaohEz0x0gs93uEAPd19/Tx6esG8xQDUucZFiLwcU4Y7YzmhO6FbIDwi5Ac9yKqgvKbM7js+ekI8rxyovTwSib31qcC8qlH7u2maCr1kZYk8zUOAPXbcMb1QL5q8Jp0aPeSNGb1xdaa8TiFWvcCBMr3SAoY7WoAlPW/KLTwcqg29jzenPCWcVz1ihSM9kRxrvXmfsj08A009SiSjPSq4HLyFFJC8oZiMvd6S67xduSg9sqNdPU/i7DwtIU48ew2RvEIcITzNrNo8QDMRPU6rc72WCeq8Gx/4vAGM5DwydWq9/fBsvcB3n7sgjCe9K0+cPGOY0rzVxeC8bTo2vA+fFT05i/m88hZ5O5ciB713jDe9ATuDvXjUD71FtCK8Sak5PcPYdL1+wpQ8tnSePORZ1zxQ5gY9eMZeOqGk37t4/qc81JwDPV0esbxnwAi9h9GiPVpvKbvZiiC8pJ1kvZU2iz3pztq5samLvJCcNr06fhC9kCYsPVye+Twp6ec8Q1iqvGrQGL1+gO07r6GFvXlRnbyxKX48KbG6u53c8TyESlS9A1IXvXcaurxX2yq7F70+O4kkwzwETfY8mODHPHNO57t+DPO7/G8ZPJhewbzaTJ87/nv8vPtUDb1wvIa9FfsivcuAiTxKMKk8eIo4vV4W2zu+Z2A94mkbva0/DL3U+Y08Vh6hvA6DmD1WU009rJqRPV3RgzshF/M8TpZXu+ccljzl9RQ9y4nwvNWJ/7v8+567ndb8vOeKwLzZJF89Xd8QPO9sIzx1f7s7iuOyuzxT2Dy3vuY8s/jZvKBjuby9+FG9mQMTPa5+oTxyC3W9wOhCu8KNCj05mz67JpH6Ojf8tTvNRW09BX0Wvfs7UDx0/Fy6cuNLPQzmHb0jzsG8lds5PcPUKrxvXCW9IsE1PKZPGD3rfwM9xEu2O2iXbrvF7Zq8nogOvQ/9cDpIsSq9V5jmvNbGi73AaCC8LYkHPLjLDD0SXL08lvECPZ5uGLxVnjg8mLrHvI0P9LyVRBg9LZmMPQ7rhL2yW968B3iQvXecab0gm768qZqtO6Sn9Lk+cvm8J14DvbTbeTyDQJO9kBGTvK2a/LzT+ra8UOxRvZWj1Dw1SNo8tIOlPR6EhzyKssg8poz/vBdlx7yAgGA9g6g+PRzH0Ts4hg88tHGLvHnFkD3L1Le8kxSfPThPlDyQIh68wd+qvHIQMb0qmkC7nQiePCN54bzyAFK9fINtvP9ML71oEg498UllvJQJnzyBePe7WC2FvdAygL3NivQ8LeyHPWK7tTzPA4288W+gPNOaJb1LgYA9S1uaO82GoL2rItA8wqlrPL6vpb24uC29aPQKvb6vpTqFdF48/lcWPb6o1TwO01M9oBUAPVFqpjyvUls9FVHkPPDfcLtm1o+7fX50u6Hdkr0ybYe8u6eevCmtVLzWgh69YOGWOgKW9jzmPeS825A5vdutQTxFVzS93g03PYvuv7wAH9I9SmreuYw3XDyS2Uq9jxZTO9YNIrxTFpS8i6w4PKZ/ZbwlcHO8LTDRO4SY5rsn2/K8QO5pPY3CEb3FDAk8wkZSPTppcLwaczO9+bUYvXiARLzJwus8GOaTusLxx7zEB2c8iWO7vBT70Lzk18o8ZZKyvNH6/ryRARk9hhgEvUJTdDsiUdI8a0xWu/bBwTwG0h88VaQ5vJ3yGL1FHQm8HSj1PEvCIrxbZvW84Uy/u9S6cT0JB+48uoievNEIsTzfxDm9Z+IivRqrBbzW6Cs8q7KJvOZU9zsGHaK8Oe57PCLyRr0Lpfq7j2NGukR1NLxX21m8JE0OPN6Sir2VESQ8AIYvPQzOUz24XQO9pC2SPIDWiT2d37u8cEJ2PfnoFD3NIoE86fYsPTmGuTrje0e8q6wXvQsU0jubE3E9bCTvvAubrb2J+h091fmtu3xlTT1oYlc9/qUcPe9QO724tw2820PzvMQ+tL0R+bO8J3m+ugGz17zyALG8iO3LPQHGNLxmrai9CNC3PCcvQbw1cl08V86TvXegSj3ALKm8yVxMvV1m2LwVm3S9YmShPPwb2rwO2H28nbarPMTXxDyjXh097m0wvXX1hL0WsdG8Jp+gvL4v97vEqA890PunvFZISL0dPlk8XX0CPf09dLu7l128bUCauxi0sL2LmLc7i6mavYgbIzzrw+Y7u+IcvWfC2Tw8FJo838+MPJA2GztOajm9N02oPCfncj2WjD29Hw/dO/cHvjzwUVm9WPqWPRYHnD266r48tMx7PTcNLT31JAo7j932vB8OMrw5qus7xi6ROheIFb2Takm997YnPBveMjy8O+y8iWdjPbw/kjwvEzg7fqhlPf52RDwt8iS9jIYyPShZLT1epQ69K/dZOyjVFrzpHZ+9AZN0vIbcxroW+gI9bZcbvTUgKb2sLw49gk0mvT9Vibx3sAm95TYxPaFH/Du8/Wk8NpAcPMnW/jx/v1A9HIuJvO+YqDtN0rw7EMhcO9Wkhjq+bZg8ewcbvJBlbT0dNQi90DcIPTXbIT0fj6A7BRqsvQz5K72jLme8izgOvLP6Xjt3zLm72ousPLYIwjzToxS914FGPed4e7wTjqe8V7GgvcRgjz2qWQA9YC2bO3DCEb2L54Q88We1PBySlzsG2nU8xuXBPE7WsLyfQaI6RFz4vHJFML2meF+9BrOZPMUPJbuJMw697Duouxg9gj2z7ma8ogRFvVDGabuU65A8shzJPKEfvrzekbS8khWUO0dLEz3S8bY8XfrNvFDogT1m2fY73dMnvQlz3Lx4hJG8vHepOzFcF715VGe8ZeGKvFu/hjtKXgk7rmuYPDUqpjtTeWK8tHPCO5CZsj0oHcA7rF0ovOsM/Lu5HPk57Rg/PXEqOzwQ3jA9Jm07PJ4adL2lJJs8uDKavR/LYD3avKw8Osp1PF95ybyF+Ta9KAJUvQuVJjzEYRm9XidDPenxWD1+8tq88GQGPbyujTsmTZI8g5hoO1DeZrznJBy9FVVFPfZeGjsALoc7nx68PRrsGT37fnQ89eOoPXqcCboyHaM7l/d5vTNoOD1d9pK70KqbPNV4ibxF9HS8hRQZPbXPOryN1lO8S+9XvWVOez1bbSK9gz0APPp5Xjx6z+88
  1-0: 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
  1-1: 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
  1-2: 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
  1-3: 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
  1-4: zf7tPN90Bb6D3la9IfzbO7Q3gjyXmTU99gydvA1E17xOxTQ9nyyIvcWxBT3viz28KV2lPMMgVLwD0Yu9rD3fPDRpID2rXMc8QqaUvP0cWj3AKcO8hmVWPEkUpTyX71c9HfMBvAXJOD0NY5M9XafPvFUYuDznjOc75eIfvXRn7rxgKhM9ATDnuo5sCL0uwmu8zXJ8uQUNoT2ar6C9dReKveaHa73xB669UTfnPB+I67xoNjA8VvgMvcvtsjxSPZA86JnlvJNqZDsAvro871cLPTRlmTnKLwS8BKw+vbMmnT3pC4Y7P8jtPHw8+Lx3raO8D5NBvVXO0zwzrRm82zGAPAvlYLv33M28pxORvF41vrmA4BY7gmlou8opE71M1SQ9N303vCub+TsWB0A894P9vB6AVLyP/7k8JmJOPFsm9zsS2i09qwHIPG2czDxyO8o7IRJ7vNexo7xsPmg8sO3OvMYG4rw0H+o8twwFvYWfOzy2UqG9CPO2O29v6LvK0M+8iYBzPWeTDjsbOBm8lCPWvF+OjryaDbo8f+VDvaqY3rzFcOo7BF4OPckkCjyfiRc9cmfrPHxeBT36ukS8ZH1sPWE1B70IdL28qgJAPI4H1Tzy3Yq9rraiu2pwqrxB8bM8kY8evJf3XzxHhxK9AbNRvUmcCTqg1lc9OuZXPR93kjqhmis9smqFPFfxNL1Rxgo84bIOu1NqET2Mctw8TbdJPEOOTbsbDSO9W30lvfiI3jxMcym8w1WyPNJDmDwFvso8jjLiuqBG0zxFI3A9ERMCvY1NXTyoP2i6rbM9PBraEDzSp5m7u5SXPSs+njwgQ4w9wturPUKMpLwpCFI9SeMwvXeRDr0vFSA8/n0NOZY4jLypGc08SWSdvOE5oLwFf0Q9PKBHvcpiaT1Zq5E8Oi+XvFZUJj0Tjpg7B0MAPTGuoz2H2pi9fPvCPNO6ETztgMw8XQiCu5FOLL1BFX08qA8vve/JWbuCgLw9/sICPYbQN725D448uROnvGSUPbwECmI95gZrPXAP27yx20g8xWIUveAmFL1VFFY9ldFUPN39Br1LxtU7lA/yu4yllDy9Use8HchCvU0jKDyZD5g78E4jPT+zPDzxhPU88yppu/gi37xJnvG7BbP5PG0ySzw+oG68ldnOu3O7LD33qZY7+PJWvMu41z23SpK9Sj0wvTd5tLuwrUO9TP0EPVNJvztYoI68yAUdPetma73qBbu8XXFqOlnxszwBvBo8S54cvcKz/rvHwZI9V2UlPdM+/zuwp6K8/5GTvBQvND1p8GA9tpGVPYHLoDwgaKw8sMnFPMQahD3W6C+9U3W4PHLujbwUIr28pKlWvZ8dx7y577G78O3HvB8/9bwLxCu8dyYyPROpw7uxtKo8Ssd9vbuzFjxk/TA8Cio3u+IbGryobqO9K417POL5brvBUoU99g7VPEuAiDzUWHg8BUX5vJEzFr1sRVA68soWvRXCKT2Jpjg9/cSJvJXB+TyafV291dowvQh027xtA0y7M0wCvHAQ5zpKcH08i5LAu3aXgr2H84E97LWPPUYXJDyNyY47I47iOhWnLT0C/RO9xZHQPGi1vjzI2Kw7c+duvHJ417ydNDC9xUi/vChGMz3cDeq7WTzou5+N0bqY9269w6zjPPx06LzCbH48ozodPC1z9rwuOw28EkjlPFREKj1993Y74SPbPDYddDzqkxq77u+1vNvJozwPyR49auPuvI0kLb13gFg9/T6xvFWy/rkLN2s9yssrvEa6sTwVDhK74BzJPOzLlrwSuzI84DVsuocZHzwUDF88FM4evbpbmrxgNQS9fzZpvbwwnrzD8Kw8IMjIvBg9GD2QXt880/RqPVqTWLwtZ3s8fEEdvU+qibznjyk9/W40PVKEXj1AgN68q0e0vL6KJT06E7K98dK7vKJkJD14XV28R2ETvW4VlTzH/aq8fo8svGbXDD0RgRa8KI73PHzMLzyAYLO7NGbSvADlUDvzAM07LyCavH34CL2kVOW874aBvfctH7wVYO85GtXwPIbYBTwZ52+9KCLAPLk7gT10lCK9JcDFPIhAwbxQi/W81T1Iu7sRvzzm7DI82dVTPTvKE72Oze+7CBkjPVm5yjydhRk8iptfvBq+AzysaKc8ZM8HvaMeLT3dhoc8CZUVPWzRITp2S1m946snPGbsQ7y5y/e7uOIGvZ3Ecb0IWVi9DS7nuzQdwj2qqM28XcOpuWcKPTwhSUS8ou75vNv3Sr16t848XUetPTWTGrygQxq7VpI1Pd1Ld7wff+Q7m93FPOZIvbyqaxY8ipNpPf4Xb7wEXSS908BivVmRsrzKqEO9WHEfPQPn6z0D0Ie7pNd/PYVTeT3WQn28OU8svfJM/zwx6qi7OoDYPFEyk73YPfO7P+l8PVQKj7v8Vr488tqPvM+HWTx3kLK91VOevcLwh7smvvm7/MaoPDjAu7xO1Wc92VoVvdqPhb1QS5e9UTwOPFibvj0kqmy81ZBrvWfiab2TmJK6rg1Wu32jP70Jn9g5+MuePXDEe7xJ1EA8qchMPGYZSr3xOSK9w+OFveciWb0ypCI9A1PzPP5qAb3O1vM7BFCzPeqMGbykCSc8S+4IPV2YmL2rElw9ib0svS+R2rtwh0S8w5v7PFu3pjz5NTU8HXxBvYV+mL27EUO8DfoIOo58cr3sdC08g8+ivA0vJr3G7BE90P5svA/gF70gWhi9erd8vRIBSTwb5eu8KS5RvGPmKLx33K65mKITvbC/ir342oO9BZ4AvZs51Tttld88S3eEPTJp37vKGl49moOFPBqpFT2PZzo8grbaPF5WDD114oC92xtqu5dZBz3mMAy8Wx+UPTugwLwQ4tA7GjyQusZccL00zT87eXgjvU4J5LzTbI28cXL+vE+rUbynwF+8mn4JvYCSsjxPruo84v+svU3Fc71rmA+95/5uPdU7Rz1HV1m9iLB0PbIQmTuCo/y8zZa6vA9hMr2RYIm8sA27PLlNibxbj2y8d4yYvaVV2jww4/Y8r+NFPSA3iDyAgZK9c1O3PMp/2zzjKas8cum1vKLNs7vN3iw6YJ5DPfCOIbyrtfc8VXYXvSKjOb1GVH28TJS8uz68AL2Defa8VBM9PSbokL0zynK7tZ3OvAaFurvhFAC88/nwu8rXHryD9u28qacCPWrfijtWB5i9ef8RPZf9Sz1SDRm97MEWvYI1RLxsOse8ClVKvUd0ojrIy5a8SJ+RvYFq1rsuzoI9bIU7PVN+lbsqFqK7D2K8vAE1lT0SPKC7mv3RPAUrAb3z8GE9OEM8PYo5nz3TySe8ER0ePcersLxegP68YgwWPYVJHLxMTOu7pkAOvdOFxbwMMHM8QzfnvKJsUzwFzZs9KSs+PWkvXTwuz6m9N5zlvDhBMT3MQBq9JgNVPVmuebwDsyy9qhM8PBqIF72Ww4w8Vt4Hve/eTDzf+8S7t0nBPQefOzut4Rw9pTWIPE4p3rytFCU9I5MwPZWZgj2rCZ28feRCPEdhuDzfyhw85n6fvL6wybyT4he8sJLXuYu85rzWJOk7VWsZPCdBI70ix9O8zB9MPM8VaDyBDMM8bYE5vWoNF70TKj88pVg5PCrfErzwHiw9DYFdvYqDKTwThBI7crbGu+l44rzJYyM9MSR0vSImpLwV8kY9Vi4nPZei/TiTuVK9AR0DPMaX1rmJs3U9++rvPN7Cjr3TXxI8s2NOvTmKHbw5J4q7DxM7vdjTCz1JFPI6/GrMvFvxnrypinI8Ks/ePPyiaroeHJW90pOMvBvmWj26pJq8w3ysPNu0vzyI/aA7SlMtvRnNYD3m4N073P94uzdXH71SFww98TcCvHyk2LufXZA9KqkPPEYOlT3vwbK8uHQpO/J0dzxYKsw8SbUWPM+U/zy4xK+8qnlLvOGKt7vSrEi8AStZvVrMBj2Aeom8yMyOvTeqlDt1Y7u87mYBvdTyBb2m1Xo8Zu+EPXzOCjyNCuU8bVMpPPi8lzwVC/K7J2CcPd6HnzxK2X08In+6PGWBvD2p2eS8tVW6uxNlND3zTju7cH3pO3vs7byEqks9XGpNvUOjsTxXsSy9BoN8OxzaTDwebiM8
  1-5: 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
  1-6: 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
  1-7: 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
  1-8: PB5kPN4Ynb3QvXG9BtnBvLX87LxqqSw90Mn/vIynQz2PcCk8fd4yvQoG2jpm1mq8SVEIvQWnOjwGNma94MIFvIkWbD1Gqho93AnNOvDsLL2dzBm9JgMfPbaQzDxhRqM8ZD0hvdcazTxP0rw9w6C5vJGdebys7D68AU6wvGs7LL2VVNU8KCQqPdyEEb2yAOy8/rDrPBdBnz1YqYu9q+sRvXDg3ryeNDW9aJQEPQ1vVr17Rso8hHxIPKziDz2XJ048+JONvag5Hj1ujLk8k0KYPBFuNTwCZq482yq/vPe1BT0kGjE9ASp0PclaU71rnY88fQmHvHTrBz0XT/68UkUJvZ+QKTyg2Re93+7XO2hpz7sH+gY8OgAevXDpSL26mQM7ONB2vHoc1zy1U7g8YPZevQvnuTkgVI09N76kO+TtmLzV00c9VHsGvCguALuS4Kc8bhxBPKYlVTznK9u7w8kxPAHqgT03Z9W8gZTIOxp/azvc9zW9JXqOPEH3Gzj9x+m8RLAyPe4v3Ty1adG8mej0vH6FaDabfYI6NFJJuXLc5ztbCQS9rWpBPX5XeTyhXyu8nEqWPP5aLjyXEKW8W/vmPJpp7bwxZoI7PMCNPDnZTDwIR4a9S+v+vG2IkrwmS7m8PMAEvaxOqjyiFrO9dB8hvVjRkT1DYWs96VUzPXBqaTyCQFK8rcCCO1qXg70kStA7v0pqPHVRHzz4XWM9FTcHPaRimjyqBv28Lx6VPBgy3bs9u568SUWkPPFhL7wVhGO7HkFaPRzDKb2sNUM9DhC/vT55kL1svmu8P6eUvTXVbj3C7x28Ke/9PHshGD1VbcA9rfhkvLincb1N0QO94wRgvUKNXD3DYBk99ukaPH1XfLwsCqa7HbwZuzBovDzrWh88EgZTvQCskj0LocS8L37dPA8y4Dw6JJg8ryhyO4GGpT15M029Lb4KvVslYzyl4Q69zYJlPCjpRbz2KiQ7TCr5uzJRBj3epqI8adCSOrzgz7v8/Rg916gWvIWCwrxYdQo9FUbnPIYJqzwKlUI93yVevBEHaLraL/y7N0+QPNHfZb0e+FS87kmwvLxRCb2rJqG8f4iNO27ApbxHw9c805I6vBzBCL0vuEk7frZWvKVTiDy8IIM9C4pdPRA7kj0lpXG9dkcQu5tSgT28mu0839bYu0rpkD3yy+A7Cg1QPcnmCT0d9lm9Av+gPFhACzxc7lU9HgpxPRj8JL1EwR49BvVyPY8ExTyenTc8LgOXPMpQqLr/kIa8ZQYAu2x5qzz/8Le81JQKvWeaID02Svg81xadPTBGzTwGdCU9gOiYPAqVfz0JmZm6uRe+vIfCZLxt5Y69DBlbvVU2+7vGuZk8cDqIOoTtQ70PLs487M5GvETCWjwkxZW8OGY7vS29Nb1ls149nfBePS45JTyTScc831twO85en7tmQiO7dlFlvD1/Cz1DUt08yp6DvQrVCb1xTAm8brlWvK1fnTyCHVg9Jb7AvKfC6DzXZ4S9sHmOO0Hddz2yZ628IEwrPYYhjrzZkxe9jsEnvBu3ITvqe3M8agYDPHLGRj0GFT09YG7+u9hZ+Dww2c29F4EnPfml4ru04uo8rsSnunhLizx9e628QwtFOyVcSjtrzAy9nCbQPGquyrt2m9I7gMSUPHrYyjxlriu8pidoPIUSTD0lAEE9dOfou9de4DyuOe28NtVpvJNP0jzff1a83iSSvbmTf7yTehI9Zsw9vbJm87zzwS09iVqCPBc+7ju5ZUI9KbXovDsgLT0X6Ea9p36ovJCUo7xRqn69f15bvDYquTyEXI46mWUSOOFbTb2YdJq8g8+ju9A94Dss/b68MitJvQP8rzxFi887aY1TPah7gjykLXk9U6s1PeLF1Lu+j6Q8suiOPZ31mzv8Nv08DhgSPfq6sjuHB3a9fFegvJF7ED1nVbI7siYvvbSDJTtYmWK9nMslvI98NL39cNA8x8cjvIKcZDrVDpK8i1ESO6na9jxh6cG7N9qHuxHCGb2+PpS8Tq0GvFDJzDvnALy7WFnwO76m4DzmRqO8fZpSveF8Az0hJXO9dzvVO2gy2LwlD6M8ubiZOro04Dyb6vo7K9uHPcoFCL1MgQS9CMIXvRpQ77zrdzi8vckRvGwuID3Xn5Q9DBl9vcvaMz3m9I88r0EQPfsC/Lq0FaS79EosO8qK/7wduQs8jW1EPB4f9rrwF7O7XgigPaVevTyPQZs8H8UDvbVUYD3vLoI78XJYvQrSLL3wB+W7dy+9PExZsTryYmI89dUfvOQCtLw48Mw8dN+NObTdtL2jduo7fGMRPclG/LzxRHu9JY+9u3RwZbzhOQG9S8UTPaW9uT34ha28ZY74PB1EMT2zl+y7VuqMvFrIvzwUOrE8K/YsPfi4d7xti4C7M+lDPUxeILs2Rb+7QDO4vXhIRzy0xKS9XFXzvLJHozo1Kw+9TAJNvXjMOLzx2OU9Li8HvSBd+bynbPa8YVtSPbLisT2au6i8sv4oO5JbALyC4Vm9P+sLO48wwLz1lNQ8Fc2bPDaaf7llUw09SkQqPR3yO71Ohxq9eIAjvPIFGb09o6Q6IQKJPE43dbxl2PE8B7uTPGdDLbu8jmA98UykvI4Eeb3AcQ29a2scvToqP71TUZ89CVWWOxPGu7w0FEM8I6PAPJDTsL09PJm8EBh8PDtLiL3kpA+9ZGo6PHQqR70qpQ093hgiPSOE5LzZaJq8pkwwvZl/Gj2LE4I840Vfu3iKJj1xKOk8vgiJvSpChr3/tKY7oHD8uzcKgrxYi3Y96hFbupRkMb1MI208YcadO67UAb3zZ2K81zphPQ1sST26InG4p/YIPVQ3gD2yETW8W2w0PWw1h7xRu/i6Bv0cvWwfN70HOeI8Mu6HvELcj7ygMLE8ofivO+uZNb0GBqw96pBYvAAaxrs0o5k8C3fgOIAnML1Nne282UEuu4lL4LxTrzy9/9SxPN2HAr2g4Ya9DXlePBMBK72OGDG8yW6ZvKoldD2M+pU6djqGvEFhFz2z/x08VDcBvTsEdD1ETyS9mAsCus8flLyMiIQ9UHVXPLJ3f72ACrA8xn+FPJivo7zMo4o8yhFcPFGuQb0Uj9w8BX4KveTIqLwOnNS8rGOOPaJiYzxKTRC9HJBQuwjO1Lu3f1M8RZwCPYy6lz2EBTq9bNQfvCVg1DwlU928D0jrPJqoQTxaOGS7cpIsPZuQVr0ZMgU828MXPL7gFjxv9WA9buKUvWArnLhcRo47t0PRvLztKL296dG7OeGzvEaZij0MLSS9aPOAPBZUtTwwWxI7Pb+tuW4Wbj0qJo69u3Pvu9iy8TsT+ha9z4WjO2Jzgryv3w29HqocPH0+4711v/g8GGurvWk447ziQz49SRWmPcifhbyN6iu9Xq/zu0zGV707iG083wUpPQ0oVT1DKxa9pd3CO62bFz0Swz29OJoKvBJUzzuwLTC8/QFUPcXoKbyhuxA71H42PTk6w7xHHSi9dhHSPBZViD11Ck48EvkiPRIjNzw3fym8FMn3u1yabbxBnP+5Yy7BO1qXA71fSNS8aVfdO7lm07wYCzg4eaiMu5WLJj2nnYC7iu18vXTnZr0oJeq8sP6GvLnkGDzPVzE9/GDFu1FybDmd/SA8Uko/POUn5jyDG568Nf60O1ktPD1GixA8dDKLPSaOrLvZa069ZbgevdtwvDvnliY93+rBPH3bjb3Yio+8sJJhPckFD716esa88/EvvXOgqjutfka9N9oXvWKtCb2QpMy8SZsGPXa0iDzz/oG9Erm+vOtpIT3xx6U86VwsPJHpjjwM0J276QpxPNC+vz3o6T29jnFxvflbmjt1qPo8m6bCPOK3yjxkbro9iJoxPf8V/zx6yne9E/xOvSm4VbzmQR89XO4DulBRAju9sP+8Ye6FvegxoLy8s0S9RJDWvBqffj2GJme9PjfCvLDGaD3WqqG9omDLPPkXYLvhAgM8iX4OPZmTyroRDIk8XXVtPapUtTxXxR+9wGm0PRn4B7wj1SO9PEv+PBtiFT3IsFe90LSjPOW00zv9bUi8h/YbPIn8Sb2OdUw9eRYHvVqyEj197zu9Yoq1vCG9D7xrPru6
  1-9: 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
  1-10: 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
  1-11: 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
  1-12: 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
  1-13: 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
  1-14: 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
  1-15: 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
  1-16: +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
  1-17: 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
  1-18: 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
  1-19: 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
  1-20: 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
  1-21: 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
  1-22: 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
  1-23: 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
  1-24: 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
  1-25: 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
  1-26: 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
  1-27: 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
  2-0: 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
  2-1: lsI3vJL8db2N8SQ955w1vUlEJzzPheg8sTD/vLTUzLvOdJ09oMf2vPQZmT2m+Ng8RF24O7TGnTuUi469uB+Ou973kT19yoE9/nV7vUVnU7vausk8jjZ6PX8Fjz0Fwco82oNRu4NC+zxwgho97nO4PLkSOjz2uCK9EXmEve1+vLwXllM9VvkLPbadPbv9Xy88aGDJOyiG4T3Ll1u9gqWVvcMGJr3GRDm9dnupPMuXrrsHNkA8YhXZvJvsVzwUapK8sG61vWcfET1OToM8jFhTvF3U1TuldhK779g5vSz3hzwJ4788GHSrPEQSRr0b02S7wPk1vQX8Xj3M37S531gTvHaBJbxjb487qpKdvH4PK72I0jQ8rjQuPAYw4LwB/C48mHgVPbtZQbzwZJ89GDgDvMV6Ob3wMGk85NoQPZMe6zumY7+7tiSvvCx5D7ySgmM9oceYvC0ISj2sVpW8zV5cvYJh3rtKCb67tIyMu6UAJ71TmDG9NYg5PcLUdbsyKcq8NixJPa+wujw7qrq8SQmhPBgwqLxWOcw8iwGivNf/eDxfY0q8vH5lueZ3Ezwu41Q9aTADOxnLGLxZNmm9CkFFPTFkbbvyWya9b2DrPJgEyTsVFL28ecT7ut9X2bzoAbu8vokEvcaFsbsbcqm7W8IRvZTV8ztz9Z080YUDO1xJj7wrYyw9FKmFPLssgL2HCNS8QvScvN6Xp7p6iwg9xk5CvLYTDb0QBKi8F7YYPV1MnT1pABo7COKlPDpm5LvPsoo89iAau0TMuLxqLeo8TFiruqYy9TzIPMi7IywrvbJBTz2Wgma8tSo7Pd44iDw3Qj49MEIEPSZZsL3Cuzg8WL9FvUXeHDx/3cU7udwBvUGy1jx0y6Y4dqkLvf0Ocj3yo+Q8uQrOuzEbiz0gMOq76MqQvL3Yejw/0e88/KJHuYzxlzzoULW8x3IEvRVLULwsahO9iieAuqb8RbwoSCU93UcOvdgh9DwA1L08nfsePSmHXT3rLIq6CEASvMviwLwQ6Ak9OYU4PZsMRT1yC6M95C8BvZuVM72KqYg9eFgSvVph0rzNBlY84dbKO9jD67tcwmK8uTFgOWtGoLsqsfA6upypu9hMwzyBPp29E/MdPQp/Uzl/kGy804bcPZ1hGb1IPIa8pd1pPZGTGj18XcE7BL0yO1TtXz0goyI9RHVfuT0qiDzA1ui86LcnvBDQ/7tsEq+87H8YPakBxTowOIg8QJR6vGU33rxz1g89zaJuvbfDDrzeQyA8f2UJvOPmuTzPLNw8XE00vb59cD1N9R09Y525PVUJaz1Ibjw8/87Tu/Vdcz0nVA29WmZvPFixd7rtKNq8M3WYvJkzkDz2uXm9Z2IHPdwsR73LBwO9QWIpOroFjDw3G4C7zpmrvCH4d70fxC49cNLIPA5cc71Z6TG9RvlbPWQkZb0/4+O76MRSPe12zj00i9W55qF7vW3fkbx9Bfy8nYtyPCJByjx6T/i7y9HCvFw6vDxlcd+8VkHSO7JCAT3x9768g3uUO5N8RjwvX7C7NDE1vMg6yrzIbI88VIl7PVyJgbnBOJg8tYl5vAIT6jwmHrm9TfzPPOIrjjuIWBq9KaXTu9fGZLsfs/m9SRuFvfOSDL2C+sS8SmakvCT4sLvL9Re9vMiJvLA067yMJN47wCKku1/2iD2XORo9rea9PEMlbj32b0+9bd2mPUJ8HD3sUgO91HrDvChAmrwolQA8h8obvT8bB7xqydm8gQAOPQa7LbzwC5w974anvPKGQz0MJgS7JCUyPcQeyb09rQe9ko6gPHPj6TxwgUS8QpFNvM27qLze+/w69qV/vfE2XLwXwJE9OTCQveZr8js0Lqw8tIe2PHK53ryDLJg7roEoPTso5rzFoaq8p1yZPfM0vLwgqne7wfqSvBYjo7v2yL29JOfuvCpkarytM+A8qM9KvfPKYLxqu2a8HHMkPTHoszxfpss8+Zt2PCDQ4zzMgO28TV6EO5xa4Dzg49O85tX1OiOdk7w94qC97o+Yval4M71V4OE5E+rEuxvPazwoanI8+M/rPBsEUzx//fM7MMZxPSqzJbwbHC292bUdvbZXZzxs0fU8sfSMPR8KMrpAJyq806rAuwt18bvrjAi9LMx8uzGvrDz1fEy8UKosPYbP3Dw938e87SncO741sbxo3x09fc0Iva9v/TstE4k8N4ZUvMtVvb0nnxC9BkvKPDGKKz3+LKa7zX0BPDyM7LtAgdu8trGNvGcH3LxxtyW91lHvPZ7yuDw/mSo9tx9qPaFlpTx+CN08PXP7O3YwKr3TeQM95lxxPcM6Bb1S8Fu81bODvfgeqTw9WYW9kbIEu+nmAj4DLo69gICbPDyn8DwXIYk7J5+1vEFsJDwyFiW9uilrPIh6xzzlWsS7gMx9PWT/RD30Sjc9vgAivf8RIT3sKB29/MeivXupI7ycoJI8cfnFOe5GDb31Y5E9k748vRJeVTx5Pd28d9y8PHee0Dw+2Mm8OOWtu1exybwXERK9VpknvKh0ED38xOc8wn5ZPRhQyLyKkww96bVPOp9Ypr0HvE+9i/I7vYJQk7xvbwU8RrSPPfcvL73QDFo9Dbz+PGs/XjsL66070in+vBxuJb08o648x/ACvadwrDtg3428zyadvE+xt7nlnpc8nEy6vD/1Vb1IhFc9O7wfPRWq4Ly0Yxq9Rc7YPLkqKTyXP6E82sDSOtdUFL09hve8n6TvvEohW7y2CQC9mBhxvCWzszzwaoo8cdF+vE5iFr0wf9K8Z0/hvBn/h7yr8Ls8VH4jOzBL77w0yCc8DvscPX8lGL0cXSc8nGOtPaEHHj0uUvI8BUkaPG7nljwZ3Q67yGGJPLWISbxqa5W8CzpLPePSUL0720E8Qd+0OwjNWLvmX5e8yMPYuwnXlLz8i0A8NswPvM2mNzstXVw7k5Z1vfwXu73Jf4q8LJtyvThhYT1bR328DJVDPV/QybtHGkC9y/8ovSz2pDnxm/O8TzGJvKe1nboXP5M7RI5tvcxzCT0zUIm8mKCIPOu9Rz2KsCa9JbelOvO/jzwJ7Tc93cwavOW7IL2j6vm7GyDBPduaizsFGFk8D3G3vNhihr2fIqM8K1TqvGkJGbz/d5K9S+xiPMXQ0rxHZMg8y5GsvPRhIrysKtm7ZaOPvMjwtrzvhrw6ZMZVvBW+OLwtCso8BZCDPHbjgjwMKK68UBjYvMhtCD3sDiS9wdEVPUNppjxTipa7A2CQvSJzobwlIem89euOvAC/BTzMqZa8VyfAvASIBT4N1Te8Le4WPXt2K7tXbvS7syhDPQjsZT1sQkC98TowPAgFUzrgOom8ejOSvGgSIb116SA6WJtzPSJdP7yCzVi8AluDvX8XRL0+qWK7AU2OPFYByDxFviq95QJDvefwCLzjaYM81lV9POyf+ry/lBu9Y6NNu4jTsDwJHyA8Ns5bvObb/TvAQDM7k9wpPWxz5jtbbMU8QK3+PMvEvDyuQAA9fLuKPSo1kjzp+a+9PJBqvMTAZzz7iRK98dv4vNDLqzvLPaE8clwPPcqBrrzGxKI8kIk4PHU/gr2YFvW806jlPAZNcD0u+6k7Omsdurw5AL27/Lg89e20u5VGqDwlEa082oqJO//JSzwB8Gu9doQvvQVzFrwMXyq9rMNYvSWSmLxnFaA9D59IPOHm5DuZwWC9IYKPvFbFEj3OsLg82V5SPWhuHb3X6Zy8GfIgvUbkmTt+58y8XjWiPCuMOz1DaF+8dx0IvaX+j7w8h+27JUMsO441cjuEAGu9hNdQPe79Nz21Rd87y9ceu9cqdj01NPQ83WOyvKfAHjz39qu88aouPXleCr1kf907RwE9PSsfjLwhpZQ98g2YvJ0S+jyhoS29otQxvXAeNb2W9Lg8d0ViPAAWQLzJvAq8ZaZ7vN+gMj2XQ+w8SRNKvTyOwjzlHTS9L5kgvXumqz1jraK9swsbPZUJHrx9ysK8yxAaPBiJKb08b0Y8wqAjPZpwhDxCtnk9mEh0PTHN7jqhhw29M1pFPaEOTz1rqRa9HdpaPdB6UT3gZkq8NCLpvJ8wtrwvgCA9hwQqvbYWFL3QiLi7Oi87vRfW3Ttx+UQ8
  2-2: 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
  2-3: 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
  2-4: 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
  2-5: 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
  2-6: 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
  2-7: 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
  2-8: 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
  3-0: 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
  3-1: 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
  3-2: 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
  3-3: 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
  3-4: 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
  3-5: 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
  3-6: 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
  3-7: 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
  3-8: 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
  3-9: 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
  3-10: 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
  3-11: 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
  3-12: 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
  3-13: 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
  3-14: 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
  3-15: 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
  3-16: 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
  4-0: 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
  4-1: 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
  5-0: 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
  5-1: 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
  5-2: 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
  5-3: rF4pPcMx5r1b2Y68f7KTvBNVIz2sicc8PNiRvEuw3ry/2To9T2wpvE5oIz3ajfY7W5VJPP57szzJeYC9SplsuwnkVz1caWY8PwtVPDfpbzsuFn28qET8PPLETT194Yo7zAvevNNaHzypD409N1B7vFJXmbvsqF29PNyOvQY/6ry65fc8SCWTu5Imrrzsq4i7KLWAPCsVlD3yfjC9PLuUvFX7sr1HWWC9dZrlPGUfITymqoy88gWxvMRjxLwxuz+8eFikvIy8xDxRvRQ9JhDeu/Ia5Tw14eU6HXGIvedHkT03CuU8cEOdPcJDorw03da8eilPvRcl6zzDZUW9sD28PIYewzxqIMI7VUXUu6KrSzxfDIi8PDQlvbaHpL1ynVS8/525u7VMLb0V10I9D9gMveHajb3CrGc9dW0SPZDtUj2XzSE8jfSbOiR1czp6ir07kzZFvU72EDxtwSm7gwHNvDmJyzyJkQe9s29Wu1bT3DzvXuS9iEBWPbkEEr0Vm8A8/rkrPXlz0rzJgvK8ik8Wvb2dhrxT45o9sggnO9jKorwfDCi9+YsSPc2ZOryLvzI9vmQiPQQKd7xriRK9g+F9PX3Tb73C7RK9db/MPH4jsDy2r4u9pPOmvBdekbxjGOy6j1v5vINdvjzkii69dKE6vMpv0TwLOBQ9r5cmPTL+mbv+IRs9AFGzvP+d+bxkr3a8UZKHvCypVT19NZE8e9f4PPYBNL2P5ji9TZGWPO/ZID1KLJS8xZv8O1GsILv5dxA9eH46vDK0jryqUvU84UfwvAgEAT3I6si8b23nvJYsTj2MCkQ8DVMxPcyXHT1j2SI9vTNaPT5Fl71Mwqg87jBOvYZ+cLwypDQ7pQmDPDHC5Ty1Lcg7PxXavMlHDT0nY8Y7x+XuvO4Cpj0q55+6glPxvKiNBr2JC408ndyIPGAzfz3vxl69TqYIPY/QhDp26xW9q6PpvJ3h0jqRrTe8M5UMvVosnjthVYA9U9ChPCvxATvwCka8fIqsvPStGjxHAE88MeQNPfOYNj1zvEw93/72vCcpOL1b13g9BOzau1uTm7yZiGW8bCStvMi9kzwVHSc8SBVBvbgay7ypbhq9A0mGO/Ofdz1g2sy8/qIoO3jHsTufC+S83EyRPRMUgTwHmks9570/PeUagT25PRU8suAZvNtSij3E2U67juPKvEILKT3z/l68qbGDvJBolbw33Lg8XMdYPWXsnjtvjsA6MrIQPV/0mLyr55c8AzsvvGyDizwanJE8xDDfPJc8Ijx3h7Q85gpYvZ5i+Dzm8M+8IcuGPVjo5DwMzkI6vzOzPEIRcz3yCIi9mse2PAcrpTwI1Vu91iOWvKC4QTwcHxK7whR5PbZLY71mMU46njAoPSJo07v/pQo9Qy9Wvbwso7ySdoo8LxsjO5sCz7yW1eO8nnsQPYkywjxblDW88XEZPIDbZz0Zyg29uKPBuyfpCL3npHI9RpiZvOPazDza8dy7Z8zzvBhjXTwznQ28oB0HvagNd7yo8KS7TuDdO3pPgrx79o69WYBku1EoJr2VfJg9z3kWPQBGVz1TzZ46SCTBPODqNz3EkNe9qnT8PCCPs7sVVyk8pUOIPOPTsLzZH369sRqKvXZVmrzfGb47pd0rPH6Q1jx39vW6V0QivU8CZLvPfoU8xMWPO2bADD1OpDG8sH88PTXA+TzErzi9nFoDPUVluLxXdjO8WyNDuSbu4jxDJ9o8IqFgvNi/N71iRwQ9JoxFPD/QWzt6iq887/0lPdAEhzw/HxG9pAwePVQPvju3dcC8SmoqPLzPMz1S/jS8UZEgPGXGJjvpFBU9jaxEvZTdobybMEY94ZV7vcsOITzW3eA77nRuO9HDgry+EIS92InNPHSiKb3npdu8TryZunSXXzz4PSc8QnpevdcJNTye/sW9ALSqvN+UIj17KC29aAdPvTHAHL1trZm9lLTuPO3RYLxdPCA9CMgMPdlE1LyFpbs7U+GPunpwKTwfnqQ81cVfu9uHr7ySqya9niCMvCOLs7y/2eQ8LFosPDzHmjxl8Si9nn2/PM8ZDD3nlMA8KEmLPdYQvbz9mN+8HD0EvcY80Ty4INQ8icCgPRig0ryoKja8T5d6vP5XaTyFhAq9+zOBvECb/jxQzpY9JpogvZBV5Tyb2OI7uuQuOpb+Dbu58Pc8sIq6OqubKL029oA8uwH1vH/2Nr1l2Om8EdDGvEkgMT2pD6s9JRkwvS5hZbuL40S6ZpQRvfnLQb2h73M8odqBPdHz2zyLH7I8VDwCPXoAHb0zwQ488+WfPOi9e70Iqhc9apfRPLG/ib3rDSG8S6yDvXcJrDy5Toe9Xf0mPYXF8j2cn1G9w7DePL7fWT3U+q88cHqevGJatTzZLPA7ztwkOvQl/LzfeLe8VslXPK1flLvztbk67TIUvfPMoD2FGwu9XJiMvePWLz1SF/u6TA+oPIT5Ob3VzoE91037vMLqubwFy1q9cW2pPEkVRj0vHT+883BJvQxALr3GNm296+Kdu4ZvoTxax908vBFePTeLprzo5GQ97TfQvLexiL1r+pG9SD5evXKJBr0PZOE7e2cfPaxs+rzsFGc9qwKqPc9r57ycRZI7qi0ivfwVl7xOXSQ9qX+JvCxehbvNdOs8vGkoPNpgQb27vkE6mc+LPKyivr2zsy09EinbPPg9KL3xVXC7Eg0SvCZtLD1fBTU962XuPAmYkLwEUMm8VfM5vbWRGDsMXXg8SHWwvIS+fTzEbQs9ahmsO2BYxTlJyGG8UNa5uRywCjnPUqG8k1oJPKzqVb0jLhs74O9wPf0lIL1zCas8QqJhPWX0Pz3LPD26ybZ6u3hPAD2vgXu8jg6TPKv8hTz8xRs9CgRIPAnYJ70clkw9rawlvRM2BDhL+JE6SWt/PddOBbyaU988J+YEuxkANDxEFta8/D3JvM70j727TGU7UjLfO7QGRj0FiDC9A3sgPfKyqLxD2Ee9aNr6vEkr8LykvDE7Hgu2vKLGeztds6y80CgXvTpS/Tzapr85Vx55uikyYj2/+bm835o7PNfZN7u5hmo9mwEavbIkpLyOSV08CMohPfwkwLzXoe08w3mYvCFAib3+Hlq8LPopvJprjbwgGU+93U62PLE4C725UxA9jHJhvIRT47pRDnM6tRs6vKd3I7yldmU81MOrPBdwIr0p6Ji6vdpSPXbSZT38QEm9A5u2u+yk5TtZ4v27HURFu1619Dp3Vtq7I6z4vEgBd7wwDtg8kz2MOxlwTDyCTha7J6znvK9poT3ZIeC8m0g7PT600LxKzKQ9450LPAOk2T3CAUE7kcdqPNCzMr33HFO9wzaDPKrcn7xc8kc7IYBmO8zFDL2X7k66X4XpvHqjhrybHwc9K4E2PaCr47zVJKm9d2iKvAgbczzJGtK8+Zf/PP9YyrxpKoi9dsGnO1LCwzyEcXM9Jy2XvMh3k7wIBjE8ryiyPWsEizxNhX891jpePZQt97tB5AA9o6R1vMHmOD2bq1q9wDUNvTtCADy8sPQ7X1AuvfMnYjxM2hS99lakOgifTz2H2bU8+XujPKNmELzpXyO7NF5JPAruqz1cps27+HXJvEhdJrxGFz07gmXovA6i8jzz6qE8rrS/O7d/rryODTC9x+rRvC9pZrwI5va8EYuYvQP9yLxHU1g9xTUUPa8KKD1C2Ke9lP9CvdBwBT12kgY9AdKaO5T+HL2t4R+9+F+JvB53Hb2Ueje93lEUvK+Dkj0SBx+9lBdcvXj1Qr0xJg28fWpXOo0thztAG2O97FTuvDjWYDy4yiO7hPi6PJjrLzyH5yq8VAEMPfppiz1u/AY9UDzOPMHedr2+R5a8sjOqPB2P8Lx46II9NAqtPF4oMz10Uzm8u5oSvYGDNb0lRB09hVW4PGoTN73ozhq7x1NYOFjX3rwzzy+9Lt4evc+NSrmWinO9JGtrvTLVXT1yWiK87ucwvO2GkbwxW1S9TyYSPQ5tM71Gm7A7UAxsPdboCD1hH0891g6DPf/jsTw+coQ6/h8APWvHyT2QVwy8Tc42Pf1zND3TcQs7C0Udu1p87rzva0M9AZhhvTmlbTxMzIG95YxHvXIJIbx/tLC8
  5-4: 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
  5-5: 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
  6-0: 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
  6-1: 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
  7-0: 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
  8-0: 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
  8-1: 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
  8-2: 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
  9-0: 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
  10-0: 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
  10-1: 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
  10-2: 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
  10-3: uqjXPPMyAbs7elQ98LyhPMJfwTzmstY8O7wavIlIiL1WBzW8rkMVvV3p0Dx4ywI9AbhIPPkok7zKeLA7hQsbPf4bWD22DRU9GQzhPJeixT1c7g29BAgGPejYuLy8rbW7oJkEvb+r7Twwji890m82vfN+UjxSv7+8t9yEvTgho71Fj3I8sVsDvckisbqnE+67YlFuvUfaZT0Y9Zu9D6BqPaHK1rxdtLa9Z4WEPGEcNDwZI4a9DUdzu41OHj0hrx29seDVvY0gFL3whCk9n80vvVrrOD1PZ7S8gORjuzfQyT2BSvk8rZLxPOlUUT1qYhc8Q8FauxnggT2JN4g8G7AtvOUEbLwpDx49C2eNu2xh87w+ZRG9PiZAPSrBcztiO8m8UIV5vdAFlj0/yWs9tvCnu4Lbgb2bhzI9bls9PWuoJb1Hv4092TyIPIi6wjrQSoe8JluuPDtQrbwQTmW9LK3RPIlpATrdlyq8HuymvXKDB7yYHiM8vH9bPXPWgb3pTKk9RYAWvP23n72WE6e833GDvILvuTzYekA9swFRPAlJeLzV2NS8SC7IvDM4YzwGnDq8V6rRu3ljODwtUj292NOfvGQoAr34Iyi7Oz9HvWWmfD3fKO08HxYBvA3fmbywaIo8hZAqPSPWcbxbPri6vgZ5PMz4HT3w/F08SAHgvEN2rzwtC448/gyGvEbvijxuyTC972QVvDLEzz3pGVM8Mj0VPRYNB7x/dIW872euvIt1ArruxBK9cUaOO5TOSjwJ9Be9f7k6vX2mQLulPrI8PrxcPW8A8zzKkzA8+XHfu3enoDylq5o91DV3vEZLBz1yzSM8q14UPX++V73JcNQ7KRKROwNybrxDeY+9oVOoO73NYD2QK4o8rrWVPSkDFb33OIU9blVCPAo+Mz09Y308Fjc8O+mAEL0IN6i8UKMYPMWuRD34oKg5Of1QPWmRrzxUF+Q6xDqDPL/CbTy/5na95Dn3vDsylTzUp9A8QXKQvArNQLzEPAw9VU8LvBM3NTwCg/Y8RpI1PH0lZbyagoe8HcBFvB0nWb32raI8ZFaXPRB8nb3nllS8YQLjOrYaybw/66w8lw45PIB7uTxOU9M8vdaSO4tMXL0pVk69d269vAcFary5WQA8RuZSuwztyzx9xhS9MjJ3PZ+Z5byQuve83+2guxhnMj4UZ9K8DUgAPNEJGL1z3pk9ViN1vEkm1zzc01284GsluwcBBz15rQo8JzNhPPLxBT1b7GA92dwTva2Gwrmhx4w8awmLvYFzwTwlygo8zSBWvezpBz3LZBK9Km3Zu5BAU7wELY68Mj+eO7anIz34E9+8ZU4pPMaYeL2Sq1S9Zp1ivCGoAr2hB+o8m9ytPJjpjrz3Apa8jxujPTF+9bz9Dkg9K9VjvCzV5byZcMQ8Y7hjvbGLkryvfmc8464AvQ6+7jxvVHI8a5ijuw0HVj2fu0u9/6LAvNmdRLwgGQY994MEPchpAD11JYQ8jxeDvER+5Ty8Z5S4GPLxvIV6Rzza0L+8FaJjPH7wUTso68o8Lyjouz+Iqbx0ibE8QU8pvKecrzw9v8U8bgWUPLVbzjsYiaQ8BdBSPBT7STwJOB+9ILZKu1DbEr1/WJ87yHqEvHS4pLsRRP68C3FIO3REIr2vgKe8CXHOvFxxQL0HjSc9ElORvFgTyjpAcQ09c2HBPOWLkrwbhTA9/GWXvN3jlT1j5iE7wOCMPOauWT1IuFy9ONEUuzBS2jxF1gy9HA78uwl7Qjybttg8hz26u56zwrz3XSQ9QaGFPKmkgzyE68Y8LNEmPIdCgjvxWqQ8XRTMvKRWCT3lz1i9uAyAPBuE+TyEM0I9jsaau7MqSTw96Ey9YamcPQ8foz0QJgO9o3IVO4QSTDxkGVG8tIOeO5yPDj03AK87q/BcvShSDL0UozA93Q0zPQVuzrtowwQ9Yc3Au50U2TxIAdC8uYq3vLp3irxdDDQ963/cPCB6KTsQzpm89o/+vGPkOLwd/yO9SJpiPY962Lx6ql89JQGVvWbOKb12zzm9g3/KO6t9NL229p08K+DFvMY/SL2atCa92FPiPG7SpL1UQcA9Rs4svBoad7x3hDO8SxBYvbefN71OhZa8+iWuPAzjSTy+VQ+9cgTHO14lq7wFnce7XywvvfHheDx/oKc8F7j3vCzH/DyqJAk7I29zu213YTs/kR498kcgvZkZojtmOjO7PEbcPECdNL1cdbu8yOf6PDmtC70flU+8nZBZPaVhfztW00g9RWK3PYV7jDyCHoi8//V/vb4lCbzmpiO6PHK4O2slA725uq48lETmvCpPX71vst+7SBZrvJVaL70DxPq8dEavPfcWBj2pWGc9mZiIPVkkXz3ANpg8icABPVMVtb0TsKg884UHPa/zCL0zZ0u9FrwqPMi+abvsR988l9WyvEVZHT3+1TO9F1gfPKAK9TvWKzA8sXOkvHf8Ez0FNcO8x7CDvZOHE7yBAR253+AiPJLoRbxCyga7a05pvXlrvzzlkIk7TGzIu1H/q7wfI6y8JHKGu3GSKDwECgY9F7wIvUt6YTsVKMW8xVmuPEblGry/4iE8dbMsPd2Kv7ysG3A6OhFLvU0XCb2foly9u/KtPATmQ7vAM7m8ckEZPY6hr7yOwSc9fVB8vEq7sDxkArq8DZaPvK+8Z7qfEGM6xPf5vJmlkjsRao69BK28PD0narxnHMK7HPsXvccOgL2a5FC8XeP/vOFNqDyZC/k8D3b4PFjZyrsZAiW9zY1cPRlpSzwiXDy7kzu6PNnHQbzW8xC9wVpQvSW7KbwziQ09TbkvvMs3Lb0pQo+8vzmQPPMqj7zOyf+8CTuWu2dTgj2Xkgg9iqoRveylCzwfrBM9PpJfPIKUHz1pn2I9WGP3PIO7Pj36zr695uBSOmwNh7yywYI7wRD+u8aSqzyQKCM9YhEBvf/7rb3rx8C8cGWOPeo3CT2JKim8MlcuuxG1Ajw2BlY9BLcfPXq6Dj0Db7i8vuXLu91Darxajyu9XUhVvQoCLj1K8mA9Jzo0vJYqtrz4PaY8pjAOPWRFqLxCweO8moWgvFszCL3KI6C8HB4bvWU7kjzzGIy79nK/vLY/L7x+MXg9W5nBu4pTZr1RbRA90ctQPfKC+rzGNL28ysYyvZQeeD1YNQa9lr5RvO+vVL2JDBS9kXOaPHkmBz3+mpa89gJivAZa2LxQQNG8J6L8vMreGj0hpYI7XTeTu/AzNT2GeFE6YSTRPDh2/jlPwlK8lkUwvP2gpLzS9XM81F7QPAGPOr22yqG9T/7VPLY5urxyVXo9CxSGPGRPGj0ubwC9HmcVPTwKHb03hky9C+ghvEvHlzxNCly8ejTFvDmAwzxEy469hi3EPJ4IyDyWNKM9t+q6vbva4bx68PS8NbPIu9AHnTwY8nm9VkyKPbPzv7xEWIc8BAg6veMzqbs71TY9jHmpPKV8Tr03GIE74t4/PaHDcTx2HUA9DOPdPfkqCL36J0O8FXyHvESU2TpgX8M74kDnN0+g97xx8Ak95PkEPbgcnTwGEFc9cs47vUZUjjutVYA8U8IEvROKkTy6VyQ9/9ybvFiHmLzVsgC9Au9vPWw0njzUqcW8RFjPvD8jcD36Rcw8iDgPuDynVzx/Bei8ldafveDpkrqOi6W9TS0IvTs1Nb3sUji91kEXPV4YVbx83528sHC6PNGMbr2sNNs7OCXUvBPBhLyvvYY8avlCvYCBxjyH+Y48AMF4vC+uYj1c2ky9gaXoPOBDMj1VQbe8PdK4vIkIcb1dOo266N1NPBcbcb0bcOM6BwlCPTO/HLxRBfK8RQ8UvVzUr7zqviQ85X3jPS8ToLwiqEA85gdZvImhYDvDTpk8JubUvOcHkb3hb4M9cJEEOw3mq7zFm3Q9Q8+SvfD3GDx9boO6tWgGvX24v7yEvu685AtXvPy4Qr1ntK87d0kAPVtGHL2uT7Q8Ca6OPUfe6jqSqZy8kgeUvFsd5jz/e8A8U/UvPec2SL0Mv2u9VuPUPEwjpjxHYIY8aGFAvM5PwzzMbKC8SUqRPZMNrryBWqW85McUu4p95rz3pW492P9pPSD9Ljz6Jpk8qCVuPXwiTrw+I1c9
  10-4: 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
  11-0: idENPa0Zrrx65Y29etutvYgaYj3sJ5w6LE3uPF3hIr1o/NQ8Sou1vWV8Qbx4Mwk8FLyZvbaKBLyydQ29nV3RvNhhCDwmwkQ9VkBJvD1AzzzUky89HZhGPQaJvjw//xg9TwkhPFCqBDvpVVU981E3vZ0D3rllGkO9CU5hvUIKTr1XB+C88zwpPKUOC72+aiC9MvAdPRE+vD39VRS9VcsdvbvFnr2PETy84rujvcD6KbwtOR09WL5quyazRr3IGCE9oK9LPI3eG72IDmg9NKKovff3EryElQq87UJFvR/cqTwUrMI83PlqPZXEBL0zAu08GLC/vI+qjT144Au85XwkvSvP3jyYZKE79H97vHADgbxjdP+8ao8sPXbc0rzqTxG9Jh4aPSkg57wqrws95eNuvZ/djL2hhBM8pOVyPBdOR7w/ks+77GtavFtwnLvshJC8x/YquxbEwjzEhtk8NHb8u0Fe6Lyuqw28NDxtvV0TD7yzB1+9727HPTeA+7wDf0C9nnQDu/ETmrzYDlC9FMe5u+oLHb2q1Ws9y0HmPMXOiryMyDe8ImsEvPDvML0DZJ08MM23O2geKbyWQkG9EEzau/qlnT3MUgy9q9Y0PWAuFTs7lyO9EDfHvPtXnzzJeNq8sHAVPc+T3zyu+Bo81bWavKb9mDxPXx09j4UIvJTjKz3QtTo8cVkGPc61JDwKmjC7IcK2vIYunDzaIpM9AFbYvA/PIr0/IV468ELRvNBRyz3J51U9Y0a9O/F1aD3JK1u95eodvZmUxzz8vUs91R1COl+SBr1OqS68cpMgvB31AbwgwaW9MTB8PDqpjzz2m688VoQYvWjjh721U1K9KZ41vS4a3buTm9G76BnfvPd5w7xFXIc8IkFmPKikrjyrQRS9KNAXvSqaTzurXgS9mgnou7G2WjuwfIE95P4aPSR+mD3oagm9sKAxPR5HmDyfqSS9nqM8vSIKZ7z+eG28QMicvNVlhj1V7Ys7zoaIPTwS3Dyzc7M8/MVivHM/Fby4XEa8vg9QPd7/vDxer9u86e55vOkxgL0jO/y6Z1fpvId/dL07BQS9cgwcvGU9TT02+uk7ojLGvJ4AYD0a+NA8QmGcu7DyNj2Z60q9ZwIdvOJ9bL1L+sA7O/VqPH+pPDy4oWa9xlBNPTnLUzwz6Vo8aGcyPMiN0z3tGzI9ueg9PEpeGzwPEam7giBOvJvvYzxldGq8ZoL7OjgKlbxymaE7nlLdvXTwur2Ebt88ueadvGo5TD34my49KNgLvPeAHLx6iYm829aOO0fbIT3aBXa8pa/HO48V5Ltt22e6UlOCPR8jtLvmFYm8VIUyvC05ZDzwmSi8k1O/O67K9TuwUda8OmQTvRrwYr2J3CC9j2PuOprs2bt7wO28uoV5vUglg7pA8oI9uwAEPQCVRrw2t2E9bylDPJ89C7125Jk6IKa9PSPdSrz1AxC91jq8PO1Khb2uxpM9/RyIPG5nlrxY30m88I7ovMnE/jzFURe8yvqkvPvP4zuTAag8bFqbPIE7xjrgjbs6P7TpvO98dzwOio49Rr9EPYzqgD2iUzK8aWLJPYKLnD1KM8S7I3E2vYQbOT20FeG8TLWwPKoiibwGqQS7Y+1gvceKQb3LLl68ETwwPXguTr3iOCu8JGpqvAhMNrznz0I9zb0LPZpNUT1JwWO986sbPaL8xbyDKtm8VBaPPOAocD1G94C9dkMUPKL0Jj1ygdm8ik7vPHQpn7s6nW88bC7XPBhdiz2bKO28dch3uytCh72bQls75v4aPYkJ9rwwUEk8KQcJPTEsazuJdC+9n0fBO3tClzxm5Zs8oFUHvLlnUTxQZc87X1fOvH9Cdz1SP3M9XXcWPakOl7ykTwA9J+/9u6IkxbtAmfk831CiPVFmqL2QKVc8fckCvcQdujyAqeK8WO6PPNxmOL3tRzS9QQ7Iu2rRujubHsa8PmCkOyBZCL2v39o9b8HyvCr8PT36GCM44Ebpu2pCxLzAm0W8rTAGO/PhqzzW8qk7KgabvV2HMbwsXYQ8QWZYPGuLJzwMNJA8dLMFvUehazw7KxI8Cgo6PKAACLx1Dv48IWQAvTz9srtuI1O9kkARPfgGIzxpt4S81ZiZvKzylrwtvza9abAsPIpc/TyLxI+8MA6BPA/qAjyf20A8wYvUvHpgAj3g7CM80UDdvFWXTTw/J5Y8X1khvV8D+TtD30+8SfCSvVnuxTwGo4W8nrGduvmd0LuG5JG6KI4qOhRMHLw2pQG8NLWrPTi8ZjmotoQ8RKt0PNyyuDtVBGc9j+jdvBR3HL1tFcw834oHvTzFAL7v7u+7mrVDvRNrgrvWU6q97Db7PM35fT3h1ne9ZL7YPMTK2DxjBsA8b9p0POsewbqt33O9ysyJPdTeNj0EcCa9ALg4uu+4Hj2tKzw9HLI3vUZIkj2ARt+85vgjvehhIj0ua3+7c5IfvagN6TxluRE9mUlqvLLYcjzvccW7+q9iPcmue7uzRk093NgevS9hLz3TzeG7qTIYPPYUJbyuwEy9HoXPPLktQD2SN3w9waTxvG2dIr1qdXC9FZKPPPgwy70nzDm83uQEPUKQUDubwCk9fVLEPLbd+rz//3+8X3+9u1QLEjw8kek89TjEvKz+L71PjoI95EONPJF4izqvSW093QgHvCawebz64Vw906XZu2QeD73elim9yncEPFIdebwNeQ09PGZruo7lir3YDSO9dIPWvKTtRbwkK5I9uAhDO1ThA7zKac48UsCKuvgZqDxq5x89ueHMPArptb31O2M8kC+dPGMy7bx6wNS8M/UPPflLhryvsmW8U3RfPPNMIz2OtZs9vqOzPI33VDsuuI66S3D5O5GnhD3IxPQ8AawBPVXRkjfmhMk80QRFPZjsuTwEbRe8Kk1sO16Lxzy3wSw9BU68uxgpJL3sOqc8NEl2PK/QCr2Xq/k7r0iMvRSDhrzU2nK9TM0yvTF+iTtidRK94+LoPGEfUrxHxoS8WccpPewKgb1dboC8xEMaO+XRSD3zax+7ElQ2Pf9YA7wPVNS6RZqFO375ETz2VKg8H1cYvbhocrtScN886ENQPZ/lEbtqfRY8W2DwvH+mE73e9Ew5gTnKvHtTJr11K2S8YcUUPbnD9DpiyQs8M4bbPI3CP71gsQu8izQ8Pccy2zs7EKq7lfH8OsWoILsZM+I71w1TPKuZortmNBC9P2gtvfahADy0xKS8nDYSPVGMED14il079SkJPUGI5Dsyhoa5MmwwOxat6LyT81q9W6yovJA6vjwQw928a0VKOxb7az2a17+8wjckPWnJyDxhxCS8KXKQPCGVHrtROkm7WZTyvJWbNryBD3W98rOLPa9ny7r/RD+9oEjhOU7rz7zcDKA8nRsgvVHqCTxawNy8px3vvNMIBr2iZZ28zXofPMobXbzWlyS8arCnOy81jjz56Si9JDrTPNrHB72kR4W8CYGvPdioqLzza508YZnTPe/CD7xNMfA8m6KpvBMJgbxXhjm93UqhvOf+XD2amH28zrPwvBCwTTxjFlo9cNPwvPOI1LyHZvy8cu4vPOUaU7xWpio94mgUPX+ZOz158KQ7P8z6PB8IXrxnU1m9r2ErPQA+Uzw6bUk98SvCPRdCbr2ahe68ueL0vPL1AjxLDLu7m+gCvOzq7DxLAIQ8+8KJvDmZyjyWNUO9JuhGO3vg07yCSIq8XMOFvD8EC7yxFQA9iRvbvLUdhr0vSHA7VK0Rvd0Guj11XA28hYbiOoplzrtNP3E7jfsXOkI8DL2xaLa86va9urCUAz0/iUQ9AtF0PUWsMr3H2Gm7mViLPNLh5Lxwr0q7quFdPdwYAj1pzQi9Qek/PD71qTzSlAE9cgN8PcFavD0nIqi8CRCHvDWljjweWQ69pcnLvGsYHrwTxey8YQKRvaJ6BD2S4rc8OVggvRW0GT2g4se8GQbNvEejVz1looC8K6gXPagxCzwBFDI9jK0fvUAbyLyfpW88YrcOO0cCGDxWxl08+ItgPCA6Gj0zcxO9wQL2OXSzWjzlDJ28mOj3OnV/fT0DEp28M8aavMMikr31fZW9d2QnvVYgJr10I289VFnWu5ENgrx/qUK9
  11-1: zwqOvHdB9btmuGK9FsaQvaSgtDyOVgG9/iUVPFB13Tx7XPg89BlrvdywUTwP07a8Vh7ivGAmA7uy3Vu8yWWSPa/r+rxneW489tLqPLlndT1crB89jTfSu1gqJzyHKE09nVwSu09ajTz2UYk8yP8rvB3g3jsxRVe8mk4DvTTtGr0ChC89PWRCPRBwBb3vrgA9gP2wPO6Qsj1BpGO9H/D3vBDWlr1J9/U7lxsbvcF88TwkJZ09l9/FvKwBE73q5g09YXhmOyeZwLr6PCQ9citCvVhSrjy9VT89EkwtvYS0qTsL0ow6orGCPQzs/rzMvVA8UUuBvZIPjT1JFzG8i7w3vPrFaTxoPhC8KeFqvYGL5rvOElS8F/1gPdM8Ozx0Cpm79AlyPCLq7TzKB1A8VUMEvUMeirx9ip87EtjSPKiAVLyJxoK81+JtvE6jaL1ZgBq7DyUyvQcHxrp+uN885JeqvEY0sb0Vm6+8/QwgvY77jzuy14i9+0mYPQSW2LwAFii9BdYLvSqXKDyr4i+98dWmuy24h72Gw3g9JRiEveQoo7p9/y48yKOivBTu8DtFdZu8ZD9sPbWR3Ts5tty8z7GVPRnD+byTqIq8UJocuv90i71Qbfw7fZg5PIfH9rw0Hkm9S4crPcCA3Txrw4e7ieibvBfWRjtXO2M9xz/gPKc5/zvY2Dc9Bdf4vEi+sryJnAi9PG8rvVZP87pX9QM9fjnTvNbBgbtAKLe8kis+vUKCUz2cIYQ9EF8rOzs7nT00Ci29LCqgOvl0mLvwgMs8BkYAvKVWI71RpRG9fUE3PPZEUjzG0su7jXDkvHNwW700JiK7UWOJuxCeor1zoew7yTKivQwPwry0pB67XJBcu5u7SL12UbE8ib8FO1GGFj2HFcm8Cnu4vH8Drbwb5Yi9mtC/uvsxirx3yb08NLG0vDG9Iz3vX8G6RBl0PV9NnbzVGZk8nzEJvBPDpLzanzQ8pAezPBFUcz1cYgi8lfUXPfCZAz0gAu08L4pYvcwoJj3mvY08btFQPJEj1LsE1868OS2UvOWK/Lxf6CA8OZB4vTR1fz3Naxq9kkjQvFFGrjwhMKu8j9wEvce5qzxoCSG8soalu08nFz06pz29ZJEFPVlM+rwINAa9HzBQPOXlaj31IE28GzN6PUoowryoVU49rJwQPRrQbT1kNa08B13eu1yQpbw+NmK9IrFbPMzQkbzRzaG93TsuPAgARr0BdGe60kpgvXKypr00awk94KOZPMp/nz33XAQ8WdtCvbvHS73JnqS8spmjPHiG8bsteRC9XwfUOwGmRTzROy48XM4EPfODbrp5oz69u2Q/vCftND0WFbK8uThGPIYjkjoC1AC7Qdrkvcye5LxGRk69UYUoPEc0hjw+9+q6BLDuvLNwLb1yHik91t4TPZaRAr0PkE29JB05PPGzkDxE7io97cIQPlOCpryzfE69qA1hPRNdRL0oH5k8mK8EvYWM5bwGkM684SH2O6E1B7wHF4i8qjyMOwq4ML30nY28U6guvKGVZDyyipG7rrwOvYv8HLyjaRs9LV5fPWfUMbx0pZm8pSR2PPFbYTwPWpu9glKpvGaiUz16IQK93zwbPCSCabwcMSW9wdiSvCDFCb3Ffho8dbzGPGxev7pEFVG9tTQFPScNpLsyIf887Pg2PXAtZj0Ev0C6YXGHPARmeTzCxRK87To/PXIahj24M7a97qQduzKdbj1jjb68a90/PaXPPryOQCO9TuQtPSB4GD09Nr+8LGWLvGH697uBBvs87OsdPQ2iM7004/S8LP91PWzE3Lw3sY+8QF8fPe5tbD2s5i08F0wgPAzcBj2guKq8n7B3PBJj9LsU+9W6xfYtPP6xA7031SG9MWOzPG7s47xkW+Y87G0vPFLiRr3vrIc8Xonlu2AUebzxKR69z314u8TCRrzO3bO7tIs1veJHnDtaXMI8wtlnvEh6N71Fa0Q9PNe7O8wvKTolJAs9ibR4uwIPNzxXgQK9McNFPUKeHL01D+484vSIvcbszDxTNM46Ok/kvL38wLzOxyQ8EysEPFYsfLtzMhQ9dRVaPJcQw7zPKAS8D2YivYmknbzQy1O9C6hAvMg4ODvKeky7Tm2FPFwMzDpg39i77MSuvIbX4ztShgy9ymtoPUkIUz35wYm825QavXxVRz1CDMk7dJVUPFMMfrxso/c8M8RjvG1iBrxmhcG8NfIqvW21yjx/lbc7r0VUPO632LxlNTM8KGZzvI3kjT3XGoa80ewmvGNGATxrpOq8URMNPEdwVD3BdQw9yIsrvNmmq7pt6jO9BJBzvBNdxL3KsnE84ISbPC8KRj1U6O68yIb4PJUeAD5dzam7v7V+PLUIEj2auIa8UnF0PU+T3rzgmUK9hnZWPcfneT0sJLU7toVcPWClbjyWNo49Hj5KvRBlEDsxuW695vQgPf6vu7zp34S7gWKfu2c6SbyUPNW744afvOItTDtuYMq86J5FPa0GIL2PNBw9poY/vdMSQTwotQ89LAPoO+4s0brldxO9GAhWPX+YPD3nE4E9OwQKu/wq9byV2jW9FgcHvQ201r2n/B49fH8QPaz3abwCF309DyH3PJNnpLyhGqW7+jMuO97/x7sGusg9po81vbgOD72xWGo91cDRPP3xBr2U2Ug9+iwuvYltO73V1Z099V7TuzaYUb22bR29TZxlvZz/1bxCxCQ8S0VaPFn1Er1B5gk7IPdJvVMq8TxHd4O8Tr8APWgID73s2TE9rMnMvEZ2ajzIK9C8f5MHuXl1Cr08kZA9PSz/PNsSCb1H/G29XSgbPFErRr24XTA8slRHPZwk9zwweus8a3ArvLZjdzvvaLc7zu3GPBMCzTw8oCi8KyQYPQYDyLwJIAq8gj77PKj8qjzzUo+8ulaIvHXmDzuQoQs96NsPPMLc7DxLcLW83X5CvIefPr3Kzwe8jepgvAcHRj1ULoG9g1zuvE6Qd7xsUBS9ELdCPIlo6LwJXss72uAkPZZzw7xqgvk8r3cyOlLVrT0LZdo8wDxcPYJVOrv1Vj48d78yPE8vrDvY0CW9Y+n4vNe9TD2QF8c8f3PSPHPPjbvJ5Sq7Y6rQvOUmKjxcV0o8h/aMu7bufr0bW5O7EsWXvLMlGL3rpMI8V9+oPWpMlr0l8OQ7QkxYPNd/Bb2/pl87bs9RPeCPNLxnoqg81F8ivWejBr30uF29QGqLvO5wGz2xPLk7bD34PF/gCD2shrI5prWMvSk4iDy/t4W80eciPdXZwLvV4xe9lhssurE1hTibQLq8wpROvSVfxLxDOSm7BZQFvNBjQz3LK6s99i7DPMXFQLxUevk8M4CGvZ2dMDw36cC7HdIQvKBKBD19Z7y8SBcrvHFjBb1rQnA96d3zvLLXCL1NZ8i8T4+nu6K8qDxxNZm7Gq/pO8Gx2jwDzPW8UFnjvBo6D7u+hx29u64rvQdisTn6v5y8alYHPXaRibwMvK47VwOBPX5ktLwM6Ng8gKGNPKglvjwddoe6R4l0O4F5Qz2hBHg9rBwvvOrzzTvnA4g8/iwRvfmAHzweFNA83fWCvWDM2jr1aqk7XHQWPAG0djzvdys9TxAKPfd7kzw7kXK92rfCPAQArjuUA5K8OvaDPUlBJb0l9k+9pbjiOnMVszuuMTI93XYzvXucHL1P01M9Np2Nu6WP5jwXBte9UE5uPfpQibuqIyC9ALsfvDLfFL1fkRg9VYJjvRfIHL1kkQi8+zKfPD/vpD1KiAy9RBilPHNaTLx42iA93wwsu9A7+bz44x+9IP5Ju1tgBrwG7QE9NT67PWfclToNBhu990W/OjZInjwAmgG6JYipPSrDAb0fyj47bABDvcDoZ73xiGY93L58PHBpzD14+oY8No/Eu0ndwzyb7MW8PqYZvL5EtDzMPSO9ho2Vvb6HfzvZtvI8+1axvIF10TsBCqe8EydOPAA6hj1bB4u7EE0FPMMwAj1TQn89xWEIvW7aRr0A05A9SoNkPYsISL1EyoQ8W8VwPS9+8TzVtow76SNoPOwNAz1xaL28hSgTvP5RuT29swo8LIutvC1eYr2EH0W9LnPcvHacYLys0sI82YVkPR4NjzwWFWm9
  12-0: 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
  13-0: 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
  14-0: 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
  15-0: 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
  15-1: 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
  15-2: 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
  16-0: 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
  17-0: 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
  17-1: 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
  18-0: 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
  19-0: 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
  20-0: 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
  20-1: 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
  20-2: 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
  21-0: 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
  21-1: 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
  21-2: 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
  21-3: WwE6PS3Wd70g1ee8cNU6vbROs7tPLiE9WYaqPLDhbb3nOZG8H5sEvW2LZDyhM3U6/7kUvSp/zjxEJ4W9zHBQvdVy6jsKKzy8hHPnOgZAwLwIhyS9BfgXPXHTcTufwvW6p3/ZPK+JbLy83yY97bsIvTtT+7oWBV+8Xo/GvQsNEr2BXGS7/9mOvIloLLzCfIa9Ge0CvL70HD2QIY69Chk+vagjaL3plhC9IFSEvVJlfzt4bwK9VlBVvdLVjz3jIUS9WRGgPOyX7rv1A6I9V+bDvKHU5zwqNqw75cMAvQHM8zzamgk6inkoPdzV57x/QVg7rTm/vLngUz1z9tm884RRvK5y+rwLGz68U/nkuy2AlTzzKWu97bgkvUb+m71HafC8xf32PIwwTrxSjhQ9rvU9vUkDpb0hWzE9Kl2WO/i7HjvGwUE8AKfvu7c9nDy5omM7by3fPHVc+DwiT7e7pr05PdNgYT0fVS+9ZHPXuvYKTz0v8lm9+moOPd7eyrvhc8o8xtGpPeRztrw2ND+9bBmLvf6AgLwl/5E8VnapvXJMpbwvfJS9ZNKbPQSZyDs1F4A7+pkPPXyGpLvByN68yD7JPGUJGjy0BZE8xeVCPawW+zwy0LC9E56zPFxgSz1QFW07awj5u6FHdT2NCC69wgcoPXpWrTzTaEI9BL+QPKSHujzZZPm7qW4YPdjSeTyzDTy9QB6jvAPj6zx68hY9/5/yPLrgQTqI34W8P8x9vCm5ZDxGCCI9jrxRPbgMRr2OKwO9BJ4/vYgzjzxwlJs8Ss2APNoQkL120O28J2AovTgSqbwyw/u8kDYnPWEsfz1+NFA96rttPJPfDr7lxMU88wlqvSCt47yE2a08rBBNverNHb2inUU9i8e/PFWUibx2hZW9BVYyvcAFlDy5i8i8+y3FvOIAy7uBTlE8iKupOnNBbTy5UeO8rgwXPbs1K71mWWQ8t9qJPIljILwU6o06WaF6u6kkcTwEUmm8JJcJPUonMbzvNco8T3BlPB6BS7zKvb47BqBPPN3QCDs/72g8n8mJvOVSJzqGewU9gt4vvKufRr14W4W8JZGXPJ79o7x+0ag8JK6fvU3ucj1oCDK9WR5kvUD9gTxIrKK8xMNhvfRclzyYWj89nWcTPR7htDz+Ce88IX2svHMFgD2LZ4g6GKOBPMOo9j2uGcO81AJHPKs5VrzMezm8YF1Vvcx60LtDGRQ9Y3SXPMR7YbzqN4A8uX/wPC71vTxxRRm9hi0gPX1bXz1XdSg9rSG5u3Pglzz7Vqy8/lCkvfJevDzTAbm8IesAPXolDj22+y48QH2EPQBtmD3V3Ny8jL6jO0UHdjmxEzu9XZ0AvSlGvTydI4Y8as+KPXZHLb22FjE9tfZMPVk8w7zKkX08VSzCu0Znrrx68xk8dFq6PFPw3DzD19o8/2+8vKy8o7zLq568L9FYPV9Miz2ZD5g8gtp+PH5THrzxa0u8VZwouh9+ED0Lj9E7vfEavbcthjzpO4g5Ak9MvdM+Wz2K3Bw9qDNNvBYLL715hI29yvObvHzI7bywxKU8jmwzPJAGbj1EM4c8ztYlPSf6Fz1UqZu8Yz46PcqArjtCaas9hVikPG/IvjwT8jE9fLCQOInSlrykccA8+YMZPYMV0zvq/1U8ZhcwvVpLpDyuRGw9fz72O4lM+LuS+Zu8yRguPXPwg7yHsWi9KEsvPMkq5zw4Z2W8ITOQvDseOT0DifW8qpUdvaJinjwiekk9v3OyPMbB/zzm12Y7EkynPDD7Gb3whoi73DuGPD9IpTxBUdO8zk3juw0Kjj1OkyA8YtJCvfh4DT1F9bi8FFmLvB+Tl7xWOHs9OJx/vdZ7sDuG8CE695dcPYyD1jwmKRG9Gg4tPVBI1TpsUxC9o4vmvOf2nLwJDCQ9dk/1vDx4DDwO63i8ps3PPHKpRj2wOom76keivJKDqDxCXmy9YZxAPZ+4vbzgapY97+WIvPRzkbw0rti8YjY9O3P6LDzcAUG9zvnBOcPMeLy29b28Yc4SvP//A70g+rY7CdQ3O6BBiDzktJ28FpgYvTV+kDyPu586Y06DO1ADprv8LGw9NJ7PvACDkTqUFX48oJmzPSzPQTqTME+8/RllvVgwa70rM0m8PugSPVykjzwWaQM93ASAvC3kH7weTIg8qS+bvEhICz2bpAg9FuAcvWIHxLxcDRk9WWklvUSx07wOk/q8PAYhvLmKFr3AwbM91VPQvPMadD1qtRa9MbVpvUa9Wb2aflk88t23Pa7y67yOnaA8T63MvK7j5rzSyeA82EIgPc9bZb2tA4E89rPzPG3LZr0q8wY9TKWgvdRICL0Favu8WwcePMI21T357+873LBKPQD1Kj3PKiY9L1CrvFHiKjxALKa8APuWPU5Yir2xhuW8lObEOzSxPzyegOy5z3cJvR0nPT3YkYy8ZryYvQYRLD0RR4o8LSnXvMkYtzsQe309201WPHRZ7znoIVi9GaIoOtQ2IjzKgti8Jtyhu0CC8rxzZGm93K1gPePiMr3FGjS9iH7DO4Qp2TmQbuw8R9qFvEQhSr1/tcu80ms2vSXANL2QxuC8raiBPBaCgDwHn6A83lNPu//tnjvpKhi9/nDmOxdWsLxt1og85gUMvXAWRrzp4MQ8IzTKPAHx6DyaNII8IhH4vPzFAb1H66Q6XrKAu9x+GrygtVM8I2eQu/URnTzk2pE96XJMulNUjTzw/iq96avyOzpxGb1n6l09Cn9uvcjrkjt+hCU95tbuOj5Z3Lq6f528pTvePCj517ziUXu9FVPAPClmBb1NXNU8yekUPY3cO71IP6U8xtKJO5W3BT1b/UM93/cNvdENJT3b5368+Bt8PEJ6RT1Egi09j83mvAJVk701jXc9GTiZu5NfirldCJU8S59GPZt31jz5B0E937QAPN52U72BerI86bkdPOGItjyP0kG7gpqqvBLY7bz5ECi9EdcBvQz3jzxM8Ou7+IYtPMrbJLuZJ7o8h8W2u7bezDwztJW8DfyKvccgQ7zk8yu8epSpO6CGnDwJP4M9RCc2PMAhYLxDjqc9p++ovFL7ADz9/g292IRHOy4y3jx4g+s7kVjIPFmw7bzQ+B28bCmovS+JF72e37S8jobgPZewJjmeEII9vtmXPK8cL7x07oi6rk8kPZf/NT3Mlgy7lJvvO7krjLwsKnq8oURqPY4f/LyJt4i9hDxgvOorm7sXO/y8KM1cPTUamzvww169aKwJPbppPD0Mulq3b5gsPXaCAjwY32q9sDScu0F6srqKauS7mPe8PDXqMDxJLYU9iGTvvCzxi7uEe3K9MEABPYpaSb2wmzW9kQjSPIND1jwY2/g81tmGupeDVL3IVE+97AkwvLhcNT1siAk7zz09vTiOAb1qspy81ZHQPOTQVL3qDO289YQmPYgQybyuzIS8wMdwPEPJFT2c8407KT3ku66Qg7xI0fa8zf9nPSsPLbxCLxY9wENyu3e8aTr7Mqg7x0USvOsanj2Mo/i8B+8MvNn5jD3tCWy8M4XRvIo2TTmX7d+8CNCRPJs0vjz13YI7sjkWPEGjMryxsaU9olr6uILIXz2f4I27i5K3u31ZEDwKIGS9pd0jvVDixDxq6Vk93xNmPZWZP73xChO9vDcCuzlRmjx0sIq9fH3lPLEg1TyxUiu8o3YlPQrQsz0+bQq81r+bveapQ7xBeqI8OhpXPZWZJr0kvwe9or+NPLe/+7zHPjW98pqOu+nN27v0k/28bur+vJNlF73zRlE84XjdOuyoszyan7a8MzQkPD/GvzwI9pO80qm2vB39TL0j9aK80oVbO3RVdD13Teq7aKWYPCzMJr1t3IW8az9TPZ65BT3lzJU84p+FPUpXBT3lle08CdiTvIMN9bpbloU7KEsWvVzlS71vFM08dX6pvH/aVb1CeGC9vxRmPN9dL71YRNi8rPTPvWuVHD25np07zB0cPdMlHb1qe3O8+Y3AvMD23bvE1988WvBNPM1K6jv7sdC7j4lpPYa0mj2cpSA8iLBNvM3SNrz7y0i8o/xWPainujwkwga8vrIAPePYkb1pLtC8GPCWu6cjDD06VpW96ZgZvaVRjTymFR69
  21-4: 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
  22-0: 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
  22-1: 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
  22-2: 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
  23-0: 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
  24-0: sCDGORfPKryH9nu9XmZfvDLNGT0B8zs9xa+9PBRKqjyJRpQ8bd8dvTEA+Dyd9Rg9pqElvQmzALyllve83/itunopq7v7eGU9LjHUPEyuNT3y1Y48SSSuPOXHNL2FvDg83T94PKCq8TzuZS89eb25vFs3JrzB3n+8Hh0FvVa0p70N15E9ms4WPQtC8rxly0O9DFvSPMjasj08aAC+qsGIvb+iMr1UDIm8RNW5vNh5Qrz+ACo9nszCPFqca70wulg9dnaLveYiFLxMtTc9HMyEvZrxqrwqsFI9DjTCvO0IhT2Efb67ApSpPYdghDy/uSo6Ri0kvQtAdT3nRFM9g/K3vCzEPDxwvCW8rqvAue6rvTssQBG9dmsaOiZkBL3HwrK7wvorPVjDjLyOyoQ948cSvY7Tbr1d+0w9NO2VPNJv6Tzwm0m84UsQPGJQkbwLwM+7+lfCuraqIbyp28k7WLlqvIz2X7xXwIi8aBVHvIGXu7y6K6S949CvPccXZ715E8e8aJ07vCYNlLxcUue7A8owPF6Pj735jtc8ZOWCvMRIYbvqN4U7SiEcvf2y2LwqXQs9dcQgPbnpFDtO5Nm88pHhvA/mpTv3+XU881cUPW9Rr7xkUtS7uJ8WOzgkszzLfzO9KrHbPMi6mLyrS128eGeZPMJJGjxJgMI8Pl+IPEjmOT1xBME79TSBvT9of7rLM4+8NwGpvChEuLvUYdg8CwkUvNS+XT0dH9O8GqeCvWUwfDsigCo8huMWvMortjxe+pC9ITc3vTPbo7yt6eg8sFD0vK5OCbyxxBy9Mx/NvLLmNzyGpWm98z3jPNlmkDw2h2+81EYOvWAJH70JbQq9ZIyJvF8eK7yLJho7Dvw4u0Wol7ySFjc9efUqvCeI/zuXMEi9dg0SvcyBNT2upjC7qnj7PJyQ4rzff3M8Jzz7upnfvD3dezO9xqUgPEou07yQlaW68cpdvepiCT0GAN8899IrvLpwljyguEm8FHRDPSNrrjwqUUc9+VcwvaZy+boUloi7b5HhPE94MzwFkHA8OT0bvZg1VL2haP08NCk4vPDsZbwMD3G8JttdvZeaMjw7ME48zKEFveTvyzpxemg9QqLOPExgr7t9pyC99QfWOlshqbsobts82eUyvG5l9zxjKNO81jkvPc4LfD06gmU8QgyVO4Z9iT19jY49eBFBugzELTy3Fbq8S+vnO/aQiDxKPom7nqEUPJqyirxA+Zc77IYAvaZwLL0yqcY8JdojPRNIDD2nd0g9uH3+vIdM7LwgEvq7vFqOPA6mET2qCLA7DDzVu8ey4TtuWHS8mLDOPHNniTufNcG8vROgvNb/cz3bfOe7nCGbvMYrET3dCxO9WlLJvLsmLb1lCYy71uf3PBQCiLynZYo8h4RIvAcn0LxmJKU9Qq0UPLyiobsLh1w8ejoEvELdY72dai88Ym5MPW2ICj06dvY6GsEevSaciL0R2hE9oFSoPIJ1d73bCaI840QTPFwe+Tzu/ge9vvXrPDSFTDxR9xA9eUE2vUMHvjxmLEk9feHXvHO2RbynxPc8BgUlPcawzjxaaRO8OUlAvDGFST17TFW9arunPBWXeDpqFiO9Rz8+PFmJeDzMlvm86qN/vcmWU72igD88+ZwXPAONqLynCce7ek/lvKY4nDxqyA68oc9HuttHD7pgdxS9SVH6PGvekT0Yb4S7SSSUPfHAUz0tDZq8CzEevDosDDxCIn68HtnFPFXlXbx+Tgk9ODgMPftK1jwqEFK7OTRHveLfMrztdIO9PhRkPEmIBb0T40W8mE9fvfhJn73ykoo78RGFPNxqXbzQSAE8nxGePKuB1TxyyxQ6QEY7vMgqHD0G4IQ6Evw6PaVUn7zVLRc9WTHMvMHpljytzMc8LbrnPfg6Eb3YZ7g8yAzivBYENLnr7TK9SGrvubzRP71/THg74Ag3vZIrh7zKi6e71R2NvBkW5rrkx7o9OFFWvIQzrLw1A2s87pv4u+th4bw2OJg8dMMJvG1C07wpk3C9rmaLvcAYkjhXHpq8xjMtPIRcQTwHH+q7CME5veP6ELv2Jly9e5tzPZnLvbuVi3E5N99OPXc53roECgm91ycfPFpbC713+y29b2OvPJG1XztdZ7i7CtZ+vTdWETuTNMW8vR++vAY1Jj0wpRQ9g+UTvAqzBj3j+gg8uAFqvHmgJDxtZp06XHUYvbgWBT3AAl+7DrNkvM353TwYhAq9jca1u6+JLb2yZui8UmMLvVJ5jT2uwhu9igw5PWxCBj0NHd87ZPKePB8Hsbw+n3U8UifePPy/C702+1I9rbAWvSHvrL2Gjwu9BizEPONsQruC43a93MmjPVYEoD2E0oS9Hl2CPZJJOz2lC9i7SJ11u0msXjtIm2C91j04Pfo5HT2H11a8UkqxO4wuLz2lRvc8RqAjvcvnETw0rrS9yWjBuwwj3DxYOQK8ckOFvanYkLzb0N66kMYSvTXBd73tpdo7rimrPURgBz0mvzg9UQ2EvXyYDby4H6U8rgepu3ysijxjTaM8Hd+TPUajCDwtbog9zCrDvDrqgb3yEhG9Lik8vCLyob39J9S7lK+uPIMQ9rzEmaI8YvcRPOm8uL3V1UW9ItkKvT6EM71YIlY9522WvOSF+7wQQ8I9nH6eO6ZXNj0FtoM9G0sQuXzYqL3Rz7m7AMGlPH5gZ71Uflm9mksUvXnYK726pjS9GfGjuiGMNL08Dog5orogvSjsS7tYfJw8jcihPPcwI7y3b8A7z/UIPUYB9Lna9Iu9lw4ivEaDAL2TP348X2eSO9W2Lr3qvhw8hqnKPER3Hb1bwW486zeHOxBiN7wRUfM8C8HPu3WsYD32LM88WN38PAYlRT35NKU9AvxUPQm1Ib1fcOY8rY5ivMP3GD2unQ698rrYvJ6PBDyw/0k9WPdEPQoCED3r/2M9lCciPOviXr0Q30O8k4VauyL1TT1JEbG9cf2kvLGtnjtx3MO9RcOjPNSLTb3S1zs8/zwhPSFVU72NLYE8YXIgvPnvij2Dm289TY/CPPkHzzsuZTk9n39AvCXw3rxNOOE7jvdGvcJ1ib3Mv/g8X3e0PI01t7zKl6w8MaaBvUrXDz0R84u8BBEiPYS7Rb37H5Y74gtpPCWwLz1+4Sg9ZUfXPP9PZb0RSua7sawxPPr62rzrOQY97wfqO02+uDxnIo49LuDBuyRwuLy5Xau9HwDFvO+A2TuRc9S8XsQEPfLfg7xwOQ48eSZZvY6kuDwyqJ48JP1JPeALnzvSYKK8AwR0u5c/az3Esgi9+iARPX4MMjzmySU9e3j4PB/QiT13i4E9O5qPPF0U1rwU4K28u3pdvQsOCr1pJDi9kkSTvItNAL1vED68XZUqPbS2YLzC4g09lt4Ouvg76DycHUm8ppQLvdgusrwYPIa86tACvTg4Pbwqg168kG1ivDgP8DsOZN+8CbvPOyGSVLyRota6X9o3PAWNkLzW1AQ9ttyDPS+rcrxpiBw9FkP8PIKogD1xPhO8hHXIPBxEkDx7v2Q8sgsRvV+BIDyJ1488ij4IvUpbL71symi946dNPXTrgL13rQS8oCWbPQYotzvI3qM8rgq7PBJMAbvX5iM9AchBvQHrET2qCLM846lNPZ1kMjzR1Mu8T9nxOTd4CD2fWjK9toKIvAjZb7wRHqQ903ZwPGY02DyrEHe9Y5IUPa2T3jymvKQ8iwSIvJV7jLuMNCq97aBUvCLi9zzQ2D67GDxhvDmfuD3Ebg69LF3NO7u4gr2PF3y8b7Y9OioTK71YBsy8hcofvS7HgD0WUCk8HOpnPS7gk7rCKcG7NmydPCoQLj36hGm9hTybPbiKoDoDMjc8X9qpvP3rwzzBX2E98Y5XPYkscD1yUMm8YiVhuU4RAz0tUzs9fdIBvVMbNT0PaN68KCxZvZe4kbz8QZK6hmKfvGOevjyJYOu9oaQRvXfCLT0czfO8rjHhPIIyZjuo05o9vM8avecbt7xLx4U8GI3bPOd/mTvgtbi7eKelPCqaST01FQa9cNlfPevzcrs/hwG93ypKPCgcvT0krYE8/wABve+OQ71H5Nq8v//SvB8EtLwY9v66BAB3vDNDZrxljwu9
  24-1: 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
  25-0: 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
  25-1: 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
  26-0: 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
  26-1: 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
  27-0: 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
  27-1: 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
  28-0: 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
  28-1: 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
  29-0: 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
  30-0: +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
  31-0: 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
  32-0: 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
  33-0: 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
  34-0: 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
  35-0: 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
  36-0: AwoaPaXeebz/7oy9VsCLvXg1k7wfoXo8CWvDPGMqsryBV8m8FHGvvfimfzuAvmo88BWDvKFCEjuLifG7alyvPOXY/rxvrM0861UgO/iebT2yJy09si0MPDrz0Doc8oU9VUpjPDInebud3No7S2oDvQqsJL21I0W913aJvQ9CIr2Jfee7difOu7xxcb2aaIq9B4oWu6boej2n1Ku9A5dZPOWWfb1hd9W8KSI0vd1GsTzHZSI9dBHhvCy06bzyxqs8yQA8u1XMdbzL/Uo9gLaovT9FrLx3o+E8hyHlvBZRMjzBGuI8eKGpPav4UjwKL7s84kXivFpMhz2JA4g6A3svvVyahTvMbtG8vrb1O6qIyrwrV0G9Si0gPeN8FrrUHte7NKCQPadhXrsX7hk8+tAfvcA9Sb1RUpM9fN7TPGdhCrz873c8MA8OPUbm3Dyj/A+9hLocvWePhDwKGlQ9Bm46vMwP3LwA5K68prP+vFQS2zs6h469r64fPUESj7rEZpq8h8b1vA/q/bzQR8y9JcIsvQcLi70GRpE9nCVPvVNNrbyJgtW8Oh0ovbkr07y6IUU8c+A9vAiBxruRDwi9J54iPQP2Cbz3aBm6hJY4Pe7ShDxSCN68S8juvJ30gzz0lVG9gk1vPZXIND1mp7U7dvkoPZfiE73nI4o9G/KoPDfDgDyE/kE9bQPyPCS2vTxQf9S8UMSJvA6hnjsaYaY9WdXmuoDKEb36ONg8HvOUvTnwXD264HY9z5y5PJurZD0OOmi9V1H9vDVq7jzwOcM8lv6dPUDRHr37hHm8JDAMvcHRwLuu0oW8/bu1PHcCGT1gXIW7uUk/vTnvkb175jq93uIEvTC3Cb21qq08R63hvGV1R72rnZ275MG/PPqOCrxTp5+9Fv5WvQitkjsUIDO69Lz+uyf8nDp9zJI9pLKcPJDthj01Ibu734f3PBTEgLzfMJu7o2XpvMSUvrwQKQg90qTnvO+hWD0AZh29OS4/PdrmvLx92Dc9KbC4vHQibz3ZxN642N2OPKcYgDxlVzG8LDEXvb2Eer02icI81SIaut9GkTlnMN28K0cuPCpYLj0uzwA78bemvaLyiTzBcUo9pZ8RPfAGJD33rpi8wsuWvKIaT73Gwpg8e0BqPJp4Gz2qSx29jc+uPN/moDsVFs08XgSMvMAJyT0XuY49GhHyvFIPILyTDwq9e/AWvY3el7xoC369sKxSu450mzzL1xY91dY8vVo6lb07Qi27fxY8PP0ZBD5VSJg75F1FvNnYr7y8W1C8+dQxvbJKObzL8VW9njqSvGRT4zwyERq9BHddPfYFTDu95zq9p6jXu5HntDzQn8S8OneNvCL1djzr6rG8A/9OvSI+vL04R6G83PPFPLgUiTpTRni8qZWfvbBHBjysu5I7lYgmPRLOjrklLJQ7dLW+OyPAaLzBD3E8jR4FPLtwGb1Mi3i9BYyKPPM0dr3Tves8Rw1iPS3XjL1thgk9rlVavDDTkbw6rZ+8w4iHvCFws7yLyyI9PHDkO2IcGT21ewe9Jcnju5m4S7xHxjM9YvmhudwLyDz6mBy99AyOPVSyCj1mQQu80pkzvdTfyjsmCpO83x2PPKi1Nr2NUAs9gc6gvPWtR70RUdM7ZLHPPBrQjTvj3gs9TvL4vOGKLbz9uoU9k1rTPJh7yjhv76u8C/Z3PQWnmLw8cGA9r/7OPGqhlz3I/yK95txPPdAJ8bvoj+A7lNHAPOlGhLr/XRc8mPNCPZRU8jx2DM+8jhuLvD+7Sb0pc7W7aT6oPIpMMbzroOe8Xe8CPUJrETzk0kC9LHU4PJ7XYz006ao89P7yPGplLry8kMM8eWhRPCJbujytPPU8OKMhPPbaIT0sGwI7cKgtPdxHursvUdg8y24uO9x7or0FTm89V+2cvVrz2LvnTjK92w6qPOaembzPDHG8hLUkvZwy+jyVmx+9n/gsvXBlJL0L6rU9G6/KOyo+SLxhVVI8lFd5PArzYLw855G8X93xPK+TJDx9GdA8kCpAvTCkc7zmiIQ8kBiDu2TFx7yI7h89fSy9vGkMQjp5ZCU9LzQFvS6mMDujA/Y7KIjWu85DvzzVmAy93uXtO/YJQL1Q9Iu4NCb1vHYChrzrhgq8iBZgPH8YnjxyYXC8pA/buw5OMj3J15w8wZPXvCTfdD2fkp685xWVvDfZfry5fmg8qWNSvWURND1WDVA82HBqvNJdrry6UXw8jir5vOcam7zmno67PiaqvFKuBz1Ou1A8JoNKPdbr9Dyd/xy9ZPYGPV1sDD2EHoQ8NaWAPThi+rsP6PG8m2gFvcXgBb53I0g86F/fvLf1nTzrZGC9ShrFPOmuvz0yG4C8Hd/mPB1VHz0HaCe8mxWMuicaAr1f8zm9gZ1MPXlAvbv3P2u97J1ovMtk7zxEzjk87GKAvUMTAT0yGfu8/zYFPMx4kDyRykg8KB4avWVmJj2TOTw90b8vvfy/8rv7dpm8l5nRPNihwbu4gck8EzguvecAvjuUSD08EkWoPJ4nsTptZS28ppoovBKMLz38s1M9V1QZvIK0cL19cOy8O4+2PDnLr72tPy26R+4EPWzZorzmDYE9RO2hPGGSL7yTIdG8e75APCTfkrwMG088DjSLvc29Dr0v0F09AOgBPZL0KjslEEM9eJJHOwjM5bwh9vs8bhXIuk6nBr3KHCu9yYQJvYm/ST3NigM92d2nPOBywbxchDy95VpKu54YhbuVHBk9+q1gPb8qWb1tlQI94JZ9usxWFz1HuDK8qDPsumhZd70duc+7lDhvPPfn+bzli4K901SxPLwvI733TCG9gQ1hPBdHsLxjgsI9GkwQPDhM0DyJgKO8N+tePbSKEj0c43U9IrDDPG7qCruoUEQ90xLDPG8ijDviekE8tuy/PCtHbTwMgSA9q3ItPWZsibyUUYg93l8TPeTHBL0TZd47qZw0vRQcZL0PIDm8EF1RPIidibpmrjW9z/o2PRTS1ry8BfA7V9s+PZP1JLs5gq08ruHtvGkmez33TQg94SYDPQiQfbt0kXo9KMaQPLIcFTxQVtg7SOW5vJXn9zwPcfk8HQATPf63mbz2eBQ8HslHu01i9Lu3QbW7p1tsvFYIrb34poc6EAWwPU4dd7xPeRc9lEOQPaqzwLtDOLA8O01YPFEc2LsyvI48eBS+PDxWlrzHNfc8m0DtvNDx0bxRrTO89sMdvYGvWjyEh9m8dIhYPRVRljyVxXw8hiDrPPcaoDpVEr06usJDuf1FSLtczje9j0H4u5wtRDyi9oU4UvIZO4WqSTwi1bO8GZyOOxs/BD0tNgU9LGe0PP6mUL3TfAm642NMvf6orrtaOCe9xvpJPckptbxbfpa9k/OLPIjpP73yXi668PQEveY3kb0N4yK9QmAuvZtna7ysDdq8+1VfPJHD0boxPmq8KESEvDyx4zyLYaK9zgCQvJEqybrsDBm9WYP9PCi0ADyZNTk9hYnCPbiO6jsc0BU8WSyrO8hoFzxWzR65ZEOnvEHuST0UthM8J9CovNVLAz2jtl08hX4fvVBMUzygkr+8XgInvB2LnTweWnE9D+HiPP5qgzwWB8u7uwKNuwE3jjw/ZYu9hQKePOqGGT2XBe4829yEPdZxOL0U3oq9FLW4PJfvgTuxiLs8NKnCPFuszzxgtqa8HAEtvRF+fT2fX9e7agdLPQbPVzzV5TO9Y9BHvMneYrweXSA8DQFwvDUu5rxbqF68+AVXO+bhmT1e9He9rmARPUgPDr2e+4K8/QKMvU6iX73ywBS8TY8zPSn93zxI8rQ8UzHJPTbQGb1zIIw7rX+7O9xiIz1SIDS9fAB3Paj7Qbwwir+8gWxLvLgB7js1XPI8O1WrPcHz9TxmMqU8fonqPG55Sz3sNaG9heJLvSN3LTzGY3e8kvB2vZNJH72zNQo9m733O6sUITqvho+8mmOBPCy9gT1YKHc8fVEaPca3V7tj6RM9WDKBvYh47rwea/48QzadPVpZlLy61Bi85m2SPEPTrTwtHK+8WpIAPYJ5GDkaZhy9IGs7OxplTD38XlE7VuguvIFALb0ktGy8goBsvP+JCjvoVDm8PI3MPCyjw7s9C3u9
  36-1: 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
  36-2: pPIHPBTjUb3u5Sc9WSaFPDiCdTwAcTc8DGUUvfCw5TwZd8o8rm8IvVWh3jz8Otc7lYEUufF2Dr26Hjs8qQ4NvAW5Ub2Py2k9wv0DPUE4Mj0Q6nM72fs2vPZYrjxZxKU9rEPWPLoWqjzxrAI92V66uydcrrzx6yc9gSWmvCSCfb2xgjw9PnL3PG9ocjye9uw8osiCvaeV4j0rNLe9c7F0vB/Wq7ythxW7r4ZwvYGHk7x6IrK7CCCWPBoIlbv8G1A9uNsSu+CWKTxOnTc96lrpu+f497sMmTE9phRkvTtoMb0X8UU9LUOlPeDelryp6MO7O61XvJVECT2N6hI9nDdgPSvLArz3jFQ8PQGDvewZDbw7P8K8r8gjPU+lKzw4lEi8WEYeveTjLj3UF287M3tPPG9YIL1rrwi8xrFmvXy6+7xsKtI8MpFwuyFFYL1Su1a8yhuhvT4PfTzJb3m6lNXnO3pdwLuMFgg83jxgOh8AYTxFb+E8FtK+PNkUhDxzing8IQLBu/a7gr3XTNW8d10lvQxRRLwNXDg9yIu0vSPFbbxYDdk8mv+QvJmDrDouYNW7VSvCPDY4Gr2wWT88ZqoDvEWNmb144Km7wkKgvBcAor2X4mY92jPXOAvGVL1eMfi8YeiKPZt40zwyGF08tT/nO77usrrEKug8uVs9PWomgz2IzTA9dR5DPJSEAjv4/vY8MTbhvADTtzwj3DS8oIvEvEG3f7w73Ec99MlEvbBtQz2iuJK7RE29vNxyaDwLvxc9B7XgOvKLNrv3qQm96TWoux/EJrxN+4A7pqS+PR4LjzvBHLs7R7oLvFK5lr2Wd6y8TILkPFq6xr1vCSY9F+B1vV7hB73T2Jq8cXdXvHwXWb1PjEG8fYz7PONnG72f+SA9mW8jvLw80TwQuL88cke9u54dk71zew49al7mPAjMCj21tXo9tUtDPR9zirzlQzI9Vn9DPObahruuCpo61jKAvEPmbj3T9Ee8MssvPY4Bsbxr0389cjnbPE/aQj27OAE9hCJgvNAQ47x89cK8ehxEvfRuWzxRjm29m2j9ObIzrjyNgaG8wZbbu8etqbwaLOa7o24RvQoXgTv5xHS8tJKtPC1ApTnuAim9oNkjvCtGir3+PZS9u5mIPUvq0jwptyC9UbCfPb/ADLxsD3S8mTu/vIxVOz3mgOM8GCvaO0dc0TwGN0Y87fWaO1MwrbzG/c290hJpvdTDhL1xbpg8riZtuTFWFrmSkZE8kqNDu9SYITxdXYk9sb5NvfBkfjkiIx+9iaGHPVuo27zFu8W83LHnvArjCbyZOjy8fvN4PDoSxjwV51S9BMgkvaWv9rvlLYa8B8SyPNU1ML1Pnz09gvRBvfP+0rxod+Q8gSVfPEPZwzypFKo6ftQ4vAnlC73Ahoo75axAvUcVkr3287a83ZiUPNFW3DyoP4Q8IRaPPdIOeL39tCG9jghGvFkTl7yJte+8hB/+ulXeFLwBvyQ9kVpTu1C3h7pxkxK9CmoEPf/6mjxqG0w84PkjvfpqQjzYaGU8Dnvbu3H7Vb0B/u882HsyPfcgID08Aw+9LTg6vbtG/LxJeWS8aefGvQynAD0XQiG9QRgePXCyirw5R3A7O0V8OyIrCj082008nsaQvJYzOTzDztW87wMsPZqTi72FDhs9jg2UvPGRGzo0t3E8CrxsutcLEj1CzYm6lRdPPKe0lD0+03S8paojPO2xTbvMR9w7Lr3+vCMbtL0JQA28mAYfvQ4NIzwiFkA9hUmgvDS57rwUeKA98lmzPNHrKr0sNjQ7rgUfPYMSz7yeJIS96uTVOo9yCz1LTxu96EABPfz5jzyU4lS9BReDPcyZP73tHqc7GgU7PQx+ET1+FW69HqdrPLHjxzyObY49RzlZPEeyxrz+Pwg8c/5VPb2ybbxCRKA6SjzrO0ZRGrz2DFA9YAaGvKTlAj3nm4c8uqltvFuyZL36l8g8oUfavCjIqbwWGj+80GxsvSR1hr1PSW4884o8PcZ30rxbUhU8+6lKvAgQLb3j7Ew7HhYlvJ/tgjzrccI8dxcwPb/6F73CiZO7i+YGvbbUNTyV8za8+NAEvd8bZTzfjzi9Ua8lvX89l71p/d+8D8R7N9HF+buwsi29JtAxO5BKdDz/2oa8sHE9PGAs7juLCs68Yh+ou3MPLzwBqgW9eXquvJzqMjyk4DQ9uLHCvLjsCL3kvcO88IxqO0YCPD0G3Uw9uNbEPdZ2NTu1gJc8CyRbPPYjlz1qOlo8OTwTPeNiFDvLppC7GcOoPOJSSD3wyaC8Wz1CPUPs3DuR1WO9GnTAu5P7j70pQlM8gwguPBPg0TyVI469t10ovcMFHj2YjYs9VtYzPBGVZL3yHoi9/UHuPABa+bxl6qK9PmrAPZn0Mz36C+i8wtU9PeRqm7zlYTY9qpdxupFjwTp5z9m8ZuerPZZZdL0SgAK7HkTLvASdQTwaYrS8/q+tvS6jlTzNaBQ9gcVbPBwcCr2x4hk9mqDcuwfFPzp3fHg9OXAKvVLPobxmWU680ik5PD77FD12uvS8o1gWPBHZV73+1h86nHTivQcPbTwyI8i8FQWzO4tOQT3kdIO9y/yiPL3/gjqpUns8xPkIPRX5Jz1WghQ9J5zNPPUTuDr5njA91Z6YOjnz0bzyews9v7SBO/1iaTyzpUY8CvnuvMWJpb2+4dM7PxgCPFO35bys2iq8X+IKO95HQr02Qec8J41xvJStvTzGKyi8SHzbPVhBBDwlJY86rMAdOox8cLxE2aK8xESmvB6ZoLsFdjw9SIPMO/8X8bsELRy9GQWjPEo397wO/Te7rz29PI3NCD3lhEE7hArHu4VlCr0SiNo7RH60u2+PjzxQvUo5V9c1PVjM3DwQrRy94L0bPdNJOrsxfNG5yoV1vMI0vjwj/3g9QeVZu+g5ST3dNRU9wQgMvS6yi73HjC68sKEBPeB9bry23j4927cJvJGogTx+BQA90KFAvENt2zxsY+w7UfyGOg/tFT2BJjM8oPcsvaX1Bzv9X4A9ODECvXOw+jx/y606g74KPWIAKr2GMRy7Il1LPLFXDT1u+oc9oKcIvBp/ZLw2ryO9WM4NPX2GAb3ogW+8Ao6Hu4jGv7yGX8I8Lwyau0PzgTwhLnM8GrESvZXztjwylHq80VaQvFCYVTx1dYw8zS+DPSUgOr2+Cz09wHYrvV+6aj3IRUS94XCavPkjqTsL6D+8VjgzvWs69DwH1Bu54uuHvVLIDz3AB5q8BpOWuyBLGjxBVzk86yOlPNlOj7wvVoQ98TuAPBTUKb0e4Ok7tYLXvFKFRbx0HJc9NvpzPVFlO7xnbC07rc2FvcOcD72sSgo9H8eDO4WO6zsDSKC9MjV6O5pz1rzsvqM9GRCKvbTqRbySrDG9+ycsvHwVZT1VGgA9DlMHPRt6k7zDM8084NPavEK1mbsKLJe7oP+qvNVnKjyJhUy9yhcnPffMljoGWYu9Wdd5PTZ6LL1OrBO6r6BVPCyZej2ZhyY9vK8hOaTT1TwS57m8UCUwve1QBL16u428T6OuPHnjqTy8M5c8wXixvdL+AL2846s8DN2kvXb/ar1Fz5g9lvqnPB+LvjoRokO9+YvjuenjZby656a54GeJvKzuprwH/tC8pplOvMvQvDz3fnI9VKhGvSi4mr0q/pM8lOy8vDC8m7zVZ9C8niSEu18Gi72BlAq8ziQ2PGPFcD2o9i+8xtoAvLhKWz2e0iU8dRn1PEPtCj3M9Oa8AyBkPHkB+rorPp+7UHlVvGM//rwBqQu9HPldPaiuL70d44u8EO2ePUX0DT0ol+K8NktPvVeKkTzieYa8b+oLPSBH1DxfQ9Q8314SvTfWPr0QsuU7eL19PBOUc7wlsZe8ZCMaPVjoFzxusko8eGwKvFPChD3WJVq81kiGve/gDb0gJQo8j/egu4M/Lz0VNHk73g3duyJiJz2jm749v+u7PIssADtPH7k6k1uyPOEqh7sI3I89Mz1bPfkGdL3+CMC8QwQePctykDzYPLO8piHDO66jcT2ROgY9oKULvekBiz2oHVK8H2M1vcEJBr3CMUe6eJBRvbuiADyQaaa8jemPPTo1hbzi/nU8
  37-0: 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
  37-1: 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
  38-0: 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
  39-0: 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
  39-1: fT65vM1Oir2rUKO9zfmfvPK9wbzgybE85w4YOrn9ED3Pb2y8bYLwuwOe3LvNYyC9vo+WvTyWID0bRWq9MVm6vLt8jDzV7LC8uA2fvI+Uh71ZACW9aefWO7dIMT1LhVw9kMukOuPOQTwaNx096ITgvBE1Vj3iLd68YlKlu6wZgr0BsE68uwzQvDUViruOpV69tY7yvBa2kT0Ci608rpMfvV8ioDproRA6DfUPPZE+zTw2K868BfWivI9wbzx9czW9iT8pPWZJyrygQx89CF67vOL2XjzpRs87t+72vEusqjxBP2s8gGdGPTsJAzxeSjc7bRj5u25q9zwRmSU9U7unvOzstDzyZqW8/hlWvZdmijtrYU88LuaCPf/qDb2PAsa8BC2VPISYL7u1Kra8yTtzvAltvL1m3i89TLz+PGlHVLxLWEM8E2kVPSKzXrxi64E7/6RKPVY0wLwy1cy7CsPxPDOIDj1LTNE7sfSWvCUPhj0OYU+9govZO8golLz0u0a97uP1O+5UhrwQ9My8V3QpPdh0OTucc/w8cSqfvFOW1Lys7iI94hgyPRN17rudux69m+qJPdHgozuDliW9kzsrvZay0Dyp1ce8oFCiO8LsUDsIC829JxgNvNQvtDxXdyG9DXGhu7z7kbzizRq9h8waPMe5RTwC0Ko8NCCtPC1qlzwi4Ag9y2zGvctk5LwCZF67eHRVPPNvBDtFnog9/zjFvEhLp7zcXl28CB4jvM4Gvzz6Zyk8on8uvC7zHbyNzLi8kMOtvScXnbx6jlw9R7GkvFxXf73e7k082hMSPOw/PzzrnJe9LbolPb5a+jtMPjE9UdvNvBejkLxDL1k9PWHFvAMm6jvMYmk8mKJ9vK+zUzx+QhU9exWzPKAEML3VHqu9aj9ivUngmrsIg948qza7u0Ehojzi1ZE9r9bBvNB9Fj2biDW9+NjZPMomK7zZ9Io8JuODvCZqJzz9kTS9jkMMPXLfNT2pJkY8628PPUbaHrsYu1c9ixGrvKzuBL1HPzM7CTs3PVLfR73I7IC9Cnj2PK8LBr0BVui7dr1PvZd3bLsvMhO9TDvQO+MpYLuY2z87acpRvCUzlT3u2+S7jVEwPNNOU72hmUE9WEdsvEzcab3Vxyc8z/pTPRGHhj1ORXK9g8RBvcXijj16SlO8z6/QPDbJtD1wVpG81jEcvAzRIb3Xezk5ZgKMvLcVwzyO0n+81CSPu7Iy2bw5tG08dCTJuwco5rzM95s79oDkOw9z6rz3qK08Ty4EvWvv8rwP/r+8/AEGvJxujT1xT749p2Jeu6Vqg7u9KgU9uyq/PMR4QDzLz9+8aICVPAfmgTzfVcy78/IGvRoYwDzQvTS9GJj8PAR91zzjusY7Rk8QvLiQAL1kshA9sqQCva1OMLwMlkM9Q7xePa27h7xDOdk8iReCPIpEWr0dADO89CdkPeJo0j02Wm489qbIPNHWUb2rFAK8q4yLvAAbxjxJeFG9mrUXvbZhkj1B/TY8J6iyvAN19Tx24KM8b3gKvRsYUbxL75C8nj4sO4IT9rwGKUE8bkjPPSDbVz2RrLo8/TKpPZpIszqyJ/u8Q+WuPMbIgzwQSNA6dEagu8CPabubCVs9yozuPM/5dLs8Ewy9ebrGPP2087xhtoQ7P/3xvFohaD089kq7oEADPQp6g7u+QBE8b39hvVwR07l9ID688duVvEnqKz0dpme9twIlvWP2bD2frUM7e8EEPVmIuTzJcIo9TREEvR6rxDw8tx888QwqvdAk6bhVyyc7zZEjPPMvaTodTTy7+B6vvNcK1DzT0K86L3m5vaA3mj3uLlK7BHSMvBJljjzYSiC7ZCzXvBR5ED2AsuE80DGbPb8OTD3gsks8EctHvW+P5Dvruqw8tGF3PZwGxLxdZkm8R6GcvCbjFrxRm568sGqOPQjGND0Dabw8R7ywPIRiLLzlvbK8V2dAPTQfL70t0k890LsAvVIKxzxxMP88nEJfPWoh+TtPFHE7BdKSvZpCIr3xR+K7Mp+Ivdj9Oj1uwBo85l59PNTqjT33PAy9//cfvGIF1DwD/6K8kytJvP7ZPrzNBJu7Gw/bPGsDKjv5bmK9Bso2PUHMCb1j1IC8O8ZHu0G3iDs5L9q6owHZvPWNpTwbFQK86tV6vLFr4Ty41Bm8VrxRu2Pp7zwdyJI9zpJruuokkjywDYe6mcH4O/YmDr2s5RW78pmSvJz57rx0H+S7+kwLvcxn6DyY7jO8Hj2nvCI07DzzUIC7yv73PBIIGL3yI7S6oBJ+vX+fmjw5aJC7ETY6vSvsNr13WwC8zkCXvKLp3ryrxFG9ou03vPoFEzybXhi9VOCLPQl7aD3Ozvs8vEMEPUCaOj2J7ug8D5rbvIaA0rxDfbC9ZbCMPbACTL1NevS8U7IsPCfS5j1FWa080Yr4vD/lcjpQIfq8Hp4xvfjVF7xxrsC7T3F4PfWA/jwdVi49hNwOPfDf2rz4fQQ82vLPu9j4CDxODxo85OoAPPWphzzYwdY8z1fqvJ3njr0xTLi8Px+TPQYPoryYnsu3WEEGvaOhHr2nmES9XNjfvIDeSb3gxyi8Zv16PNQwH70nHwE75uwjPcPQhb3woYK87N+aO3sugr1/m1E7VnkCO4vqnr2gbAS6M5XpPJn7Mj3ei+c8z5BvO6ynhb3orV+76qbaO6VrNL05Ge481rF2PS8mpDwXTcI8y86AOwi8172VqlO9FoecvCDnNL03MhY9GkGwvDKMKryXD0O9cjQovaByOzyUNTG9ekjbPEijSTsGxhI9C7gkPany4r2JtOo8A9GmO91ZNrzGuOY85bZcPVm8QDqfXdE7c9y2O0APbz2XvdI7E/i4PKyADT3u8pM9liZZvS5LmTpWybU8+xR/PGCpxbybLmM8iu40vYGS+TsG7ZS8pioKPftel7zSgOi78gJ0vEnQPjxg8oy9NKigvCeuyjyTLxm9HSx+vbXnhjwZWqW8moU7PKuSUTt0Vt07QAI5PXr/jr3FVh09ahOVvOc/VT0VOFm8SvIgPe0VCb1skpy754/eO4XZnDw/HYY9pMFdvb2pFrwCWHQ84MbtvNX7j7y9hOW5cYyHvEaWFL0Tehc9xz0MvYEol7wIMQK8pplrPKc2Drz4/+E8LQhDPWNtkzwQlqA77n5GPfIbVzoDBDy96XAXPZkKDTlWpVu9skVSvNEFpb2axxG94DJSvX83EL2QIiO92lxZPZ2w1TzFC4e94gy0O+g/pTwzbaq80LGYPeGpPryIXny8qBnbPFieijwnIo68Y6x+vJNMVTwwsBE9+W60PclA/bpJY/S885JrPbHu/jtfl5m8OS3Qu8OAB73QqlA8L0diveTziLxWPFw9nJgAPN3Tsrz8p1c9HtutvDu/pj1t3xo9zTToPK/EAr0FFoK8+HRCPOekkzxmnA6996BIPIi2ML1xYRi971ywPA0WZrwl5D87z3+iPQw7RrylkcW85NHhPP8c5buowi09vyiLuxS6sT3Xl8a8BSOhvB9y8DwsPya8fm1Yu2q1ADrAkzs9ERCZOmCvpr0Vhki9nRZwu0jVST0JR0Y9inpXPZumAT3CDhi9GU8bva/HEb11qpy8kXLRvJjSfry6BZ48L7xxvKCESb3aFBC9MWsGPZFBXLxjgr688U1FvOkBCj25B8u63tYtPVZwGT3OSca8t3UbvUTShTwajVw9mvkJPSdp37sLB2e86+WJu7UQ7r0Fo8y8RV6mPJXxorvowWW87KREO+wRlbyJ5lq7kjKIvCa7Yjzbr8C8NrRrvcckFT1ZtXg9jtxivK23ED00Es48y2BRPL2t1rxmcu47PRicPKJ8Pj1KQlI8GLi6PFbjRz27XYY954F1vJqyIz1KUGY8WzRDvfFodLzu3CY9aSqKvbi6BDqhLoy9jYArvSk3Tr2kWow8lBcQvUrRFj3tHK68LPnOvVde0TsuAli8SjB+PHYqTb1Zjng9qXOCvcxfuzwtUy09CSGuvGfcmLyXuR49Q89xPTlpej1aG5c7GZCrO6T6az1pzRS9mxwRPSqpxzviv0e9ylK0OwuY6jvDG2+8/9wRPAkGmTwLjUg9RL3tvFNAM72rdBs9
  39-2: pCjLOxxsUr1xzom93gU6uscSo70+Hrc8T9zEvCmPED0enTG6doajvADnzjvu8K68hS4WvCmwBD00AFC9R1N9vOVHVzzVKoQ8v9zxvFXzEr1JeIG8S4TiPB0xuD2erCc9wF0BPEy9Kj2341E9m4q7vCr/JT0zS3i9+iTovA3eA72DwCu9QQQDva7WMT0AKh29cVWmvFX5qz1KGPO7qWdBPB3dMTwJ/dS7zco+Pc9xH7plbxW9LUUBvUuv4rwKAVq9J1WkPRToUb1fmLA8xajevH51xzwSRBW7i+evvD9kSD0S9Vg8I57NPBCY5jyxy2O7BFEuu2pZ1TtKPtw8ZhYuPPfLMj3xs9w7ZTYEvYnV/Lxc81A7QEtpPeaD6bxjerW8AyIePa5v87vkuw097aguvFtaw72a0Ci88A6ZPev4Ob01u9K5drYAPf51jb1BqRm7iQq1urcVkrzQPV09v8FlPPGqVbu+BXe8VVQkvWVngz0Sn569fhp9PFToizt9G5S8suezPIdtf72KdZa9Qgl6PSk4Uj1wuw49WtGNvOkFBb0ZSDw99SZGPK5mirwceaW7WR3pPF54q7vDQnW90no7vSCN7rxc2ge959CcPEEmMTxeCJm9oHi8vBR9PzzEUTK9OvhrPJe0B71PpWi9OQiiPBr7Hz3uhFQ8Hxa2PKFHNz01KuU86x/3vckKkbyL3wy9HuD5u4f3gTyn7TA9rv0VOwuHX72HpCG9DQibvMjlrTxDZcO7gPjtvLOaZLzWcDW8j+SrvTUp27w/3hA9ygHEunguK70A4qE8EH5zugd7LLtwhqC9DQ0ePUJ3mryTLio95H8Zve5PwrutdjM94WgrvOBOjLxG0nS7TrolutUj7jzmfFY7xHT9PPs9Pr2DsY29AzmlvIjLjTuXDxE8yX1cvLMxWjs4hWI9/5g6PCaamTxFWYG8AD3iPPHef7vz+iE8ETgFvXqI6LpdO5m9cWAaPRdgXT2kS8U8e0qOPNxVHbpQn4Q9wbaKPN1wTLy11+c7KDMTPRK8gLzWase80l1Zu3AaLLxi+b88Z1w2vQXMKbyA70u9vYy4PIc9kTxJe5o8YBNYvKLPoz1uDCs95+EBPUjfXL1eTg89trnOvOCFRL0zrq+8wrUDPUlclz0iZLq9D/hcvQjIDT2vTRI845s3Pcfimj3g3TU8GOeDvcJxfL1Fl5Y8DD8EveDHD7yIBgO8yftqOzgxDb2R8fA8lWcnvQtynLwIL/y7sQYMPeA2Ejv30Z28Rr8RvZuFVbyRM027lAEDvUzLiT0yxIA9ucAnu3UqWzwZEwo9z/y9PKW/njw/9l29oZFbPHJ/Ez3G0Ge8mzr0uxR7GD0RG628Ta9pPdUBTD34diO92nyKPIJ4wLxU25o88TDkvM5l7TzwMpg84OJNOzw2BL02v5y4uxNTPaMfbb1i8E478En2PJ73xj2nbo680g03PfS/G72yMGE8tBxRvHasg7vGdIS9cms/vY4ghj1kc4w8GzW5vBu3nDsMxKa8mwegvSODxjwUKpM7o/IZvOYbG70MB/Y8583NPVzLZj3bI3Q8DEzbPbNqSzw4CmC9M4rVPAlT3zvMcNO8BUcpOAmTer2PS+g8oTyfOmNf8LxpuyO9xl9HPMf0ibyBiKO8Ddonvcu3mzzSPzU8foAlPAyS1DvjlN68mXcIvR5TqLzPxqk86b9rPDvFcD0THQ29Y5GcvG9EYz3ekJI7kVN1PS1pzrzy4ws99a3kvKPLLz3PQ0M82d1fvOBAFztg55o89cF8vHnFO7w+FE6715kfvLAyPz28N2+8swl1vYBVhz3/q9S7I6bOuwAMCjspMCU9wyEXu5YquDx/T/U8zn8jPcrfjD2LeuI8clkLvEGXwDz4qpg7TMHwPMuo2byqzt47u8b0vDbDgbwENT69SAqzPTyeVjz8LXm8P5ptPA4EFj0a9UW9BDzYPBRpqrybOTU9tAnIvLpDBjm3TPA8iMv3PIEDlLzdb4+8t4wVvSzoJD1fnq88ByiXvfNIwDuX+hU963eDO3Ql8Tv4/ai7tEPLPNMtPrtf9YK8zHNFPAGSuDweA9M8id9kPdnsibwrfQa9wkLzPCNGCTsoGAS9UB42vFXagTyw80e98ccIvAiiKzyyO5i6Q2EzPOajgj2leRo70jd7vIs2SDsxBxI96NxrO53qlDyNpCO7nSH+Oz0xPr0NX6680puyvLliirxdNSC8lmEjvRQbNrzTrUG8HnHJu6JstzyZQYo8cMtLPXntOryypgu8jkEqvYNKHT3IqnC8x2Uku09QEL20NTa8Xx3OvL0NHL38X3y8JUKQvKxnYbuaj1a9k/+ePVNkSj0IoBk9nwNRPfn31Tz/RA68YXMDvZmMYLx7dbK9DZkdPdv4m70hDfS8mAqBOtyO8T13Xo48iocIvWTZaD1Z5ui8fXM9vTfZirzZDRI8Kh4WPYP9Sz1cJUE9pElhPandbbf1vt08Ht3qu2Ic1LzMMPI85jgRvLvhDLxpjCE8fzQevQDlpL0vW868JwWDPT3m6Ltu43m8y5Y1vW+5JrzgcGO9Bb/OvBZfgr3rHgY8Z1n+PGOUurygK9M8vNCCPcT8jb3vAK+8BcRaPMGtO73hCKa7GbP9u39zUr3smAq9xoMhPH46XDytXio8ska8PCjVkb1vUWu7ECH0OqmCIL1Ow608lDNLPWwxbj2qcAY9P7T6PE7Ptr2xICi9h86LPGG8b71TViE9weLauxG4kjvzaUW9VfTmvBLlRj1PSpe8uxDKPC60nbtKrDy8ekqWPIEJ0r0QjKg8G/6ePBK25rtd3us8tKl+PULY2TvrcZA7Lnk0vLphYjydahK89Mh0POMQkT0kw1Y909tnvbzwPD3e8Og8DF1DPBGSFboX8/660c2bvGQlGDyMYuW88GohvJCRsLzC8Oe894v5OrRu27zdEI69v35MvKQUBz29Ljq5HZEGvaAN0jwBGJ68ZUtvPBYPCj3iFJQ79WNXPcRh4rxqx1S8dCX0vMukKD1Z0ik7S4q5PILNB71vKrK8jBsZPerLZj05HZM9ovvYvFlmcbxfG4Y8dUkNO2C5Ab2vMz08KrdFvX6aKb2Pq2I9sqUUvHJ8orwfeOA7kkcNOfgfr7wLIdQ8+VeYPJ2NmreODKI8Ubk/PWazWr1T3q+7e0N3PNObp7wWwKu8JEWQOkB7kL1wq8m8oRSjvfa7Qr2dmLe8PuIZPex06TyM0yO9OghLPPbrqruUurC81WYmPUySwjyXr1G8OlETPV2hHLzH2Sq9SriavDqRBrxzMcE8ihadPdCGQTxEPBe92rxgO+BCFLxT5Qe8e4cRPPExo7ydsIU8IK8BvcLGzDw12Xc9VF2ePBuuc7y0/0g9yuaPvDtmeT2twnk8E+3nPIRb1bzsmR29UL94PL0GW7wHs/K8PcuzPNElGLyRMOS8U1qQu6qus7wMfJa8Mh6JPXmpkDsHJrK82XqdPba4xrriXos9I/JnPM9jNj1cgO68vg+EvSFH6zympQ26klODvDbmtTzVmFg8RkzmukEhv7xFtT+9unnePMdkIz14x1M7U+kyPUy7eTu/rTC9TsqfvNHmSr0IwwG8uy9LvQRaFT1h7S48ViINOzPuSb2Bpxu9PjH4upFDyrz6jp28M38YvVcBaz0eZdC70dSoPC6dAz13Hvm7hDMxvM+r1DxzUpU8G8AaPS4C57yR5Qa8/grBvMOXFb6/IW+7QxiZPBqGYD2Nwtm7ivErPE/6rrxF+KK87J/5vCh4V7y21Me8rewZvelEszwarZs92+jWO8dvGj3kYJQ8bhA7Pc7Uh71g0wc7p9AZPTsjIzx1JtE8XvAfPe3z9jwuxFM9NZzIvFaVlTxU2wQ93qVYvcOrUr3Jcko9T6tJvKYcxLyHQr+8QsFXvZCpIb0dVyw8mb2TvRkOqTwoY4s8ML5ovem6y7vL4QK9Q4ngu4YYFL0UBxs9G94Kvb8Bszuy0lU9yNyBPIIkzbxOQF09PRWHPUYkOD2RliU8bQ6GvFD6sT2pC9q82B5FPZqTejmzAiK9hN9cPLndrbz4J+W6kB9VvF5PVTxGG5o9FVmSvJB3Kr0IkS49
  39-3: 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
  40-0: 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
  41-0: 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
  41-1: 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
  42-0: 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
  42-1: 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
  43-0: eNV6PRi8xbzUzJK8SyiGvbtO/zzgJ/S8+OY4O2qqOzwYbxg7JdQ4PA+xbLu5D8o8v8NCvY6HlzxuXh29VA4hvX2kFrsONp88ZfZBvPITDzwqJS89STuQPIyZSD0zhCk9FQuHusG+hTwsL+48wPdsvPESpDrc1O+8WCAAvfRZ9Lxskxq8PSYxPVkUWb1R8aC911MCPNbodD0twma9ZFeKPLKeTb3e+K07+6O0vISt4by167g7uyI6vOa4kLs51YQ9Llkyu026Qr1owXI9k1o2vX0k7TyrYCQ89hDXvFlAobzscog9fMGOPbGztrxLo2g6/Z9wvVRGrT1bVc+8Q4QBvIjMbDzR+Eq9NchMvdSlPbz++6K8hmALPZGXkryvFhW9BsYsu/gtTDswKBO9JxNNvVSyJL1+3om86vnFPBAnDruga5i8jY9cvHoPt7tKQMw8rUYyOkvOUjxWfBQ9qegEvPsQBbrgBjO9zN0Xva/fZjtry0a9xc2APZAfY71B73S8nqRHvAZtjbwdkXC9jdIHvZRgSL2szrs9N1XPuxvL1rrrKp+8k9NUvZdxUb0bG6U8vEAivJcpJb0Iy6q6hhhJPfQgMjydkSo66/0yPUZeqjpG+Km808XrvEhLWjwAttm8EjOcPOsEOT3J7m48AY4ePaURVbsWIV09AaquPM5cCj0xn488tCWhPElY3Ls3AII8S88KvRE0IjxwhT09MBfYvIlXmTzUuuc6+S2PvBZpWz1T4UM9pKkWu0dsrDwwnQG9Nu/fvYpazrxCrc88WQ6jPNAbBrzOSh+9hYtVPJXOuLrW/UC9NIkbvF4KLT1lc/A8YCYPveayM73d44+82CIAvRmV9DvJUsS80wyiu6hTtLsysYg8llrxPNL22T3tTK+9IXUvvAh4Mz3884U87jQUPe7hoLzOCUo98j1EPS1qtD3ySUS8pxXQO0YlPrz3xka9+XHAvIdIY7ugd2G8nNDEPK6TnT0wkNK8fq9sPRw++jvJcSa6LyEAvNJz2jysX8e7kDKOu37QibswXB29xorPOh6JEr1iR5e86f++vB6DULxwhRm9SOAjvU0xzDwE5Ak8zgwgvBLD7zvxhKY8OPVGO7hw8zwPmGa9GyE6PI2eNr0xKZE9yyQePX4KYz2wmE+98IR8PbnFLz1CGic8ezHIPFC8oD0D/kk9bIoWPKabej0zdNa8EU2GvDyGWLsuvRC9TjvmvDt5Wbu33ws8uGqtvc699L1CzLw8twicPCBJiD3qEhg9kPVqvamykzxkKC+8p3oNPYFtozx7s4G8x+oyPC0EtLxIlRo88Ii7PTJuobxSRrU7zZ+Nu4zBbT1+Rjy8IyK0POoMiz0vTHy828LuvP+eFb3/W6M8g9IKvI64w7zGiiO9YW2TvVX+G71IA648vv3SPc8LZryw1IE9smJPPNDHk7yTRFK9Epc0PeF0o7yjL2q9z7RiPOoTZ72rVdg8Zv/PPPMJH70cW9M7WErPvPZGEj3FeJe80y+dvKNTVDv4P0E9By11PGOHxrtILTm7PtV/OzIZ07s6wf88xNxYPXtHWz0urOm8kKynPUloRz3OMQm98uPbvOHvMTwQwT+9t1PBPE0fBL0TuJ881RYlvAv8Y72jPRE8lFBqPf7KKDzW5Uc9mOsxPKiTJz2SLSw97zO9PH9zOT35t1G919AZPPpOszuV5s08C1anPKnPgj3nUhS9AR80Owm54jviPEs7ZTn/POAaKr2afBg9hp3PvIjMBT3z7Mq75C9yvf+wD70ffFW77VkyPRmPAr1YfKC7BXEWu9koOr3lqzW9Ik7sOyW8VT0+NqM7dEqgPA8mi7sOiIY8OlJpvAKQez130V892UzQOsOWgj11YQA9UjzWvChbXjtokIQ8bbvmPLKz973RUr+7afNLvfGP2js6G0G9CdlXPW3wgLwYOYg7xig8PMdEobzB/Ja9c268vMCnXr2878Y9CaAyvYiOGj0eadY7UmcaPBlm9rwnHLm7gdU8Pf8mJrzcmlw8NZjlvAxhzDuoyKw8/VYlOyaBNz1LGUw9tatZPINWBT3i3Bg9go+fvFjUKT0yfo68ezUevTxg4TwwDCm9E4ffPBQTar2NZM6730U8vEekwbzVC/e8k0Q8PHjiYD3dabi8Ex3luVgMBDwlI0c8Pb/TvBPlIT3dU7g8gZJgvNUbhrvm9sa7EAoZvYpwBT2tjru8oZFyO6IMmry5EDU9ZiibPMySR71UpNs8bwSqO1mPEjwtMtK8KDCePC7k6DzUIio8l+slvNi5jbzhjOE8r4ugPJ99Eb0N8I87+0yNvA+xsr1xkv882O1OvUTE7Tzu8HC9R7xCu4omlz1Mwaa8zf8AOx8h4jzX5qW7wDI4PWHlqbxf/XG8W721PQU3kD1z29e8TVIJPSB2jz2QPDo9kQI8vViAcj3RXKm8Iot8PZwPcjxUYI68a50EvfFZRDxFNhE8b4UzvbLdID3lyIW8/GwcPW5IjDsa6g09Kb9HvZW+ST0aMou8OcuAvE9J5zxjIKe8J2yJuxk2YD36uYI9kglEvRDov73B1T29Musmvep72r1/sCy9/ZeYPNup1ruViuk7Of8oODdQ07w47zy7syiYvJNjGTzXLv88tM7zvJ/gwztNjoY9JIdoPZm2y7whwjc93OblPBIq0rwEvK08hGRjPbgC9Lwi5Yi9e6kpuvIXwLxx6Yi7K5nju9jOOL0HEZy8mfoxvRDnAL2Wv1w9Q/rKPOZfGb0TwQA9cJW7vOjdLj00r6M8Wx9mO4OGMrzh3Yu8qiaCOrvGor35RzO971QHPTNCUr3beDy9ZHUHPRFAqTxgkm49dI4wPF7Mqrzx8pA8cUSMOzZ5fj0YJEA9ELJJPdUfELwmdCA9BbQ/PahV0bt6iTq8cCK4vJb7hTzPmpU93RS8u1kanrt82vu7KzchPLrObL35HsI87i5uvb7qu7xFFTi8yK1GvYnb9DwwFj69Uj+oPP2Crbv8+XG78VeFuwN0Eb2YB+q87KzlvKe5LD3ddRU69couPYn/E73Y2CY9slYJPBX4Jzohqdk8NxIou8FBnjtKE4Y8cD+lPJLkdj2v+tK8Sjh1vCv1nby30787dm0Huz4nCL1vkJ68Gc3SPNNT9DtDVsE8BJRjPRmcfzsEEXu73HcCPRS/BD1XV5q8TkuCPMw0o7xYnEw8GIB2PEelO7nAMJq89REzve4a37xY1cy7NRz6PPfBJz2BELW8BFsKPRnzCj246mW8FnhJvVSkF73/TWy9UGVzvF78jDsBhdk7rQ/VPAO2szwjgwO8mTWKPTzxa73LyiK8klAMPNOxL71n6jS8C9h8vUXC4bwkcYy98sQqPVRmu7y9ada92k4EPHjXTL2BhBg9HcPsvD1JAL2TaIq6lfotvad0Gr38yxO8RyjhPP3+6jyroUm98ncjvLDuhjyGU7u9J8KuPOv1uzvFopC7wBhePTsBo7xIFZW8bDytPVvhEb1uI6O7Ywy9vAaLLr2ZCpQ6V3aevK5ZrTzwoSi9Y14wvTczUrtwaXM6Z6MJvW+cFj2mZbC5y24evQxBqDzWnMA90SfePFrI/zzB3WY6bJL7vHafY7iLxAC9niGxPG6zxTxq0Lk6j42bPWpkyLynxCe9OuCVPKe9TT3KuQs6ud/UvFuVGDwJYc47OTX+O4UngTxZvDi91nbEPHQjabxgSLE5Id1FvAY2S7xZLY+8xgr2PGDK4bysYQ28DCeuOws72jx/36a80FsKvKXBi7wo+Ve5hpoFvd3kLr2jCR69rho2O4Z/mryzb7E8qxbwPdaliDt1Rle90zwFPchVnTzGXba8bCxWPLZaxzzR2Iy65Xb/vJr6KzrA2W48OUuWPdwY8TyJ5D69WTWKvT+Exzvo2tG8DB0XvaXwQLyBpx47qQiVvaMcqbwgz4G5AXBDvZ+WPTu87G+9x4kYPB1s1j2I7JI8u9rTPGUNFrwX1tQ8W1qGvWiDQTyVUzY8xuNBPa9xUDwlJ7a6b7nwOtXipTwOCSm9M8aUunbebzxRawy6Z5OKPDCFZT1iQCW8DuF2vHgth716Yie9Pjg2vHm2AjsQSJ483+yyvOwCZLxWXk+9
  43-1: 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
  44-0: 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
  44-1: lx/KPCAFg73VwiE8KH/qOxnbcD1p6+08OhPeO2ADETxwBaW8Y2Tcu1O70jtACiW9Ce81vDf4LT0m4xq9bDNdPPzqKj0Yjak8DM3HuzvlD73iTJm8H6fBu+UhSzxEIYm8K7OIvJV/CD00xQQ99kcZvDjwnjv2noy90lGIvWiec71QTZM8wXIcPNarmbyBNW29NeDQPC3WiT0wtEq9oivSu6aqKL0Njxe8ECsRPVYBqbzloe689XnSvJT1HjxYy648SqQXPXeaHjtUVyk8QxMyvSoJ6zzNh3c8OSJzvXJWND3ktz89opaZPc1CCr2KSx67AmCLvORIUj1q9NY8CyCAu4RHuzysCiQ8HhEhPczNObxhs/K8gZc6PA8Hd73Y1Tu9r+A8PRdV9rwh8y89zGbnvLYuxr36P1E9Ze1APZBLcT08EuO7WljpOzK8Hj0+wUg9TAuQPI5kpbqLeDa7dDKTPIVcjz0+nAG9sufNvLiVIzwgrSO9/thBPQB3Q70V5wu7uq9qPAJTOL1FWcC8d2CfPALPT73i2bM9kQMhO+10+7xg1u28j0SKvMzGg73AdL49QZX1utq58ryIUla9S/uAvB1TIj0yKR69Ox9BPTRhJb3pjgS9jQd6vKOf8TyMzGO8Ay8Bvd3vmDpkho+9tHgNvejyADycqJu8QuQ4PcmUgT1RBQs8CdolvYoTI73KkBG9AT6KvBn9PrwYbWU9PvCxvLdKNbwBWgC9TdUUvFtxWD3oUZG9dLlvPMkGAztJeRK9AILUvXsw3rxGXJY873f7u3xjqrzstFe7jyY1PSUh67zxo5y9sD9FPS19LT23O4o901ivO45OH70Lw2+79T+QPJAGjbxw5+i7o85KPZ5CAT1tKKc8d5yqOzCyo7zNf6y9ic/Eu5xqrj2WFUo8wxYNPV8jeTxteco7dUdJPfg/Aj1Lauu8eiKxPAjOHrwZlp087S7vuykkVTwFbgq96M5tPJb7MT1y3T89495bPXXp0TvSIVW8lO6wu8Xo8zxPZC28soZ6PbM9cbwXFNY61obpPONoNLstxV88OUvXO+NrKb0DcH87iKtru86yZjyR4RM8wsKUO5nLFj2eUNA7ZwSFO+NHljyT5Ba8/YcEvZSnhLwApU08+xYsPWj53zyCGj+9eqgBu6VCmj3qbaE6kX7YPLlMBT2veSg8DVJcvLnIyjxDaos8BiVnu3IByDxKZSo9OL1/Pe1D8rzUTf47BBTeO8rjt71dT9Y8lOP/O6KyMTykZTQ9Zfc9O6Vr1LxcsLC7+jvzvIxsnT2fv049gWeBPRO0Gb2ynTW8CPIdPQ8yMLxW+jK8jY2WPC4/qDzXVJu9zREEuzbiRD2+ZIS8H0ctvexDGL0kgA893ADuuv7fR73jfMa8iD/gPNtYQL3WKQY9fdhmPQXouTzlrlg9O7/dO0V6wrzMA4+8YREvOnwbnj0QUm29a6GhOzXhhr3oz4G7ZxiQvKSxx7wWV2a92gsivYV4eDsyz4G7tm7HvORHVD0MKaM8xuElveFXjLsrXS495TVrvd5xwrsHU1K7CJKJPTUjTT3Ijwu8N36kPfiduj3Ej2G9czyCPVV6Eb3+iJS8YfFGvIvuBrytw6+9veGpvITsRbzR3yQ9Sfy8POE3bbya3cE8u03AvHWPKz2mbTG8EXDbPEWicD1Mzky9ECGFPHVI5jw/VHo8vzZLPdqkDT1Dyni9jI+kOy2VcjtMCIq8PNg/PdsBPb22UFA9aE4LPJuBqzs8Ngq6WBlNvEnZdTxUYoC8dfwMPftYir127Cy9SYF4vJwTIr3wfeY5L1F4vPjZzzxwb1E9UwhHvd2MFb3m4r88PJ7hvH0VgT0K9b48DwJkPEv8rDwbZjk96Quzu4MBC723BB89KjzDPGmtJb2u0WQ8e6idvbaxuTvPPoO921sAva2l8LsqiUC8ta0RPeoFnL2Zs/28KSwfPPRIzrwmUt09S/nhvJ1MHDw9MuA8v97WO1Maojz/yoO8W0sNvQtsB71YpV28UTaCvVaueLzz7i49DA0nPWlisTt3IS69UB+UO1Gr2Lu5Oh09ZbS+PCZxJzyVyTq9YyyuPOoT9jwTFBe9ngysPM0tF73aBRe8SZixu7hIU7zHEri5FMUROtZDeT2tfx88/5X+PJlv3TsX0eo8vE/jPMdfCz3Nw049QspgOyIn3zz/ApK8abaDuwoATL3FWsq8K512vHdlzrulxRE9tE1WvcEG0bwRrF+87QqDvMBQrrxVIeO8K/MVPXaPkDxoW0A8c7KivLRSqTxry1K7l0kKvWhcL705Voc8S7sTPDH5jr0gZSG9udPJvNZf5jw4ClC9njwSPUgp3zspBxq996nTPFyQqjy3ewu9VnaEPUwtWTwK6WW8z0wEPar8KjxoTDK9d66FveEn1z0Xhnw78V3IvPnlrD09Do29kjQcvVwJTT2J6AK8KzEtvY9XWrv4rwQ9EBF6vOZF3zwAdW8975ZJPCcQYT3O1S29HKXJvbjMqLyqcYG8g+gKvelRGz3/vUy8SHh/PLL4nLwjC408yGVLvcdKvbwnLKu8dyKQukthYL0b6M07uKz/PCdyCr3RRyw6wYJpPJTlmr12jBa9d/8qvQqzEryBR4K7awLivHvewrt/w649Vlqmuj2DDjsnHmG8ZfQVPGfgwr1PMlS8hR8Mu+zmC71Ed0K9zEP1PI4sJT3II4w7Eg+gOxmkGr3xvcW7pU4sPJo3B72NsqU8cgVlu2AJKT0zwHK8pUnZu3XqwzwKX7U8yrtbvCJ6zLk2bY69EZP9O5lXor3zT9Y8yk2gPc4Lnr32EXE8sImjPArUXT1nfYI9VBBbPBdwUj1dRLm8zrYZPBM4PTsk9kA9389mPGZxejwyLeY8PIvAO0RaSr2+yyq9m/KMO2vOMD27ctw7rHHpPLj1X70GL0260RIHPYQ97ry86oo8VtoaOyo4kjtHmLO8lFTuPFTwnbvd+HC9ZOYuPUWVp7vYoom7Vl6pvInwYL3MdZu8yLoLvewwZz0BLJG73s0wPRRhZLygtcE7ca4YvPxCiDwpDoo9plYjO9fZmr1PQek8kWRgPVFN4byDkRU8ecFxvVsAab0JSQU8ORExPb9ohLv+cF+8i1Lmu1xzLD3+wTE9WNrGO8Xz37wpa5K8OB75PBnzFDyEBUW9pFKLPP5XAL2+p4W8fDT4O/HBXj1QJaO8MGFWvAFEEb263v2873SEvCRGnzzfUII8d48lPWESEb3giWc8xc+vPIBnLr1Z8gS9Z1TTO3hKzzx8XiW95+FDPVpsSj0h2TY9Py+FPeTc/zyfxto5WOINPf6z1bsChlC9ko8avEMp67ogZ/y844MlvC210by4jNw8D848vOfHpbvrbeo8IChiuhWzoDze+eg6aTcBvAbCrrx3+B07du/DPIdJRzzwl1q9XGQHPT7sPTyaB+y81AsfPXsJ/7y0xDA9QiEqPZ9MA7uDz0I9csFBPTDji7wi/TU9XDNFvTKBRTz4PoG9Yy0Pvc5wGrx64DS9QyZVvA3fQjx7CUs8hCKJu4AGXD1zAvC8JTC3PAN2VDztFRA9cbiYPBqApz041gC6wNQSvb0hOztxq2s819zWvGO7AD1/g4Q9RkEDPWyf4LmBmFK8MLunPGCrmDwGiSS9eu7XvJvJpDz/sIw8Ufw2PWT+EDzmrpO97S0WvZ8lPD0UTsS7wSYeOMQW0DyD/Va9phLlvCS0SL1HTw+9hqGkvd6BXD0mM/68nATNvMSScr2DDgG8vNyePBoIp7wCl329E/uCvaDkqTwXJQM8fBLcPEz9hDxzOVq7urVlPSsWCr2HqoY8w7g6O4P0+DxI3IC7yyIAPeQqR7vl9VE9WNxpPVNvMT0V1q+8g0GSvT2EhbyDXFy8McxFvRetgbxUfWC9x7qZvSujZjuPc9m8ElS8vNdmJz1XznO9VUmPvbOtETy+CjW9YtJXvRLJd73QQTE9+Xchu5f6D7wus/s8D5WpPBweEzyqrVM995KMPbrTATt63n68Ap66Oo6GDz3kAha7X7xDPclZcT3tWoS7creNPLqNgDzBDoq8AWSfu4Cc0bxQwfM8FNM8vQ3pOb2xgYs8
  44-2: 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
  44-3: 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
  44-4: 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
  45-0: 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
  46-0: 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
  46-1: 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
  46-2: VjkPPbHMOryMrvg8PcchvM4/57yD8Ok8RxgWPb7UUjt5Agy946Y4vfGgqTwL2dM8OP2nvHLrFz2ddI28k8AhPb9pwrzmO+06bDiCPEvTQj02koe9NghYORZ4+zrQYf882rgMOv33dL3xy0Y9jzugvBHjbjuz6hC89dFMve6mCL3AwCi9sJ51vJDfkb1JlRa9+DH4O0eP9zzrcei8ja93u8Px/rzScN+7YCg5vWbPoLyl6D28+X6nvHCb8DwMiKw8o6aIvbpmI72p7UU9E6squ0Arqrlk4jg9SU43u/pyuzyNw5E8EPbGPZmeUj1fOP08gqqcOqQ3pz1SvrI6YfFUPCjKA70AEgi9FNdGu+w9ZbyAHWW99cKUPGJ5ib0w17a75pqxu5OLXz3Rn8c9eq8svSzwSL3DPUs9NebquuqcujxhnuK8x5qNPNfdujyPW++8TvdEPHFDvLvqHec8ghC8PA8gYjxeVkw8qn8+vRsiOLxGCHm9ouFHPWaQTr3Mbss8ejD2PFyQPL39RKO8JT2FvPiD1DzNAZI9mOIXvR2wubwuhBC92v4HPFqpHb1tlRU8qjtxPaGdubwfPQa9/vDmu6Y56byPr8E9EH8EvIk0ALycQk28RoW3vO/GxrtyVQy91mbSPYYj0ztp3Yi9FVItPWL9Ur0LZxk98+QFPXOuVzwpHai5aZH0vL6mSj12+ek8+K8vvJMcwDnMCRk9F3yRui8KWjw3zgy9uuZ/vaCLpTkxMEW7FcIJPBtoJj2e3ru92660vc2WpTluNSA8QE7TPDSydL3up2W7lBwevSJDOL2rwJ06YdDkPJnZlz1uHkw6sF6pvNIAkL0tPHe8ydINvcbD+LzXF/O8qZClO62ExbyuZ6E8qLu2u03Xuzzu3mq9IPnovVsPbz0qZY28Xr8WOldHzL2hvZA9y2nzPArJ9TzPfPA8hJRbPQyAprwYHxW9HAlzvOBNtjx8OVw9PAYXvEBlOz2kRmo7bNMDvD6QrjzLyOU8ujTLvAPCcTu1GAu91qGvOn6bibx9GE28YEP2PAm3Xrz34Yc8qYLKPBCi4bwFVyW9W6FWvD479DtglHe8pr8VvZ6d/zzQPpO8fhhEPUFKEr221J28i/BJvZI2bjz13Es9LRQBPbqxgDujgM29irIavVbMGz0kHEA8nUMHvIxU5T1QLyo8HZ8/POrHwryXAf68HOJHvINRErtE2ya89HIQPALz5Lsd7OI8rUaEvbhnwzzvKW+73msquuvVNT1VKhU9V4GwPEBYGL07n/e81/R6vSaS/LwL+D+9gqUmvdmTizvXGdG8J6iaPcSFhjuaT3m9sqKNPBP1OrwN8/+8AEMIPa412DyyJzE9tz2OvfmPoDx9ag49JfeGPSUjorzHqhc9UabCvbUdzTxCBnw986RUPIjliTxg9S49rgvPvJUP/7ydbe27eWrtPGxNu7pSGCm8ENMyOyHcGr0vqaK640OXvOTNk7xcQog9yizHvPoRR7x72y+9Rna6vB1aeD1KPwc99KmavAi6qbznDHW89ryKvbaQpbtcQMg8nRkKvXO6kLyPfy+87vGyPZJj3DwAwru8p3fHPOUMoLzEJ9e8LJgovZQfRL3+t8093TFUvDZ5BL1EhM48IaPovLJwl7t2oCQ981zKvO5WETxakYA9GqIbPV7OpruZo8q8nrLOPX7SpTzo8xW8eQ9ZPYc7qTx+L5C9it6HvPeG9juIY0G8+29IPV7asrtj5EY9tjg0PIHo3zy0jnq8Wt/bu/W8Vb39o4S87f7auyXAQ7wN9B29ab1APCJYJ7wRZdi8JqA+vfvmiz3EU4Q7fi7EPNGogbwLvVI92JZiu9/LgD3vZfu8WOyyPLEOlz2l1je9F7NCvEL3SryR6Dw8jT+dvMjzgr26YwA8/7IavefIkbxyAsk7SnrGPLEFMDy0YQq9Aol6vK1vPDzqKaC9Ox1TvRIGZLyqT+49wpgkvEJJ0bpQVI080mTHu1EDGL2lqMq8KIClvCUzlbwSjeo8Q3NuvWSVBrwTFnG8/jNAPCIDXjkUXPi7InEfvVmA47wGuvo80ziVvD8Fcjy/G3c9DI27O98tKz1JsEG8YyoEPfiRe70+ZT87WS1qu4A+M73XD5m89EtCvHivCD11AYc8XfAmvbgkwDz1wCk9WdzTuxHXrD2ha6y7v3HVvMVl5Tufa4g9maZDvd7S/jyXfJe8zEEuuxAWpbwygos9sM4LPQ8VvLvi5cS8xKoqvRGefjwpNo88szgaOr+v0Dyzz7g7kTGbvHbewbvw0YS7dPqCPDY+yrzN0J08K96OO21BX72cFaG8NAArvU485ryxp369u98XPTIMrD0tOj88zlyvPTsUQD1FsC69zrl4uxqiJTvAgpC86rdjPZ6bkLz7UxO9I6HevApTFz2kJRw9j2UZveuQ8Lof8zm9cL2XPEcUPzzQbsE7sLi4OwO9pjunUik9EBDxPAudpjymp9C8vX6pvLkkPD05+Li60VFXvRBl47wMcQG8kRuEvBRGp7vax0i76g8HPeWyTzwVBQI9iw21vcY5ir1rzDO9+GiXu9gPvr23Rm88/tLPO77pJrw2BQc9+J2pO3rpo7xyI7m8VROdvCh9tL0fuXY8e6Z5vCgb9ztVwSk9/tz4O8AF4zxcdjy77Db+u5bfdb0dAaK8Gi2UvJXBTj0Aupa95hjMO8zqgDx8w0Q9PDFYPOlkKbxB99K8FiO8vJ+XmrzlW7I7R1sGPYe3d72UL0k95rHePKYOaz2gOzI8MFyIOjjbP71afFw8UojdPJvBkL32KTI8llE0PU8/zbxgARW8m6ziO69LcrwCWxo9xy83vZR4Qz0LdoC9V/LfO+QwYT3oih89SiV4POAFTL3v/zQ8jMm8PLUqbzzfrf+8rVOtPEWl/bye/jA9qr8PPSSDETxor0w9GFiPPArgFT3MlQA902HDuxTM9LyRA/S8lOtlvJPnCr2GCzS94/ycPf6xZrrGOnY82JpYPYqD6DyMat465RwsO8WzdT0DRlO8drKzO7S5NLxnoAU9TXbAPEg2Izzc1kk9Ob1XurQu5TmJFTq8EaMTvUjszTxAeGC8LD0UvLDcnDxUlAw8Fu5ZOyPT8Lzg95I8xKt/Pe1PhzzaHYs9640JPQkzXDxThGe8fk0GvFuUrzxaMw48vPTzPLTkwzte+Qc8jQSuPINc1rz5eRy9HvtdvVbIRrydMWq8OQYsPQPgOzuzGqO86e5YPdZk6jwHKzQ8ThonPekKVj0MZw282GZIPebOyjuollq96TXVvG11QDwub+08GRJvPJPXjTzbZiO9/hbbPNsQi7s0SN+8budcveMvNDvcR1S8GwsuvTBSL71VAjW9/FqfPDRCEr3nyhU7dN+RvSsECL3FGLW8RSPaPH/UC72GMTC8H4UxPboM1byp1469ug56vT7Dqjyd8O+8uVsZPLQLaDs9ypO8MEXUPIyBKj01NCM9EeOAPZIDK7w/6kI8OPv7uoZtAD129Te8l9awPA3cf7wYNZc8iLsXPFQKhr2+mae8/qoSvK7/Rz1tDhW9YzySOvzXmD1B5sU8f41PPDd/d7sQjX052Z85PAJNarwIWyK9W/pCvRsZdTzqPSI8zxE9PU5Gurstu4S8nv26PY0RJTxSPJC8DESPvNL+hD34c9S8M2c9PeIvnz2/oYC94SnfO3v6uDuyM9K7pRoBPZcN5rznMmM8itCGPEhw17yCFLS8A57yu5kUgT0r4Ru9v2ZDvcAX4zvb1dM71hmQvALklbyqd/A8894cvR509zz/YyU90i1NPZizxbttCla9VgamO9ovczxI+QS8bxKSPDosEzuavY47uTlEvQsKY7x2saA9wlCEPfOhBjyM6iQ9AoV4PG+uHbxPO568zGhhvYBEmrtlrXY9b1XqvGgaTL118RK93EEbvTCn6bylJ9K7TQlGu8RZMj3eZQ49kQS6PC7n37xfGTk9KYsXvVkfHTs2Re67WY/XPQAU7by6p4+81kWRPAEwNz3gwQe99tmFPX6AyjvK2Sm92a2CPe71dDwiGBq9AgOivIy1XrtTPx+9Xed5u6nY5jw3b8+6k+SYOzOhKb3T/JI8
  46-3: 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
  46-4: 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
  46-5: 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
  46-6: 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
  46-7: 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
  46-8: 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
  47-0: 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
  47-1: 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
  47-2: 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
  47-3: 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
  47-4: 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
  47-5: 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
  47-6: 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
  47-7: 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
  47-8: 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
  47-9: 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
  47-10: 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
  47-11: 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
  47-12: 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
  47-13: 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
  48-0: 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
  48-1: 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
  49-0: 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
  49-1: 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
  49-2: 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
  49-3: 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
  49-4: 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
  49-5: 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
  49-6: 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
  49-7: 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
  49-8: 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
  49-9: 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
  49-10: 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
  49-11: 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
  49-12: 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
  49-13: 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
  49-14: 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
  49-15: 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
  49-16: SN8hPcrhsL0gdB+9y1iFvZyFQTxGu/c8SPkwvSS7PLzuEgO9HpORPCZlObzRP4e7IlCivNUnOj07UzK9N7GLuzS1jD1utNy8LBsIPAWSITz6xDM9YS4bvSgCDDyTFXg9/vGMPPPDyzxz1dm8nU3fO7/Xbr2TxGO9MAWCve6KDb0qDmk9vWHDPMO2gbyJBVq9q+5pPPAArD22wY29x4DKvHKjZr1q3SS92jIWPZVm4LzN+lQ7gNy0vNkihj1MYsc8ApwevYPA+jwK8lc9LK4nvKuAwLz0a0w8KHG1vZFy2zwGUJI8V5FxPd6qLTvr1vO7b4O+ve49aD3r6pU86h71vLVwzTohqnW95uw1vJjxcTx/1jk6Aji+u6sI1bp0B4s8b89wPLXjZryhati8taKTvV5Flr0vHig9R+TSPNQayDyHTAq8S0SGPSzkNzzdsRi6giefPNscn7rQt9A89EdzPcmCwD2ljHi9+JWzPOKt6zzSAgu98GnLO1H1Tr1RNOo83GYMPcB3DjxL8H28ZOO9vCeiu71SC1Y6jivcvNnezrsp4zK8X9rcPAqSOb3zWhA9tLftvFJOBjwSIIS88Bq6uYEu1LzatOo7qNOXPXWEyLsdRV69Kx3nvPt7eD0K+6a8N82TvbiDMT3hxWS99ZyVOrVoyLvgN1M9nL2iPFv1TzzV0ZQ8CwW0PBbcBLyQXr+8ovL0vJADITuh5D09o52YOxhCWbxnxx68YODlPMt8RD01zei8m7qGPBEQvrwRagM8PM/gvWzoKbxZTAk9XaUUvWI1NDx36yA81U43PFJ1rbwoNU697hJ8PYzmdz2wimK8zE4vPUTglL0CNj89uopSPI5vJrs2PFG85myQPQwqgjsqrPC8aAEVupduhjzjAy29C8ycPPkwjT3rh4Q9xUUku5lyjTxTFMQ8zv8RvUacvj3wpoW9d9/YvPguJr04icy8w1vyOu+ChLr+dwi93+k5vJ9yQz3iOc083YZhPOUHQDxW+JG7CfHHu6KZCDxUTBM9FCUoPea5czx3v/C7/cRevBzuSr3/l2e8FmStPB0MK71FsgA9VFd6OxK5xDsayRg6DiRZPB+11rwR5um7EMAjvdJ4cT2eISQ9bLNJvVxaNL100PI79kvMug8ODz1mtJW8xDaevEOZzj0/dUa9ZRlOOhfwXT1nHFg8l5tpPQtrkzxhTaw7pwKsO7JkET2Sug29FgJ5PV/RprxH3qu8KI/7vGigir2PK648RWIvvOzrJjxXkyU85vadvNK/Fz14IuO8VbPEO9CiCD0AMYQ9SKs7PRw2Tjw/L6K7nj0gPSRo2btc6w8841+hPHZxmjq+4lK9xJaDvEpzgD09qh28a+WdPG4Tn70Lo8a8CTlpu3g0Ir0fSTU76PLuvNxIIzyQ3S89GJKtPeK/PLp7E6u7vtkzPANaO71kTea8daq0PCluqD192mW9P54ivIk0C7z2z668cSxSO17fNb0pSsi8224LvTvURDykYYS8jyKjvLWWGj2iSRc9ZYc7vPCA5rzZjdE8F0UXO7Cjx7xT7mS7hPFePWPqkT3wki+9asAIPeN8mjxysXS7i10ePfE1TL3Ptzs8Rx0oPWGke7xJOhW9tKkCPSkxkjyX5Tw9/hSWPKoCILyMpm09piN2vPSH+zwwSAu9KqUhPdVAeDz28jK9ngG2vA5y1TxPS0m9DjobPfz1Kz3ldGe878JtvGzJQr3mvg29RbaxvI10hL1J7zE9DzPzuyFslLzwr5c7piI2vXZZrzvaemy8tRrYPHwbSDtUZSS9f/2suvD/Wz0m/hU84Sc3vfDfKzxf590737Q8vYXIdrxeXII8M5RHvR8rIz2QyCY9u/OaPFbuDL2ZBvA89XzSOupe1LzWzD89RBkxPXuzuTw5FyU7S6RpvQkmczw3uP68FuTsOyX2eDwrYpC8Ly0VPNFvP72Wh0e8XGWrPDOmKrzI8VU9j6v8vFNNTrzXXf+8FJusPDBUbrzSHFE91CELPJ9grr1px4i8TiHIvI7RCb1rcRg9P0ocPeQtOz02jmE5usWIO3YvprqbOi88tIL2PH2o37uN+Ju9826svGmQ1zzKgQi8zaICPj4YHb1EMjO6CFqqu+Yzdj3LDMm7KWhQuwIS/jwNJXK83BoFvRec3jwpdBM7ypULOpVq1bvTQKo8Mia7PLFRMTvGL8u8PhAFvSkkJr3Y6rc8Dt3iO4YH+TsllnG8SlRrvMJa1Dw/KyW9WrnAvHuRQL2lW647ZwWLPfv2Yz2+xgA8VYBXPI50rbwRawA8CqI3PHSOXb2nJyY9Fiw+PO/FSb1C2W68kolyvX8uAzxZ8wS9UYOUuNYZfD0ZKw68s5YIvCszJLpXQAs9+wToOubr67vfbqc7nmmuPNj+3Dp6bF685DzJPNaTET1BLcG8qptrvcKInz1+OEi9li2fvR28aD0wRjK9GG+6vEtiIz3vNce8WO0wvS1MRbw4fci7qWMQPSthnD0q7ci8hVSRvbZyALxgube8BYeKvI/AujvAlgY8sWNNPUSzDL3bRmS7PYNAPZ/2b71Mn1a9uQY2vdH2eL1EO0C7TCsBPQCcPL3yw7e7G8AEPaXsWL1lJBA6QFLqOxjpn7xENPA89Nc/vbBxU7zIC609nl1KPY2VnzybdY08AgqVPAQdnb0UZvm74b3AuyPkM73iL3e8PeGjPNMIG7zHFUe9se/GPDBjprxgSgS71thAvI+xhLw+lxW74DnevI9kTj14vQa8WjgfvQ9J2TsyAMg8t8MxvKxaPDwFp787C0UJPWr+pL13Kp484x+CPRbA4jw1qdI62/5SPQkNCT0EZO086mGeufw9ND3NHGw99tDiPEpg5rym6X89hallPajkm7x77MU8Paa2PAtmv7ymtgM9i82JPJCZgTw8u1c9F7pcPYpSCLuTK9c8JxgqvR0szbuLSqg80coWPSc38jzzpHO9eZ6MPBZDRD2tipm9r0SzPM0mLL0b/Bu9c2M9vXQNPL1jW++8M9CnvZfVQT2viIO8PScNPTeozLttpAQ98UeUPOjUjTzkHUg9rl28vPq48bxR7W88jZA0Pc5ZMz1d2LA7eGuWvDWSLb1Qfd07oUh4PEejar1g8RS9I5cDO1AsAb2U+Bi98gH6u8SXH70HTWQ9UO8UPC20YjxVwi68TWWrPMCD2byLRtO8H3pyvFu3kD3af/I8lg5AvQBIMb1cjgK9/1lcPdtFM7xYzKK8ixI+PEvknTtC4hC7+0sDPPpGHbufdEu9Uwg2vW1V1jxxtDy9CwCgPDXMWrsJxwk9E4k5PSgcLryP0CC8yCWBPP/MSbyWCFu9UFzLvGPnpr3e/sO7WPoMPLEUF71DLuc6GRE7PdHTk7yJxy491DA4vTtsOL3yM5U7DgcVvYFtnLxYRTK886dEPSfwzDyrqCW84AgHPXCdgDzXO9i8ALIkPYSsDTub0tQ7mmwnPXLL6jvXnIm7Hw98PMLoobxE4iY88nNau8GcXD3l1FW94JAaPIWECj2uHom8Gj18vD3nYTw0z+465aojvHZlJDx1yIw8scrxuaGZlbxPpKM8JC+NvNuCej1w/PO8FJSdveCmj7reA0g9LX6iOiDOS73NAVk9KkObvMlsdr3sB3S8qFa+PPzmsrwA5je8YAfsPJFAFL2On5o8XMYuPaVHbzyJG1m6AwIjvXFSFzzrBwg9FiywPahHk7uczp69LaowvD0rNLz1mUA6JalivTPUOj1oiMO8l6QbvfDzAbxTtx+8EcLkPPTcNz2ZGTa9zOeyuqQBBT30y/y73KTGPbklGz1/4eS8kt30PKTmLz0Ahgg80dBWvDyU17yPxRa9pcPJPHAQmz1tnSa85MpuPRSe3jzSoHK8LfGcvX7dF72Hlzq85KUKvf/+krwwgF69dO02vXruYjzWFYi8ajswPHD9Sz0acne9tUXhvT6fVD3bvOC8qqWWPNDxR70h30g9RX9tvFFlHrtlUR09tRWKOzLjQj1p7is9Vi9/PWFTC729xhI9Q/48POgVND2yxbW8SwOwPB+Igzw/s3e66uCkvHhvRr1Qavg8cEY+vIETHj10MiG9al8QvZgqkrxO4Iy8
  49-17: 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
  49-18: +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
  49-19: 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
  49-20: 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
  49-21: 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
  49-22: s+k1vLk5Kr3foE+9jetnvYRZz7wFgxI86LxavIPxbj0rAKi8dqS7PARsKD2I5fY7zzWbvHZfmzzfBZ08LOO/POLIoDz5Kra88aeCOuK5njtelQO9VtQnverbszwRt5s9eeeju5hr87xLT5A81u4gvar6Gz0uslM8+9RovbBmP73DciQ9Bt+SPTz/Mr3usZC8sm64vJwiILxnNSW96CpnvLQtqrxyeia9ZpYsvcgbM71yygw7q9u8vEI/FT1zD4Q9MyFrvTPI/rz7ea08qWZsvNCOfLzFX049ZYgnuv5mY7wmQ687GOewPdJg2LwwheI83NFtve4WJz1SB+27PzIyPNpzoTyDk+O8LUubvFfEhbwBY+C7P3OzPDccqjyC68E87CGqvCQ1jD3HUZM8OLmtvRgMgrziuSc5Kjt7PDpZTLz2l8A8G1EgPUdehbyJjgm9x7mjPK05CL3Mk8o8Ea8KPRzBU7xaRSo8ySWevMgY4Lyxd5W9kPx8PFHeMr0hf9E8AvhAPAIjDr19mmC7gFJJvb54ib3SUK093S19vYO8Fz2elfW8Mldwu8a9J7yTCXu8ckNfu+2Zbjw7pAw9RvyRuoP2ML0ngag9bnE1Pa7MWL0ipQ29DySpvDzorTvp8Qq9ffZjPH1/bzuIMT+9HNC+vOpyczwnV4I9BunsO3kZG7sK40c8Tf/gvO+MVzxwTG47izmXvOxZITzBwwy8jGsGPY9l5jx3tSq9v5gnvYC5lDySn167A0RAPdhh4DxzVCS9qZOXvTGUlLzAW708hgsHvT4Z/bwbQlG8oqbnPMDJP73O5EY8cZAiPTaPRzzvDCG9WownPfDPib0W/US8h7vmO0YRG7xFeqi92xybPTFxc71SkKS7q+9GPTmGqzwJu2S9/1qLu4pscD0F4Ii8U1PgPCEbo71njEY8y0kWvU66oTygrnK8FMXquxSW/rwSslO9EiVjvDi4N7yR8QO8BWKoO+brhj2SL4c4sA2fPH2+lTzJAts8ZJbJO3ekEjyUFJw9EtnZO60vozsunqm8UcykvGqs7TxozFK82JCIPavBhr3jbBS9g+yMvV7UqbullfE84XtsvOtYhTx5ksq8Rt/TPDVirzz2TP67x61ivYstJzzsIfG8FvzHO1yjTz1V4WC9S3vUvCO07jqSlrE7/Yhyu0307D2BrYo8b4OWPHzg+jutmXK9HhctPMS5bLzZQHG8aACeuw9dTr00/eS8atM3vULXhb1Arjc9VNDAOxZ3pz1yrZQ87FmuvN4J57ysMUW9pSxBPDeB1Lxl/5a7w0d+O549iTtvPaK8uv47PTrGBDyYmcO828/kvEFl9rvy8MS8iKRuPTb1ADwx42A97xJZvT931rznoMK8DcNWPah6ebss0Tc8hJdiveb7oTxv4KU9fyZXPMscw7tYUji8LvQBPPF/s7yPHHS8sJdGOylRjrytmlq9V2W4vMa+R7xYQGu8LDgmPD+YPL1NB3q8yFJTvObztLx6Np69VumJPGBBJ7xa8XA9+lhCvbzaKrwy8T88iRU9vaLyZL1DxTm76IyPvCLEN70a4CC961AaPaiJlzt8To69jAcsPT6/gTyI2M28a3WIvLV0E72lHr892QESvXyUSjyEQyw9AB/DvNNFizxuzpY98egKvA03Qj1SP4G7/JBtPezgOz3WIwm94uGJPGeVxDy0XqE8zPQCPccBrD1WytG8R41FvRfCNbwXKz+7EOCZPcC0ir2Ju8A8usnpvHLjtzzsr588KOdevKomfr1kLWS8DDhfPN+zgrxXDFu9QNgFvUCkJLz4jy27xAByvKMWNj39fZ699R4kPYlgDz1ustM8LHojvFRjez2jzTq8RWZHPMoSaD3+xRC9wENhvQuEjT1FxwM9UZ08PTRT27zDlm68aJYavShPhzym8Ok8qmNFPUZRorw7u768eKqhOsKx7ry4NUq93OqIOnMMEr1Dz6U9YAYFvEFR97zBuvs7JVYcvULaH72QbaI8Bh+FPZKBv7yRLXA9EU+dvDn6g70+ttY7++9kPLcGOrzq74k8jDj2Oy9lkryRu247wt0yvLUDlL0Uxh67RIOCvB20ljzcliW866UEO0EEEL02SYI7bLU3PV0kNj1ZHaG8yPOGvGGVpj1GtSa9QDaFO2HKIT2Eovc7RTTEvKBLdz0TTVU8TJAtuRMcBz087Sw9qMZxvbQyhTuX4OS7Pu0cOAPHhD20eRU9VpsxPfH0jbssjTm8bSE8vRV3Hj2yuCk95CY3PbMkTDxkAJy8+eMMveqdsbwbdys9csXYuh/JvDy+k3K9sNAjvZmqmb2QNvs8EtjRO+UBiLxZfJW9vQOAPLQKOT1CZv888uThPBsA6jtLRZ88udVfPekwiLzidnm8k66+PPMcuTuMAVe89OyLPMu1ET219te6o5KYva4qMD1bSWG9COYNPRzdeLsAMPe8wPizvAs8Mzkv/eW7AlFRvSL0zDsR73U8HVIvPcqiiLwW44A8MnC7vTOXqLuEKgG8QiA2veP4qLyD51K85jkaPTQYVbosR5A9/tYEvD8kc71VWvC8mfkFvUj3i70jhRG9HZLTvFl2cLwLeH071benvECNwbwR8Sk7ZYQqu0lzUTuqAA89JWCgvSlDbLyLjAo9f309PRPmPj0c2jC654QkvY7NQr0KhTE9+hMuvbRs/jySF628WH33vK/Lhr2mNIg8Tbv9vE0wvrx2+XI87rHfvHZfND1xsX080PqPPNnf7byPVHw9uv80vJ3f2bupkYM8w9iyO1StLzyW1AA9KEUVPYbWLL1EVy29F3bzPVXzF70MIlq8ANoLOklncTyTY/e4gTRQvb/VmTxx8zQ9S4QkvBdB8TyrhwQ9enMBPZwjCr3Fsdw8UakGPeh/9Lv97q29veRMvSS6NjwW7jg9JrBCPW73Wz2cWKw8AtDaPGWjVb1HCwE7eGZtPfDyDbyrawS9Mp9dPTBGIzob8z+9ork5PRFOzLwkdtg8Y1w6PP5BFr2Hykw8wwabvU0Lkj3z57w7CZdxPTO5NLzJwQM95lOfvF31+Dw+35+7DjGTvKxUhj1e1aK8EGq4OqbbFD0yFa66YoaPuzORxzxzbeY8WDpcPUkJZL3LlQq8q3TAvEbZ6rz5XCy8M2uvPR2fXr1DXCM6Rcz5PFG0Rbx/9y48uiiHPeKHrDz0KZO8Iq63vC0QH7zt/SK9PaoZPTvmtzxuK9S8ObwAPQraKz2f0OY8nXuTOyaRaz2fdmW8toYJPLewGD3Jz3i98vOfPD6UN71rEEi9stZjvbOqgTzVBw89FoTLvLTopDwcmDc9eCkzPFwMmLtzgB49SWE+vVF0NbxIG5g8vjkpvHi/RjsW/+28rflzPQHUoLucz8U8bzaHvbJmc73bXDc8mtYFPGNTIrw6ppU88POAPAaglzzLJIY8QSL9vIzVXj18UwO9Ck4nPW1WzDtmXa688BAWPazmFrxG38q8KzuMPWN05Lyz1K67+BWlPIpUpTxaQLc7qTVrPEs6jLxSxoG7A0skvWiF97ygAdK61eqsvegNST09nzY99tF4vF70xzwMrkI9j+AsvZ6nRbsU7Dg9Pc5vvCqS4Lw/hxy8IPnWPLNF3LshmU67208cPeITDL0LHhQ9bc/uPAKRYb1eUSI9eBKku58uPzybZsg68GM4PKiqvTw9iiC9Jq3nOwZGX73Yfoc8G3QmPVVIHzwDtau6bWTpO8wdsLyPQWy8Gltxu1B8Zj23jki9ap3mvDqalbwE7F86d6oIPVp0sbt1Js67AbWqvIhS+bz5v5K6tsvnPdxIArxJ5Xi9HsnlvLkTMD0V4Xc9S7IZPfmv9DxPjKo8dp15OkdvNz0Jfpy7r5aMPdPEGz16gL48SRYTvUmpFb2XWQi9EI29u6zmfjxOdrk8cNIdvbgUr7zTxGy9IaU5vRlbeT2Vn4G8/EmZvJi9FD0B3LM8BVdEPPYL1jykIi49kq80vXe2NLwYmL49nflbPeoQ+7yYZxM8HCI5PTeRsTzURig7rCJJPUDyRrwFPOm7p1HkO3reVT0OqNY8oAlBvFypWb1+MbC7CwusuflTlT23v/m8nhNOPTSiCzwdNO48
  49-23: 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
  50-0: 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
  50-1: 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
  51-0: nLKTPVjiCrx5ub28/16gvaIamDwsume8wh2XPMyJCD0yhQI9r1/BvNUMCjw/6a49kFQ7vcavlzx682q8x5kgvQ8CC72bSw4+p55MvPlz7jvrq+c8DJNmPY1QbTxGGbM9YZjvPMGP2bue5Pc8d84ZvDFK8LzHEUu9Vb5jvKnALb2Mz1w90ppQPQ71Lb2gzMG9oYJkPDgCuT3q4cK9BtNZvHxl0bpPM5s8PVmLvNuAhLtFEn88Y13QPGsNZr1EyzY9PnMTvW18wzmWRhI9CzqFvehJB7xhnFY8uIlVvTNtdbt9Vhu7qh6GPQLJxLu3g1E9YKJwvYj3fD2Mnee8PekfvUjDbzxGBRu9bqwCvb5O67x4bAG9qsj0OwUM9rw9Nm289t/CO8teo7uYUM88fiyOvadQeL0HSC28m881PMC05rwfpD68c/YuO8fXB72D4he9/hl3veXKfD3vGzY9J6/AO7gJsTxo6Ze7zMg8vchPITssszG9QPeRPYjsEL2lVri8Ux+yPHLpxzsqUii9qeaIvKce2Lz25P27CFnTvGxaUrzSBMC8hYJHvSDql7wZqeu7Hu5RvICuW72eN5680rb0vGD3yLyS0Yk8e6duPRMKLLxeN7c7+e4GvRbeYjyUEZq8chJOPDXBMj2hkW+8JTJOPfcooTywn5A8Jwu8PO9+Tjplp2I9++6aPLpnvjxK6bs8x3yhvGaPu7zEczg8XLzUvHB+t7zFXtK7C9PKvGyPED1BjVU9ZVIfvEjrPTsB92m95pCqvcOGCr14yxU8SzJNvETow7tGLIC8llMhvB5cPjwtLTO9t+RqPVF2vbqB1ne8ze+3vDXDer1Vbxm9QWDfu49cRD0ZlKe8XEnNuwf11bs7/ba73xAxO2ihaj1W1sm9kGCIPH7StDsLX4+6awwPvJ5hiLwhbzs8mo+OPQQgfT0/wIW75JZdPNn6GrzhH8O86InivNp2lTxTu/27E6LUOl6nlT1zK9q7VzsRPenJ8jxvFoU9lfhGOx7QyDw/ulw71G+CvD9k7zyPMHa8FjzBvJBJD706soe7EvJAvEx8gzrkiIW9AZ8JvVprWTzMYYw8EhhGvXXUkju2zTQ9jv8IPRaiMDx6nwu9EPcQOrWknL3mTBQ8Ixl/PDxQ3jyBkEK90f93PVs4vzzmvPW8bpjGOyB5hT3nVL09LhgvO0jJJz3Hd2a8tB3+O+HRnLt3ZXa8lQc2vdYcIDxdMyg9NA6Rvd4FN73gowA9DsUPPaRFgT03bBI9/oMIvdF/JT2akZA6gReRPaVzozobEzC9ZaUXvRQA57sR55u8F8JXPcoEdDxn5MK8Dbi1vC0JOz2YOLg8qSJbPX2EMj2bDeC7T/EPPIjDzrrN1Cm9PMysPMxCyLzJXYy8vkBnvE+ZgLqmrDY9vGSxPIWXz7wyUe480q/UPJbLML3e2Ra97MV2PVAKxry8Rji8x1z3O0MNS70Q7Xg9mzhnPf3oF73rS0U9l62tPFqoEDz0CDu9XR+EPKNEBrpyYEA9DQvjOld/srthH648hv/eOxrtp7wyfV09wgXDOyn0vzz/6f28POSLPIOifjyGw2q9awTBvT9XrDtNCG69ujccPdAb7rt3Eh897OEyvHBILb3eopM85u/XPI5Ikrx7WJk8zzHDuwUTjzwbckg9X8+xPJVJBj0lKoS9xToGPUN+OrwaKYc8THq2PBzjaD2hebO8RPfGPDJJdbxzXFu7ftGTPI8Sg73KNCE9YdaWvH82Lz3V+Im8IRlhvNgiIrwVs+w7nVQ4PbqaCrtWYI47bEdSO76GFb3Pfi+93JgXvZz8zzxEGDa8ffexPBWQYbzX4Fe8cS3FvKUikzw6TO+7FEt1PAaPQzxqoO87DyAivAPKzDywkUe8uACkPc9itL35PBG9WLBovFZ3sbw/Aue85xzSPbZ/Fzy0UQa9Xcqau/M9/LldZEG9YJAQvVTr9Lzs05M9oQvfvApGWDvo1/47wHzavLOphL0gw1I9G4z5ukF46rsR4Gs8HpKkvAb9Pz3fc9a7aoYePfXugjw5Bco83kKIvDq7ubu53Hk746QTPKiWwzzHHBw8/X94Oiv3CT3fjfS75h0WPQmQLLzaW/S8xUvIvK8LBb0bII+903zxO49bZj1eqR69zBX4vFxRET01dfg8+VJbvfq/3zwXagO9Y1jsvHH/zDwbSoc9KW2KvQWcEz0oJfe86XmxvD1REDy1MOc8vh/fvCvKNb0TC988thgEPXlatzzTWdQ7A6yzPMyNbDybpBY91C0VO448Br3UycE8bzudPNzuiL3J58a7Ei6CvB3Ml71BYgU8SDlPvfzxwDu738e9rluXPNd0Kj0DUYC9ge9QPOnTsjzVEpe7jO3pvF6qn7yS5Ka8Bpm1PRGskz0z/su8dbAsvCks/TyM6l09uzhyvdr+nT18YgW9tpJwPeYVAT2GP4W7S6qevEMbKTt095a7y9AyvRf4jLya+SI8vZBEPSAVIjwfto499f7WvOldljwT9La8chbaPJ/vXT3+0Rc9dQR7vL4YHT3nD4w9/N6rO8ZGqL02sI29HRMPPG41rL1UWSi9DMTIOwRlKDzJqhG8WwUYPRIYNL0C8PA7CAd9PPunDbv00m09iF0avME2LTzVyp89okraPPD1wrysHL49gvYvPUZaTL2b+6Y8hDnjO3Kmar1Y5Yi8xvWQvBdqoLxUx6y8KGWxO0+387wZztG8CHgkvemNOr2ajIw9GXI2PIpZGDz9dQg9ZdAKvYa4ET2AqI27o/e9PEyjJr35oDm61cNZPKrxS70CFg29lvKAvCtXq7wupwi9rJVRPTi+eDtj2So9oLrTvDNgl7yNZVO8mfGUPMXFqTwcM2U9EksDPcopA7zgRQE9ztNUPRTTtjwxGRI9UXmfvM9YYD0iAp09EFaZPPkfljs7+k88TD8CvPD9bb1lvt28srGVvdlXUTuwX1q9TzeuvcFN2zyfWim9Xouku0r4wbyGaqu7cM0fPTwvbr0J+TK8F0AAvXhvBD2aBgq9FTxePJTZjbzGiig9Kg1OO4QGsLzaReo8bH2pPKfuyTxEKTk9vocVPUPURz16HzM8shzjvE8InrrG87A8ch97PKtfNLxpcg47XWNvvITbZzy7fZA8Gsd4PaNKdbzqqcK7glk5O7804zzAsOY7cLRrOzaNVb2Pdjg94C7yu7naH7ySDPO8aWMkvR8d0rk6Toi81fMUPIJH6jyZBbQ7xtvyPKkRrzxBR2u8gZE5vR+KXbzsoRy9GmibvMEC6DzdJxQ9c1RNPP3xsju84SW9yQPcPM2S+7y9XLw72ae+u1iFLL3OP+Q7L7givRdoQLxUfje9iwdMPeMpT70Dq5m9sgDDPERiuryGy/s8Jo2PO+0C/LyBzdA7gqPQvJHK1rznyka8mgOAPRzZCjymzI69YJQHvW4o1DwhXXe9rORXPKSnkjuDiS69fuo7PWYSkrvU46s835SbPVpx0bzmYNc8Su2bu2vA8btShGA71k4AvDFomTxgtfM7nlyrvJdWObuYq/26z445vetVVry0w4e73dG/u15C9LxhHEk96chlPFlvwzo3T+w8WgrcuxFzH72Q/Si9702QvKrDUzxFk/085hWnPV48eLsveBi9zxUCvBZi7DwnCFI9fjnqvNWw9Dqc7yc9GieyvFYLaDpKobW8tZ/hPIi2kzzvIo+57mMxPNastLwTCEW7BVtxPGV4F71Y5/06C/bEur0RCj2bMQW9tCDoPOM+0rxv7+i8iKh6vWB5mr3gu14858ByPEtz6zt4FOQ6L+b3PaVKyznwngm9EyXnPDYbfLzc1yO9ImEZPV6AFD2OP0u9UbIjPPyOQDxFk/A7auTAPavQcz1vxLW8KP1ZvexxQLxEE7O8adkivDwXfDzj3iW8lvnYveTi67vRK7G8QC0qvcNBFDyZan68lAX/PF2slD2xVdy8EQRjPfYDx7yyAo09zvMcvfbGvrx/LIA9BNIYPTbj2Tqcrj49ERxTvKov3DzkX4O9on9BPcPIGjwjkKw89TwTPD/+5zz7bIw87K1RvfuOfr0mGXu98a2JvCg8hLsGSXY8++jXvO4IhrsvYTC9
  52-0: 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
  52-1: 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
  52-2: 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
  52-3: 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
  52-4: JRY1PZTAWLzC4fQ8uiG9vG13crwFIye8apszPYY2PLwQjUE9XOLcvGRtFz2QL489ixmaup2plbtgk/082shCvLRm/rx40C89wcPpPNA/ND3A+pG95uiOvL9+rzxojCI9HwGJPHE52zw+xO88nU1QvV1d0bx52ZG8zbZdvP1Hgr3xfRe9qMSkPEzN7jzltR29uvZwvUhHwjtlHL296M/TPN2piL3Glac8vSf3uxzTCLxDLA+9OTsxPG3L3rxgkO08TMeIvS0OeTtfgLI8KMPyPN7vkb1wEzS9TdRaPRf21zyl5ZQ8r5J5PTQj4TwKksw8NOOfu3RTlbsPrRy7dlBePWa3Ib2WOCo85aWZPXgejjtBW5O8ii6ou5vu0ju21R+9XLRCvaWT7TzUIiI99sQMvExXUL2sL4o8FVykPIK9J7tnBv88/ERFPSL+zLyIC029s7javABzWbz/T4q9xGIHvffaBr0Hd4o9K9ArvVQLrL3cymq9r9NPPf0OGr1OgEY97/xWPeDKkb1V7Hs9YrbDvKo8AD02URY9bCmtvKGbNr2g2yS9KSV2vQClsDyhLEg8Ur59vBDbMDw4h7I82NQpvVdsz7z30TE8T+h0PJUwajzUZkC8prwwvXSfSTxles6894g3PcJmIDy1+Z29R1nxPG4F0jzx9HY9P44tvaPRLL3satc8til7Pb7gAT356GI96CG2OUQrPDxFdGW886dFPdyvfb2/Vu87jlEKPGzmsDuRrQ28FJonuuDyJD161xC900KgvEVtlzyovhw9Za8kPWN1Qzr3+MA8N9JyvNm3oj1saRw9UkFQPJ6SFj1ZEj29GXxOPUQfOjuOorc8DlzGOwWsBTzJYFq9hoxFvDxr1DtKM848jnnnPP6m3jycmBg9SgHeO7/HiTyuQ0889MH6O2CThr0bU6M9ge7QPH/XtT0TJ+07dimOPYqJ97rXAjq9y5JVPCeLAjzlAMK8mKaDPCYZMT2YkiW9cfuTupI/xDulqEO8fyxIvLm4kLuj+Q08r9lBvBuBkTpnPky7qbXPO+EKBbzDZ7S8uBLQOp2SCrzavpC9kdokvPRMAL26RxC8oACsvMJzS73eyJM8LDNBO7IzSb1ywXq8SSlQvUOmjDs6GoQ8AE6gPda6AD38Vwu9V1cDPAeUDT0EHLw8uHyRvFXLeT0u7608CxQsPWYyKT2zJNw8gAPQvPSfmrz9w3m8GI9ou10uuDwx9RO82X9ovJnCbz3ZtyI90l/YPACpQDxnOC09rT2bvBEDFj2BtFO9gv+QvNlID7290Q2+6K0EvXwhYD0BYqK8aIIrvMhtsj2IF1S9gKkMvXdPmDzVTnU8QuMjPHcxD72zsza97oYZvdk/uztfV6U85H7QPUQxZr3Pyxm8coqavdZrpjwKzzE9EF8UvVtKK73Uhdo610Z6PLdpQz3xoqC6rKoiPVK6h7t56zW9Ga6QuzF6A722jqU8dcJ7PBg9pDukHwE96hGevNQZZryAMI07gJr4vMbQAzwoL788Cl6EPECohz1MU3q9zN1aPEFuWTxxBdi8vZNCvQIbJL0/IY27Edl2OxKUCzpApjU9GDsCvZ5RdzykuV29BLNmPChKl7z/0ME8x1BdvOvvD72ntT281HYuvGT657ywJWE8F+XSvBHf9LzQcXk9NTilvTBw4zx832s8DujVPaKAPbpmGwq5XYZNvYB4MD2+S+c7hNXHvPrYBL2aRQS9JFSCunKhzDq/M728AQ2DuwaG5TxoByY7QVNtO5Gbh71X2PQ8l+CNvFKrAj2w1Cy9rQQPvBmo47w/thK938t8vM6phD0B8iG7e5SCvAhwgz1P6PQ7EIwxvGBwjTw8ezu9ELzmPUiFJj3OXJy8G8Q0vbTmrTxoorO7hxpwPRfg1Dy2D+m8u6ddPQemrbw7qz29Mw2BPVbsGb04W5O6wmq/vB6Yz7tqdXC9MrYrPUIQEj3YPXE9YT6EPHttqjyqV68871oLvd43nL0/X527L7uxO38aVj3QfQU9NQs2vFv1C71rqci86isVPRG9BL0/yrs8hxYqPQef7LxT+o87EAVTPXT8arw2/t46IQfFvH69l7wnwiE9w/uXOwMXxrxDRLe8fgvVvKQWRbz2dru9Sy6gPVk91rweWxe8/3crvfe5RD1vp9q7XsoJu610fTxrvR48KJ4svVKCpbuxhJI9bKNzvfOYML2vF6i9FhzHvCRlMrwTWow8/e6iPId2ib3FGfW7BAAXvTT+Bb27OFw84ObIPXPYz7vTw4A8wDZfPMBNaTzwpCI9objVPHiIXL2r74i6EsSbvb+B5b2FPUw9Pey0vNzi3bwgvwe9rx5bPDDeuLxGXwi9H58mPdVfqLtN8Wc95h2DPcnYa72ru0M4g1nUPJYtubwnyKW90iztvGQT7rvaoLi8uGKkOwchWD1Az/87RYE4PVslXzz2RaI8WVMoPTn2RL1vxrU8HvkqvYyRPLyB6Pu8xHWXPcadiTw/c1W8uvTcvL9mVrw+t0q9YorRvE815Dy1xMU864izvLAa77oYHQ073W3wugML6jvW3R69U2gaPDVhsrvrnBI88BsSPAub4zswj3U7mcRUPTX/WDvnZUE4BqdyPZD9GL3DoLk7zpnfPBmi77sUvqA8J48tPW8tDjy90ci5lU05OiiWjDyKMhs9PdpQvQ3dXLzzGy+9qUrJPLOq+bvF2A88PYH1PAqOwbzo08e8sSfKvLaPIToP4II9+8qoO1OukDwi3fW7H32BPTArjDwHVrC9Xpxdujlol7ySPgq9ZJ0cvcz/uDn8A2m8Fuw2Pa00Gb1vsc+7UeXvPCZiibxGvAO8Ev5GPWGDvDzMVLU8RL22PBNPj7yrWhI9waAFPPqrCTyILr88LrVSPEczBrx3Vx68XtHwvC12h7vKrI+8EVMnPR73mDzoPTG87Qtgva/NF71mk0E8WUEuPE1XJbspujY9C+K3vC/R77vOHy09cUcxvYxzoTuYaSW9//gcvTy+B7uWYpg83+I7vTQAQjmoJQW8Zv4vvCwq0bv7dSW8UZqVPMiN3LzI0Jw9vR+2vFlKHL1SFoi7yR8VO5ThFrxNN4o8iaWMO2DEpLw8pGW6o3Ukur3yR7u4cgc9jYYwPL99HTwahAU9gJpkvcT+Nz1bWBY96mYuve4UIjzpfc88RNSUvPh8m7wBKTE6sWkNu8PpujtoSgm8Hk6qvAZZJT2fcCY9SBhcvBG1mz3jZLc8LHtUPdBXRD3nxcA8grCnvG68fD1u4Ku7gxJnOi/M/7yHWqI8Gj7NPB+9K7vcroC7UzGVvAsyxjzpYKw8oV68Pcfwab253UA8ico+PIeDLL0DsPu7CYzavBk/F73tCgG+ZnmEugu3+zu42/28jmx4vZRkl72Hn1U7tZH8OxhskDzSYRG9m0EgPcuUdTyYGig9OmRVvPUvZT3gLre8lZR1Pe0hgry3GIm96yBUPD/7BzwGPRs9jl+yPdBmkjzgDfC7JSVhPKadcD0GFpY6QHDOvCSpsrwd1Bw9Ni2DvKbnkjzZ5OY88j+iPJbgtTtgfiC8rkh9PNgzSrvgXz08rI99vXRaOL1qg3u8s8EfPfG8SrxLFq27EKrjvFVpvjy7kEi8Tcy3PBgOLjz8Sts8qUwTvSHln7zlw6O9d6jZvNMfAL2GmWK8PM4KvIhrXz3vFkW9lzqkvLbri73vrL68fxYgvb2Nkzr1caa8kjDKO69HXDzIdFc9YMXKPB5mHT0gcrW86su4vA3cO7s+1Gs9oyxNveNClL18JUu8OEK5PIHhQ71Weqa88t6zOz4TX72Qmhq9QflmvfB8AruGSjc8gidFPVNkCj1XSB09/wI7PKsQNL2VE0Q8HyqPPXjdO7031nk92gxjvbRkEz2wngE9g8XgvOuqML20CTc9UAWfPDXHvTwBk329rv/+vMVc0TulKXk8Qh8yPGtx5rwImkE98eRPPS+laDuHSYi9VC2DO1pDST2QkLk8pGSfPUMfXL1Bz7O8Qm/YO80SkTvEp5C8sMxOPfw1VjzovCu9LO/JPFOcFbss0gG9QgoPPd0LMr3NnCA8lQVzuiV/tDwRMEu9FHL7PFME1TwySao8
  52-5: 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
  52-6: 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
  52-7: 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
  52-8: zPrIPCWFfbsUDiy9kWopveex4rvtyK+7H4ZOvLDsUD0Urg+5AiLaOxlIxTxSw8A9ORYCvTpTErxqPUo880pcPZw3eLsJHxk9EHsFPS3IlTyWfZo8HlWPvLvQ/ruMYMs9JkJEPf10Yry+v468H1kiu6FYpTxbOGS8bmBkvVygnLxm5628QvB2PYfDtrxt+ua8AfDpvDVVqDxJSuC9F0syPPoKtzvCvYe8HEo+PLKUGjzljZa8BuE6vL5RBTx2/ig8/3TEvRCbAjxv+Qk9WGSLvaIYjztIbbc9v2DevIUbWbv7y4q8wsBmPWcAljpHenI9qtGdvfhItjzQt2S8u7GyOxcnOr3lTCC9fvbjvOSH9DtkPbG87EE0PSh7Uz3hS5o9nsaku7sGCz3NKvU7gT44O+0fHz0PWAk7miY6uw4EYrukyZA8WOEePfRoxbvMh3I8aiwtvMCOXLzl8+M8y5AgPTISuDsZUJS8lf1xvei1n7yTGGm9v/SUO5Nifb2S6IG8pO0fvKCwJr1e2xy91ZkPvfyZSb16jZ88l76cvY4aZjwpvgU9BPAsvffxFbyqC4y8OhKZvU1TgjzJrTw9qpndvKO6kb0wqc491tlVPb1fartwtUS8g7THO7pHSDwLdI282gotPC+KOj0S25Q8TpL9PPJpGT0GjIQ9NnJXOnPWCDzouGQ9BpylPaPLRD2ml7i7VwcfvZJY2byvB8S8GTpVPQz0qjsWNDc9zh2VPBqDCDwUxlc94X09PQapjzzQQhe9nGTovbhpJj0MqYi8Qmz/u1JSlzyLAzc9f2VFvD9t5bq0pZI8QNpNPXlhEz0wfee9m6G9vK8kjLwJXKm7IVLlPLSMNzlChDo9ml2BPBT5t73l+hw83NKEPWjxmjwAkXu9x94oPYF8drvKwCK9UPEfvV0iMb0RCzk95MKpu2Ibu7zDpQy9V/0QveVEujvgA5m7VCCZvHmn57wozpw8uOvPvIi3kTvZRu06ppsPPSWD17ySEq08cYvNvFkxCT3kODM9rX8jvQKV0DnW/Aa85hkqvLK96DvKRzs8882MuyZYcbwhCGq96qhUPPJLZTzl9iI8d/F/PPBJnL21FlM8tS06vKytory6Oy29lm8kvH3BJTvTIOo8/WNUPdKAez0hv5G8gd18vaWUr7vB17a7Yd66vDTxCz08x5U9AO13PHe8Ez0b8Xe8vYf3vK88V7uzgSi9NjIBvcUbQjocxeQ7cPK9vGYXNrxSzwO8W2QpvIJjzDz+g2Q8m3FGvUWRzzymdh29GO/pPPaXiL3Jiya9yrCMvQwOyDwRdNi6qoMGPNmHHDsjrPy8GM0xvJuAkLyo9Qo925N8PdzrTDyU+ug8QI0mvXY9vL3d53a9U/0WPZNCq7x5KI68ihlTvTdGbjzdQ9I9GtT6u0iIUb2Rr0G8EScMPapTMbzdoxW98hLFPGuESL1xObQ7dj+7u/ampbyD+AW8hXFdPIpQ4LqOujU9KeqNvEWdoLw019q7KukpPF9eIDvUuW88V8MPvMRGajwP2w+9Evuiu0jon7xLv/Y8coFavSM92jqV+b+7FwqgvI/eCruC8wG8gZbHvPPgUD2xdVe9rnLYOyomQr2se7s98868PIBdRTvwjeW6b98uOjZyy7xw0ck8SkWWPDCoojvif3k8buH/NPBxhTs4WoQ8yRp2PXtgJryLj+E8rYtgvCb5hD3ZU5o8z5goO2w0s7xfKIU9uaONPKFvPDz4rsW8TDOkPLiNKjw+Bke6FleBvQbTnrxV2qI7XYgKPHavrTzbWLa6k7WrPDtxOT3XJl89fDieuoV9jD2zMFG9zE0NO39VZDyxmlg8O2CrPbUtoDzFZik99OssPfl+Qj1w/Xa8E0RgvTk1mz2rKhY9uKQQPICXEb3NAR+9GRWMvRTsJT1lCsE7cQ04PDNDrbxd9gk9BGewPC1KwLuridK8KEznu3POi7wsB1o8/EXevCf0g7zMOjS7qhq2vGMnUb3jsKY8veS/PNd4vDtwvgI8UXutPflivDw1UHC8YJIPvBAHmjuttIw8s5XWPOhE9LxzM+q8LMvHvBbSEL3k8JC8NRiNvFKfCT1ifPY8FEucOxUxmb1oJys8h8tavFIoizwF+AM9XsOzPN22l7uyD/u8NKttvHWJRD14BBM8mVSmPHkuBz0mv2o9QGu2PO8LAb3xHVI8LFIZvThthjuEEYG93F+7O9OHfLxc0CA9eW12PW0ikbxYNXC88fIpPKoG4jw46I89fCg9PPZIqjw4fwW96mOJPC+7mbncy4A8vi9mPUXCorwXRle9yLhpvTUkIL43cpQ9vQKzvLTC6bzsvW69jIxsvJq5trppUlk8zHTXPJ5RyrtxqIY79Dq/vLeLkL3mVhu8bzZOPU59ILyV8ka9ZTstvd4gSDy4U9+6MscpvRnMvTzc1zC9IOVVPGZ/wDxbciK8LIORvPvsfDwDIPi87A2nvc7NQr1bHYS8IRtsPcTd1Dwx5gi84YenO8Cmsrlu6ic56Lg5PCXeuDwA5YO836cqPS27jTwUU209mvcbu8YFk72qogK9cBnHPKHQKb0Fi3W9XxcRvbHd17zSWF+8JYEnvYh3Rz0JKgE9bkSfvGOtCL2o4Wc9kZP/vL35qjzzls88deL2O9oDjzwerLw8Kv1GPLHDdr2FyRQ9iRE3vBUuLb0C+Rw8I4KvvK7Thbx/JhC9pua+OsgYOD0IuAG91bTzvBb6Qz0OZh49zvnFPOdslLx3EzY8AZORPM1oJT19/1S84UDGuxeCjjy3kXY7FCIBPfcU0zxYWla9T3FDPXIvg73qv1i70/gyPTY1YDoTctc8TD70OlavFrv/4XA8DBKwPFCZ1bwg6Ou8vXpcPLgSNjtos+O7HJELPZRPPjzuB7G89b4GPc8yD73/MhU9bQqVPa8yMz38E9I8TYRWvNzIuLyDlp08zlEdPZO/UL35XxC65xhCvXl27rx0Rxa9lp1/PJ/opjywIMq8AZRUPWzcTzzm7ZU9FAEpvVR3BDvTAA28/JsIPftE2DvmWeI8sJUKPcaO47xlFV09REdxvKMBLT3qC/o8vyMOvPT3ZrwFs8O7H61/vF2MqbzckD+89h4AvJJGn712akW8ytrCusAXW7yUBOA76Zd9PblD8jvLjRk9Jb1iPJmvpzxbIvU81BqQPI68Nr2rEsM8nJ8gvGnUd701ouG8FT2dO61DRz3/KBG8JDTKPOLJ5zzBtAq8DFsJvfnK0Dviu+K8iufEvACuuzxtdG87X8PYPFVPML1qZsY9qbnwvNehLL38Iu28N9Ruu6lPir0SiN082XfbOBit57t9m4s8fGyevOQa4Tw6/fG7jzW8vcX1/LzRa8i98reIPesuQ73Knt08mbnfvV5yt734wjI8qfAbPaJ8Fbz0zHo6eh98uwmDXz3BzL86tNnPuwgsGDyEna28RXPKO9TdsDxlIFW9+Q9jPI0ACDxAa+K8HcwePb4HcjwC0L0890koPdnJH7wbu5E9jgWxumJsPD2ou8M7MXNZvYMV6zxnx/G83owMPVLHv7yfFAO8xcxEvEWP3bvd8Sc9LqI0vauz4TxESCo9ehZiPCGSR726GWi9zuyUPN0VhLwKSKW8N5CNPTSCO7z7co684Ka5PEaBn72v+JU8YvF5PWH7ODzBbAm9Aw7qO38UoDmXk2K8vGM3O+4aKL3MLZW834LCPPzlDr211Im9p+qDu6X11TuZAm67Wi4OPVeM/zzclY29t4B0OsdttrtuLgs9G5uvu1Nkkb3sczm7lHBcPYTe27w+VCi9Bd4nPbHD6Lv7Pmi9FuWxvH9emj16g1W9lHutPZHAgr3rUIA8BX/OvM6efD141zY8/jD9PNMGJTyYbKI65H21N9EBS7sgZpa9OL6TvKe+Ez1o2xk9Tz8bvbk9uDzXQhi8wRAJOGVYRj3UnO87FQe+PAD6MzwxdLe8uFoJvewxdzztsCI9oEzkvZqyCz2U41M9aTVNPfKty7wNuQU9ABfZPBiJcbzaQyy9Hl7dPBfftjz69eS8tDGvvCt/Cr0rrkw8cnGcvdR/sby3ljs89a5YPHH6/Txo/Y88uMC7PA34JjxyOYa7
  52-9: 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
  52-10: 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
  52-11: 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
  53-0: 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
  53-1: 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
  54-0: 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
  54-1: YIr8PKwn37sNepi899oVvVaQIb03rWq9ot/FutP1Zz0X9hY8MdNlu7v0LbyRFCU9XTJ6vCEEaTyKk4G7/Qy2PB1VJ72u6NA8NfwQPS0qnD3x0LS7xJY6vfDjSTy3pNc9xEa8O8Om8bzEwoG8cLJdPO0ser38OzC9a6IWvWnbfL1t5So8yE0LPaS1Bbx3Lyq9T0OAvIkZHrxduR+9H/y6PDAgHrzcglu8RIaeO+4hbry7JmY8FQqaOnrDAD05bKs81De6vb6d0zpzISo9sriYvcTZSjsXzME8ICMIu0k4hzzucx08tbFVPasQfTxGGLE8u3ekvQh5ID2lLZ08plwMvIahy7xH7e68YgeAPD8owLy6cLq815HNPOdSuDxcZ9c8gGCMvC4/+zw7uI08lS1ZuwWsorzN2x89hry6OwXOQzlOthw80Ja3PSSw4rxkPZM8zyZIPRwTqbxscrm6ABpBPUmWI707dws8QI84vTTbSr2oEUO9kKqYPfEqgL0kC/y8dI6WPOh1t7zDM7G87OwbvIiX+Lz8pmA7YGKEvea1vjziszq9b4QhvbR7AjwrQaW6d2v7vMSpM7xn1vW7b5juvBk0NbyXzTA955IQPUrkhbyaEJu8Br1wO+NM1zqQeii9foxBPKnChjwVVtS7TodlPWQwIbz28Sg9MfCKPMdLEr1hPDM9YjBIPQ2B1Ts4hmI8dNSRvV3NQL11cIw8cVkEPf5STbznFLW8miejvBkYeDwC6lg9GfQ+PIYuKz0Pu2q9SToRvjHSkTyXTYE9RwSyO2CKo7y1+dM7bLG3vc6bhjwSDGE7oY1APZEzST21UGu9zTXrvDs0nLy+Ods8OOsFPeG2Jjt/kyM88vwCvRMRAr3hXw88RhD+PD94tj3DH5S9XiPCukixC7w9ss27aLc+vdPTF73gmy09dm9JOnbcOD1q5AO9TcS6PLI8+btnYnC8kmBTPHPg0TwCoVa8GELFPCAcZD2g9b26qtYWPS6ohjxSHQk9vcr0vNOJFz0RGQc9qDYNvDvqybwKTDa89atDPLdv0LyHMj88jEuMvdU3lLsBuR69nV2+O6jzfLygpe47NOKKvFa04LzL+3A9d231PKpWg7uComW9HGRyPIqLG7249QU92BHCPKDSsT0l67u9xZeNvfixB7nasE88BoqZvGj5Iz3VELM9mtuUO7I69zxsDBC9AhepvO9ARb3JKyC9alzIuaU+ED00+VK82qiwvYK1GL2tDg68/SwmOgbDvT246xQ90AptvQh8oTpLds28txMAPCDFn72iqDi9ggGWva2/+DzIceo8dZ6VPVBfRztrrSq9tcqQvGqgBrwGV447IPntPGwWPTyBYsC8ZXBovSb7EL1fQRm92UfGPIuDiL2JTUG7rjg/vKwPUjzRKeo9TlsNPcm10zuVd/88AKhpPHDojjsP+Gq9q42Hu6QOcLyScgW9VG4uPHh6W706UA48NOPKPKyrzLwgbw09/L7CO+/Kt7w22z28M+cdvbGyZbvS1Tw9hQoBPKfyFbo8O4u9FZ/1u4d+wry+XbU8WRc1vG6+CLnprAw98N92O13sDD3BMNY7ghuCPPgmLjymsJi9xgbRPC6YabzMfMc9HrRSOD6+Ar1eoAC9k+MRvXOCCbzz4yw9GhltPAWGEjzpclg9XPqGvLk0YjsN05S7qqmmPZ4P1Twoee084suIO+CYtD0WGFY8lFpLvVl8SL0JHaY7JCScPKNPibpXuhI9Ss3SvKysaD16B8I5Ba43vSyS9ryewXw6UQEQvPGoljwCsZu8/CO7vP0V8bv81sO8YR1KvWcoRT0rAjG8so8YvEhw3DwUtiI95p/iPFZSn7uFJXo8h68uPTlL6z1GePK76pw9vZR1Xz1eAZg8Llv4PN/klr2IHKa8A0sCPPDxxDziupe8ekBrPZDkSzyGFGw8oo+LvMHNWDxtCHO9UWm6u0wGkrzff9Q8RKs+vD8niTzDbTY8WG1kvBAFZ72T4Rm889zEPJqbkTsWm5c8pE6VPL2parylKxm81cISPUAcfDr5g8c8Jm7hvJtolby0p6i8uyf9PNRS07z6n+W7HCB0uydTND3rkfo8EfdJuwGRYr2Frto7MqW4vBTNs7xmSx28AZqJPIKGMLwITRi9/z5ivUXjDj1yIkm8k9rSPH2knDzkbNc8NIc3vO9Nszzcuos9Kb+ou+iiED3AGqu9Vbu1O1dEsLx9ho08DixIPWDwlLzXmse8v1hSvfDgTT2yqzU9O+2BPG6xbTu0Ana8cFAlvKIYorxI1N882YW6PO19KLztmnK9HabgvE6KG77ZvQw8HqxJPGW8N7xzFuG8pmT8PP31JT1cBHS8DFsvPRAhEz0CUwc9ht/9O4nwXr0GzMg7uIBIPbDGVL1f8kS9b5gzu4qPQj1RTz67kacDvRQGGz2rY5u8ubyEPUGAizzVhzM8ibCuO9K7Sbwxq0k8945xuQoxJL3EXt+8kxKFPRG91DxIo0C8dQyCPCXHhTxtp7y7sVQ8PH0DPD0ssy47/LfhPA90qrqdTCo9ZHf4un1/mr2IvzC9ZA6kvJPx97wOaBK8jbM+vdxGKb3GrJg8dMANPEaqODvobky8aSQdPaRTbr3M05o9e/F/vR/4Jjx+S+Q8kaRlPV6n2Tx0po48D2kAvHeIjb3ui+i6eyxEO2ublb3MYo69424bvcEJhb3WALw7l8DDO+Vw9zu1zxK9pcqZverLGzxh0Dw99bNGu3PfNb3+paU8f8YHvHpnyDzQECS9u8QWO19hCLwp1tM6Q861PEohXryz49i8PgL9PFbFP71XitS78X83PQRXCLwrjqk8I++SOyQz7ruJ55g8eJdyPAYC3rsTkN88DzFxPUc1RL3N1EE9MgDXPMjl7DtkY4C8PRgTvZIwqbzuVAI97EuHPf/crDyQZHa8Wx+sPIObVb2tgdy6Q2N+O8SraT3I5D29kyqMvQ8yZbzRCES8P3sUPO0ZbTpsT9S807BqPdDTS7zdYlA9UzDYvJC6jz3Pdnq8x216PYdLNzx8i6k9wE1KO9jOB73tsNQ8jDjIO4WIoDzyLM48GvEyvH30Oj1vPWy86MQZvcich7zR8CQ9KjoIvaUNeL3Gwgk90XIovKjuBjyFr248RdyFPNg6Zrx05xo9hC/zPIr+6jzuyPQ85hBUPKZMFr15uLM84oWRPBxw8ryMexO9szgfO4CCFbuIwRK8OFf0PHmu0z2c9NO7RdFbPK0Abzz/uic91JO1Okt+7zs2brS8cqfNO6tlxzvNAuY8Vq31u6aG2rzOxwq9rWUKPXuz37sGPgs9wyJUPEgPK71inOs893o6vB0LiLzO+s+7tM4fPBMqbbxOBMe9xVOgPRtSWLuGje07peiavVQJxr2Q1iA9SkqNvM1a1ryIoy283ilKPUNU8Tvf/wc8nrKku+/YLzyCNxu9IVTGOQEB3jw3jhW9XczNvFSTiroCyui7J3iWPQOaC7wl8we7f3pYPDZoDTyL9f48yCqiORm9Nru7niM98ZFYvBBA2zvfVHQ9zxnWvFMRBjwdnS266nGVPPEarTzY4nY9iJrJvNtbUr1L0tK6U5kXvBTBB719WFW9X2UOvLOT4jxz8Qu8QLiWPeme67yxS5U8/F4gPY64Sb3jmau8oeTXPAsElrzvJPC8fhQgvFOObz3tN5C9B5kBPcluq7m6aX08+GUwu6AXO71T2Iq8AONuu8NMELwxRmO8ev/+PLPzQD26Njq9sgR9vAOQfrt+XkY9OCnCvJ/Klb1KXLS8klDQPYnBfrquTBC9vqCYPYqVpLwWCIW9Zm9evFXRzjvqTh29Gl6MPdcNhrwqzMg8tiXGvH89FT3Enxo9lV2JPTb9CT1k7BI9XvpDvayaPjivqJG9ZSZRvavxkTxkwcU78qaCvSyifjsB+0C9xHiCuar6bDwANIk7UiaaPAsESz1wa6S8mMKbu7rTuDyR64g9rwwevaYQQD3On2s93EybPeFTK7xaRLs8hXYTPeO9PbxXKLG872wBPezFsDy2ose8FNz2vAhkyTsUpsq8KhwfvXDi0rxfQxA9FzDcumVPB7tgAFM7vKyXOsfcjju3KZ+8
  54-2: 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
  54-3: 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
  54-4: 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
  54-5: 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
  55-0: 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
  55-1: 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
  55-2: 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
  56-0: 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
  56-1: 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
  57-0: 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
  57-1: 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
  57-2: K/YIPE62xLwQNIa9rxAovbqXhDzox4I7rfjNuz2B8zydcKC9FupPvdTMojzWbuK8/BavvPx9BT0+w/m89EgHvUWcBTvi4+08Jd+EPOOaIr3dof+7+MbfPKoqkDyj2so8QPuJvBOF8Dxr9bo8o2QPPEBqHb23JZK7cdSOvCZMob2HpKQ9wDgXPVhoDTwN7ze4PhatObza8z07Yly9dfPzvPT4pbxk57G81lApu93yzruYOL871yxMvHn5Bz3k0hs7vPWtvWYfJz0EZYI9YPvrPHcvpjyJ93Q9hhQhvbrtCDx5ODo9AcezPRuFxrdxl4s84VggvI7q8zzcnCa7JMJsvcp9Yz2F7ak7XkpjvWpcZTwvpIM8OrYHPbirBr2aiVs8STSkPMTqgD1sPEi8B/y4vfvhjb1JSEo9pe9UOwSkOr3+r9A8Hq5qPMLvkbyhlXw8JDcbvRWKmTybV1Y9moJyu98YgbtxWt+8WGTzu3vVoDyx3Xu7jKMYvC7kLz0jD/y8R5bRPBBIKD3pEqq8Q4YIvXu/nrywkPS8PnouulYkL7t8xtM8Fo57POlE/zv7cCO9JrEOPZE6QrxdVlw7uDZcvcpeQL2tZuA6tnrSvD8tn7z1Nfq8MlQSvaxy2byZTkG8yfA1PUhojztlK6C9Ju5ovSE3pz1Q+bI9o4DiO8jKej209GU8SV+VPJ+FKb2rEEA902mRvRpoiDzPlxQ9rggDvXdvTz2p6Ae8jKOavFJfkT1vnlO9bpPaOzSUMD0aQ0C8nysyPQ4qg7xd6oC86zj+vLJTlr3FKxM8OiK2PByX/jue6EO9bg++PJHwXbzKKRs9m2YXvTsWPbx6Rgs9pg54vZAwOjv/Qic9isYPvYv43LxNzq282eEavAHUlDiM77g8JepTvHgajz1k/5u762IBvE0PTT0O+UA9uU44vTHXvj3uB6u8hOmUPFJTn7yY6c+8gqe5PJXXn7xcEnK83eGFvNhzij3HQoE8cNoQvK9O7rtxtE09Bj5PvGB0L7z16Og7zz0dPSrGFL2tCFW8//DfvODImr1zrJS8SlQ7vYG+jLvHbCm9m3jZujwacrwCkgS91O+GvOI1tTw7scs7RXkcPcNo8boByge8IvxRuwfk1rzzRMc8XM93PQL1Fz2R4rq9lSQxvU3PHj3MEh08STO2PKUTsD3OBSw9x9nLPAgUGzwtW+O8ENiyPIDRQrwMarO8XcVeu0tUM70fWLI7c9a4PAyJVrt2jD88ppT0POrU/Lt+5uC7UIX4PKI1ubukjEu8J0ZxPR4jFT2B2ek71VGfOqWJ8zugOJO7wg/6OyGmKD0b2+68B4UJve7mBb293jO9aiuCvPSZ/7ugAwE9awPdvLz3Db3kQo69toRgvOtLCb0stOs8QEG9vGRUVLu5XYM9cmoOPbCo3DtO8Q09xympvFLitLyVkVO8xD1dPYraqTvcOCW9G+S+vNSVlbzoPUI8pUKMPbZ9pDxk5zU95T82Pe+bdz0G3g29kCU5PfNUAD1w7jK9Y6UsvCCwwLzlg6Q9BrGRuwwpF7tS+hw9Z1F0PVrFbj30Nm48haUgPJiflLxUFe67FXFAPLoZkrwPSwC9r9TqPEgkdTzo5ie8iqQUOpSsjTss8SA50uUEPVV1Ar3fACC7bD+WPP+aNz2IVD07juWaPMYUGTy9fBA9rm/9vJDr2zy1XRe9jD+TO0MVJT0D9B+9PRclvcUGzDwM2x07ZyGBveNzc71qcmc9ugEtOw7lory2S/Y7RJyJvZRRrbyFmw09PzoavOpfMb1OX6Q5SlAhvBbLrLyGxp+8PiY3vH/lajxO2p67+Q8CvZ9ATD13lsy8InmtvFMGCLwyZdo8wQEHPouLOj39sTk9IseuPBMtXjxjEV49cRIGPl3Klr0xlqC7eulKPQ5/vbyU8/S8UCH3PJRonzzItty8rT1lPIEoWDz+sa+8P4Q/u9w+br0Zj188ACjpvLo3QrufRQG9YVP2vDrbdz0O0Aw9eFsqPIZJxLwKn+W7ekFXvWY1KT2sXje9ub1EPVZ7xzzAvwA8ZiqkvA+zajzRFwm9uj8evHlltryyMhM7Lxu1PSFf5zuwI1K9XCpYPaAXEL1QfF88H/zhvMZqSTyqUs482jN9vDOHTz2Jrq27t+0avcXoGD3F9A29WhqGPPOy2Tz46j69WUPCvOm1Y7wXwCk9YEDcvOzvLr3Uth49027uPBUbkzwjcIg9k9LLvMd+4zynZ/S6m+sjPR3fLj3/exI9DgzzPKWjPTzWvzE9HUK+vHV8vju9Q6O7BZyHO8UmY71OkA29ufedvIxKHL0Dz9i868BavAwZ4Dv6f269Q72UPI6srT3QGye8YpUkPNT6Cj1VV/S70juvvLAmqrxW7DG9jfCjPYOyjT0ZLya9nn2BPScLgTww91U9s549vWGj0zzL2MO9W6gnvXO1Nb0EYUK6J5dIvWb8OTykkBM9zP2GvXLe8bxK4Pg833sXPS+5jjx+KG28c+QQPK8u2zwypnU8umNIvdiorzzoIIM6kWP3PKOwprpkeSI7bLitPZ4vgr1OHRq9PCUCvXti1rxZIFe9VhR2PZs067z58mO6YwR7vKLJhLyPO4U80bYoPfS3ib2DVFk8rncFPei3yb3v6XY9E5+2PGHQTzyuvmg9LJigu9+9o7zxOF66XOySvMPtfb1LRW68fPFru9VlQb2HuiY9J6SrvGXzor31yUM7GBN8vaAfvjwZcDw7fXKHPTVi/DwDTLQ8fgq2vKkYebzNS9W8/ZGgvO7AyjyFFZc9GI1/Pc69eb3aMIQ8yzI0vXBgDTv66M46x4tMPQSQmTw1Rxk9zHFovPUtST2nlsy7RrwUPZ+brDkAZoo8H7w7u1Q+gbzosQC9ux9aPMCSBL3kalI9tBVsveCPsryKjpI9IRWwPMwIh7vvSoc9aDeBvFgr4L08nDW7Z/SGO6FjK7w8vTi8GX6RvD2GqTxjuzO9wHXsOq6R9DvRbva7NlC6vOgC+Tyvaww9kyUpve+eTz2UTHk8TpkBPCAXFD2Lw7O8aPEyvFAbrr1rd5k88YuXvP/II7t3Jgg9Qa3jPAGA9TuRlwu8rXYZvVvxbjxb3y88MmuEvQ0TD72T+wS960qXu3v89Dxvwq48qr9wPZbNCL2XOxk8CjUaPdDCIT3KGlK9Ubx9PG8RnrrK9vY7VejxvGS2djsiafS7ir/zPJ3lb7ydp6U6AIUtupWRzbxQQv47QJo5vXb+bD0oVba8cJePvMcwZrzUkVW9jSVJvdFa1DzUfiM8jOYSvZUyArurETC7f6U8PW1HvztqwVa9QTgUPfJfBT2s7zC832tavZZLfb0u4k+87hCqvEFZG72aZS+9PWzevLXFB7ypJGo9mIqBvFE/AT37pjy9YwAQvPpgcjwLMy49EIChvBdv1DzOBwy9OLM7PDS0QbykoG29N/a9vNjSUzzlPVK8G0JEPFmeor1sbYK7HWeLPUX9sjtceIS8KcEKPSXTjT2hVxQ8hFVFPf6QqjtW/+K78i89PHZFs7yvOkw8bIMIPb/m1LxBbyG8UosavN9LSb3u56O8VAK/O04Mbb24GKk8Kow3veMUJr3ywpq4TOYYvY51KL21MoM7sxyJOhLCpDvp+Uu9Ch4iPEikpDwqfRm8CIWBOaHyPD1pmno82X6HPLyi9jzdZKm9jdVju3bqyry/KGM9d8ffPM4zFzz/Eeu8YB+/vPOoyLtp2yS9/yIUPG8egzxn3RC9JSwOvbaprryuJUK96FUoPYVpi7xkBeW8BdhtPDZvCDyxzDE9RU6GPUb6CbxFUfu8U5BxO4csgb2gVka9biXGPL7eAj1I/wY8WX0fvMoTmT27cCk9QYSzvC470DtDQSm9El2yvBs6GTtyBaE7m6c1vSXfgD0OkX+9FiJNvfFDXzwr/RU8ZNA/OV9lFTwEMua8QNoSvHsZEDxrQBA8vL2xPTtGC7zvSCE9BR8svfISzTtXXZQ8xn5rPE0j7bslBQ+9omxAPZEcGD0Kn+i7Ais1PVa3jD3Zo3e8kd/iOnwtKT2YDp+9IDNnvURDCb0XkUu8vx1ivVLEg7w/xzW8CcJTPJoIZ7zAeiK8
  58-0: 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
  58-1: 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
  58-2: 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
  58-3: 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
  58-4: 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
  58-5: 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
  58-6: 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
  58-7: 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
  58-8: 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
  58-9: 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
  58-10: ghFGPd48n72HXGG9q28SvMX5+buGji89DrcbPCLh1Dx7cc+8wu1TvOtRzDwuDp69S/fLvLhsvTzglmO9O2k0vO3CHbtGT3q855cGPb55Tr3VGQY6NBmJPLSOjTyp0D88CZsevYClKT1A/k28Qb8oO7yOlToL0nQ852MwvcQ9Ab5Z6NU8bnPPPAS6pbwL52y8DLG0PLs70D1SQRq9Tx4ivep1Vr2OIbq7rJkNPTy7tbwzB009dPzlPJeXgjwPcgE81OAqvaeaUrpz7Is9TmjOvFdSyDvxxnE9lNw1vQVIKD2g//g8le25PSXzk7w7Hbi7A1wTveBCOblbf7Q819aPvGeTwLvP+sq8+MyVPG63i7z4x6Y8zGv6vAdlTr1fu208kEgDPL7KFTyuGEs8Zd0yvceXWL1KV4g9i3jKPPO1PjwWL0s9/8AIPSGF1jxoka48wSEOPYWc9Lxg7fY8dTdRPP3PHj2WSVq9L5CBvFIl+bxV6Uq9TOfvPOGXvrw/4NO83IPtPETl3zxVHfU8M8M6vL2wkryDMsg8nkwCPIPIp7wskT28m1ddPCrjv7wYktQ8P/MnPAv07LtU4gU8TlVXvSCYa7yvdBq8itfUPEW2DzwT2FC9rckUvZYnYzz/qgO9UUfVO0dQ/Lv8Hoq974xXvVsbAjsM6PY8EzEwPcpNqz2xAnm7gsdNva81Ob3d2m872+ZMvYuTDD3PSH49tfWnvJhvLDyiFSu8Cau5vBE8SD14xme9k1ZNPO2A7juJ3EO87RNdvWaoxrzrff48M2dlvQ4Bbr06QUs8rJMMu5vrpTwn7JK94LyAPdMADz1FGEs9KJEbvTlDOzyMv8I8vYYRu1OWojzbF0Q8VDgtPL6RmbwKUdY81XqrPKlKBDt5jPy86oYGveVRrz0s4TM8FoQ7Pct9Zj11Ikw9ZvNrPR4nCz4BshW90FeHPJ3Arrytx/m7sy4XvDRBcjxLMzY9dY6JPCcLrjwe6hQ9bIHFPIA7AruaVjo97Ol0vbiJ5DwWxs48HyEoPc4w77wSNnM7BvcbOxwcBL3ZGXu8bNwOvQJpSL1hjr68bTwCvXZzbby02a67JTa2vBMlDTx2NVE9RpaDPb6MCbp1sni8pCGxvMJ+mbziGsQ84GwxPYRtRz1AQ6e9JqdivXy8wT3oCW+8fdPxPCfHxj1a1608oycKvW1hjDx2PmW97zu7PGBSwrutCl+8h1xDPUQ0Nr1Drne7SUZmPJXJUr1cpiI9QhzbPAjkbDx51gM7hN1jPF007Dw+Gg67vh21PM2Soj35O3o9kjwCPVdhJD2Ygwa9SVWcPE7spDyTFi+9mE6CPNe8Bb2C3o69DSQjvVMnAz38g2C8U3I8u/slQrtU5YW8Zv6JO8pf9rxyknI8xf1tvWwoa7xPJ5k9cvmLPVaJ/Lwl0lg7L4OTvEInT71fHDG72DtAPJpzKzzq/Ee9Zd7AuhCFD71xUm+8fGipu4SEh7wDlzo9Yv83vCwnHT0xw+281NfhuyXVbzyyp0w7AORyuTtvubxN8Bs9t0sVvNqLPr3JblI97uNQPZHsrTwBVsE8SMTiOycNRjwdy2G80OaXPeQxLbyNZ168VeMwu1rjD70HdhY8ffW4O2s1Cb0JxDM7HiH1PKvySL2gAXo6/fAVvEtSfTz8ESO8HUCxvH9VkjmONo48t0J2PN0iDj16wLU73KMqPV9W9Dw0ite81C6OvD0nQLwbd6o6yUyrvOnHYr0fCpc9juvCOziywTwMFQQ7OWwhvRdNdrz+jiA8Im+zO2MBe71GXji9R64XveP5rLzpMIi8zkzRvGQiET2+RNg8sgWUvJlunLvCB5I7m3pIvBh8+jwGLIs9TjCSPfs4gD3PNy09P1OdvG4lpbwEq+M8/vNMPYw+t73x0v87OUP7vNnpfDwjah29mu8evVY5Uj0l46A6uPKbvJRpqjyQGkY7WP5YO8mA7rxl/Ss9yE2AvKx/gTwumBQ96Oc9PFDC3Tx/dxC80/SRvTC7hb1YDSg8fUZvvcTErjwSmJs7yvYEPVnNX7x0XZ68zEPBvGPAbTtdFZ28GVJ5PFdJE709Tpu8/DEWPaJNgbsfyCi9eshxPQ0xnr3gQUq8V0X7vHn8BT2vags9OSFWvNnn+zzeW148/0n2vMNL6DzgEXI8ISI7PU0cAT1jT2g9djIFO+RSjjlaCn+8bwfZO14YmL1pkZ07A92OvKSRUbwBEd886wRhvWAW/rz7yKM7MF4VvRJ6vTx4pNS83ScGPYww7DwOU6Y5A4ikvGhB/Dybeoe7ZevfO/3aBr3OFAw9Gn4xPQDYHr1N9MG8VbZpvEIR6jwieWy9aHBnPZTrPj1q0xe9kGUpPeujJz2tpWO9jUlfvKyO2DuJW3O9Q0AePTQNdTy7jPm8RHKDPFVN8DzXpDW8v7EHvSHbRD0iV7a9kW+7O5ZcSbrWL6C8kTTlvOpCW7wjafU8CBt0vU1WmrzINIW6kJYkPSD7lT2L3TO92ceDvVxwwTyLWIM9RVAGvS09ljj7aWA75tqGPV4YgTtAZ1g9fGCEPMwShb3CqAC9QKnVvHICmr18z5W8fFy9u+dDoLy5VzM702K9PN5/4LxhkJO8SyzZPDo8rr24oeM8Qt+tvBqhVb2cQLo9Zd63vCeWyDwdxS88WYYwPC/twr0qTYA7TVDKvJRYc7wxruS8iIYSu1xFkb0SIks9ZFvqPBWCc729DJ86AWe6vDrocbv7D0U9+AmnPJ/hIzu8OKm8o+MNvCNU3Luh2Lk8XgUcvTjzqTug4WA9pEBePbGotb2lOzU9pITDu3smmLtE84o89CYwPVX5Cjx5cBI9HN2HPIhmkz0nHFa9cubYPGU7YTyB2TM9NAFVuuuztr3Asys7QGJxvP86kbzvaBC99p/GvDx+r7zjN049ee0hPQetyrwI4ow9MKITvarvpL15Wfo7IbxOvLLi7zys9uW9QDCSvFptVrtxo4O9mI0UPbBJ+byLBL686j2pPCqoDrpy6A89vWI5OyPnpD3czqo8X9pRPTO8nzsmzCy8pqDVu06MbDyqvxs9hVhJvQEPJ72MvxM6M9LKPLe5Wryo6Ig8cb+AvapQsrxu1oM8NRNcPCmdg7x27Sa8PVz/PK6PGDw7Q1895g4MPbO62LwQpti8px4pvEzc+bvK4Sy9qPbFPGxFOD3zYaw6DgcLPV3Vd7wIvpO8gH6uOXF4hrxTbH682aR2vA9fM70wpgO9cU/5u7bdrzyji/o8nz0XPWVVlrx0mwC86cvKvJY/9zuzysg7Wp0EvQCGRbx9BNA8l9GBPUPpdj1GEVe83I6PPeq1xTu7DIO90FyavOAQE73fRGm9NfZ9vGqRdL3hdBm81ES0OxDOGDz/wU09RahFu8htwjyDYR+99PtsvDzUPryb8z+8rj83PN+ZGT2uKC696NPxPBuK2ryOxbS8OZtAPazk3DxgpMa89WoNPQbxBb35BhY9vRxDPZcCzLx0lwA9Zr5WPLO/sj3gafW8i9aaPMP/Dj2UJfI89DrlvAtKVrtV6IQ6yAUAPRonGzsZiUi92YYcPbdxqrxWFp88VBKHPFaDcbzz5cG8W++PvXnwIb05RJA7GerovPCZvbydoqQ8JjPoPHKmXrvB3nU7jn/RPDjXhbwJ+BI83a/qvLx6Hj1mgWY9JrMsPXoUYD3XyOy8HpuHPFSK6ruxi/s8GnSnPCqGU7zirEy9XELtvKths739kFq95srtvOtshz3e1sS8vT4hvcXHcr19hok7Qu7fPOmbfbzfOYW9lMWwO/rVQz1pIOc8LHMOPXAKMj1ak3a8qVCuuuLC0bqTSQ+9ncwlvHxdnDy9efo86NAMvc3ESz3XaGM9+Wa9O2qWKD1FzKE7gOsSveAoEjzkgw88GwhUvVoQGT0mSw69KTt9vQZqfrxBZhm9208fvesCQjzZEIG9DbGUveshg7yP2zS9zqeTPP/DDDyoDME9V3UAPbeADrwk/so8w702PQA8FTxsWCu7Sp4zPRXEHj2lyCa9YdtePNJqGD1xjiO9Eb61PG2VLj1KG2+9BGr6vAHruby45rg84uQHvbXX2Ly2E4i861WIO0JBdLzS4qI8
  59-0: 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
  59-1: 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
  59-2: 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
  59-3: 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
  59-4: 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
  60-0: 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
  61-0: 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
  61-1: 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
  62-0: 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
  62-1: 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
  62-2: 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
  62-3: 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
  63-0: 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
  64-0: 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
  64-1: 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
  64-2: NAYgPLL1jb2mxbC9pTawO90nP7wtSr089qu6vJ2q0zo6/G29AmXovAoSqDkCphQ80/hWPHkiuDzyhhq9nRFSvJs3Pjuo9gE9YTyZPQcwHr1m0U08zDgDPcEoEj11y5I93MaJO1KWNT0GHyw9hM3RPG1KYr1hURe9p12LvViDrL3c+ZQ82DFTPFO8zjsyhHS9G0rCvNN9wj2J8iG+g/h3vKQYPDzBsoW7L6QNPZ02Pr18zpG8Io+yvFn+rzyKABw9BHDevASAyLwAJ4o9Gi9dvPE5WLymgyc9AdGwvVg4Uj2kbus6rj9hPYi1gDwqkdw8/50YvZ3xCD34lxi8efOsurs2RDwvY4i7ToCjvex4DzwYlqO8AzCPPEcq57wuVTi8K9PxPKkGqzyQM1e8lwuevXA5w7yGvBK7iE2GPUCYeL1uHgA7HVnePHazCLw8pJm8HizsO3CNeDz1XJs9WukxPX8ru7tia8K9sslRvW/AsDx1yA29MqjhPGfZkTy3PRo88CF2O5mEv7rBNyO9Kgx5vDVhxbxO/JS9WD6BvVPH4TyMp3c7g+GivEKTn7w8t188ItNJvEqpSzw1N0m9vxUcvU9dEL2LWSO8bCYbPXsK77xjpLO8ANTTvC8QHj1yGpO8NJ6HvAjPqzxTAKO9A119O9/YLD3OFhg9xXnmPC6fWzyE0Wg8uGp2vXIBkrzx9wM9tLoavf9fRD20bjo8050HvRCmo7zcT/s6bRDiO7UafD33wWS93KFCvZSXmrzA6Eu9Bu30vDFD77xwk6c8o/9kvO63FL2HOBS8vQ4LPBZD/LyXelu85te1PXiItLwG/UA9/7CLu7zON7yiEwI9OhwZvcS467xZnom7J6e/PKxYJL0KU6687fPHvDz/GD3Atk29NuiIO6/soD3aKNu8fCqavMMspzk+prk7Q0omvW5/dj0oXKy8mr8IPXqFg7tudYS6zSnAvKa/D7tKRb28xxwuvSczBj0tG1o9HS9kPGwh9LwGCd47jtqKvKF2vTxGwB081MZiPdW+RbyQC4O8vj69PD+mK73A4J07YOxnvUU8cTyCfOq6im+KvOQWGLygEfo8f3T+u6UGzbzQfPk8hSNKPdX2KzqmiQU8+M51vYGNoDoGfgo8rfR9PRk4Tz3hQV29PB6LvWNIfT0NEBi8X6bLvAr2Tz1OPgi9pfIoPRehuLv3Tbi8wTPEu/HvGj1FWsM8psPiPPDrk7xqryI9aJa+vBJWezwL3d08hmTTvCA3mDzUD+M4L8EBPOIA6TtejYM8YDO3OibMOz2Tm6k8nLWePJYrjTxPNi28WKbBPIsUe7wJmhe8ogPCuwlMOrzyUIC9jqWqu8psIz1VGYS3K6RkvTzG1rw6NbG9v09OPCKuuL2PZtM7BUovuy9aA7010Sk9muNQu/RPUjoPOAs8KX8TPWxfcL11v3G8CSP7PF29FD3X0i28ph8ePWK5zzkJ0q08peoAvOD8OD2rnAa9EH9NvH3iID3KFMu8LbV1u2Vy5zwYTMU74bXsPMdJjrwgFQw9FvJLvB9KPr3esdW89rJhPedP2DyCi1s5I24EPTX9GD2Btae8izmAPYMPND0FqIS8W/A6PbdLzTsbhmE9CoGRvESvubx/SY67imdhPQFRnrtq0MY8vm+9u9nYJjqncgs9XmaGPW/jmrx35xM82yPCu3TlNLwTwDg86ofzPI0kkT0kb3q93ZipvKgU5bsyn1w8y8AQPR7UmL26lIQ9lA/3vAfc/DoyhvQ7nN88vVqjcLx5QgA9bCfnPHqHJ7x1S7A8YVuAPP63BTxE1he9SmV0vRfUmTwz36u7gP0ovW0/Hz0JcBA83e7ZvGaxXj1VsfY7JmWEPB4Wgz2zihY9hMHHOzdwMT2Fmxk9k94bPoSYErxjJCC9JfXUu0NXLTwLAPQ8XdGtPeDH9buc+SY8UM3KPMn/DTzX60a9Ud25PKqhUjxwBbo9f9hPvXQ3w7zw9je9x49WO8mncLwMJCg81TJ3PWCBCL1sziE8tHqUvZGW6bwvNyA7s9SaPfMJLD3NN/c8mdyAPBrVlLwlXzs9/lcePMo1+DuCPbS85AfYPRfaSDzZgTc9YVhLPbYsAb3/XDK9xD8vvH1kxzwqlvK81BhXvbGdVz0jCpO9CZj2uFJLDjys+ke88NG5vCMPND0cdwM9pMiyvHJn2DwD/+G7kBV1vDK/ir1hkPu8LG/PvKHXCLw218M9uUIqPVJjxLw+shu74GkKPekZ5bwEPy88Rw9zPe6K2jy9qZm7AykevYIh8DwqaD29aAc1uumWgLzvOI48aJ4IPNOoLL3gS/88A11rvag3XLxn7EO9rpbIPHThzTyPD7I8IzAsvENDmTwvKKa7sefvOxaSx7wUlzu9Oig8PdFkcDxXp4+8qooFvBKCCz1PgYo9JkXqvFbr6jyNucW91gEFvExIkrx3q7O8WgtqvefGuju8hYs7qg6AvOgqXT2hyi47IgNkPd08pT3cnl+9K0R9vaAEPrtdC9E86EUtvf+dpzw8dHg7bsrUPFSIpbxAiPO6uwzLPNV4uL1GfXS9Hk4bPXZNB71vCdA8xNlLPWtQg72CYQg8faTZPOODHb0T6i299TzhPAmTh73hVPW6uhAtO59a9bxYlFw9mMImPUUpxTzEfQ49Df/sO2mikr2x5eC8sR6KvMb6Sb0YmAi8w0SQPYdzzLzvJa88/ic6PM/Cq73JSNk8wKYSvY/T8LucE8g8VpsrPVnF1zy3KQU9I0xUvLJHnzr2+by8sPdMvJjBXD0arsw8RdtkPQB3V71v6B49kCe4PP5eZbwPjKo8t9FdPcKHEz0EXxk98WBwOsBcu7zKPPA8C2OAPKnkoTum4qA8fUFGPDErHDuB5Ai9lPoLvMD1v7w/Hxm9ndPNvHH5b7wcVJQ91vFtPSNMPz3kuoI8Edq8vKuTR70DVqs7pziuPAmAhzyXqAq9ExA0vNDySbxuRYa9wOFVPPeuvDvqG9K7EP4qO5eCh7umEHW7drFnvUnRTjtxFyi9W4DpPF4ZZ7wYVSQ9gJTJvH5YVr2E6wg9V7sQveLmWTsxOxk8aWpsvCq3rLlggAg8gm6gvNGGCDz0elk9FWRfPHEe3bzGw4s7N4nBvA3ruDyE7XQ80ephvDKUJDzO6ea8sLwrPbTrGzzET0Q8H4Olu2n03LrX6Qu9FioYvQZU+jy4sJG6XCAKO2zINDy3kre8NGOmPIfK/jxLfny8caUDPEdQ8bzqRn68GFK4vJlQITyrAJu74a3qvG6LUTwO8628QDyYve2wuLweaZg9do2ZPR3gk73dQSm9uL1YPchdXrzcBEO8RtCZvB++NDofBS083SBNvQhG1TuQPaI8WPiWPLTe6LsMNnY9WXU5vSQI6jwhKQq8eOgQPZ/WvzxVOnE7fK3APFQD47waO4S9jaqBvK/8iryie4W897X6PDLn6Lr4vVy90NeaPATBwbzEoDa8TDHDPe6RzLy3is68GigePdXjVz3ya9i8Kw5zPNSqgLsJACW9SxUSPPqjnzvxfEM9cVWAvC5cG70ueoS7uTWIPeFFTr0FZwM9hWetPPC8Ir1FuxS9vzwvvY1hA700jBy9t9dMvME5E7x9uFE9Hfy9vN00Fr167aM7zUCGOuoOlb11VPA8/lk2vBU1Ojus9uo8wuqIuzFgUDxtNS295o0lPOulgrzBCiY91sHIPFM5AzyHv1a9VRZKvUNuP72YJBG9f0JYvDVDFz2ghoe94Aw6vWt7Lr0bP5C8NaU6PRBwPjvHzok7I3tRPJwd8DtJuia4eECHPcSsiDybJGa8AopXPHLJj72jt8i8XMOMPeBIEL2Wj5k8iz2FPGU0kT0nVYo9o/MZOomH0zzr+Ks8rLFFPcPtv7sLV5Y8UogQvVOAUzxUrA+8l/8nvQSV3rxW9AU9SrIovApe5TwUP4S88UtYvWGExLvToFw8h8daPBBrb71Y2Ak8oMIOvNf/JDyg0GU98Wr9O/tB9DuGwl+8QyuoPfO29Dw4FhO8JHynuqlEZD3G9RC9Jk4zPWBYyjwamFG9VY6Gve95pjsAiBK9DTpMO65rZTw2YeQ7/8Sgu3Jlo7xcotG8
  64-3: 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
  64-4: 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
  64-5: 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
  64-6: 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
  64-7: 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
  64-8: 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
  64-9: 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
  65-0: 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
  65-1: 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
  65-2: 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
  65-3: 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
  66-0: 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
  66-1: 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
  67-0: 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
  68-0: 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
  68-1: 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
  69-0: 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
  69-1: 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
  70-0: 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
  70-1: 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
  70-2: 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
  70-3: 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
  70-4: 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
  71-0: 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
  71-1: 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
  71-2: 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
  71-3: 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
  71-4: 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
  71-5: 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
  72-0: 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
  72-1: 0dkuPem/Qr0Nd1q8xooaPQDBbzy4KRO7u/06vXp2v7xRvmi7UfBMvZLDwDzSChK9CmBBvYnWHj1OOnK9JndcvF4Fyzri/YU7u++PPWoZ4zslIQA9vxl+PHDQED1BmAU9H04UvPZ8Oz13Af08HSwQu/ookjwxtFG9/ENLvfxfT718KH28s+5mPFpJNL35fKO9FFwSPXR+Aj6bjDa9TDQfuM/BwL0JG1S88I+UPXnGTLv3RiS9kPMKvLDbrjtBuAU9Eu0qPNklk7y+sRQ9eMjcvNdK3TwrkQe9EGqbva0p+rubiyo9gn/RPdbwPb020sM8mTwTvNzqnD3cjxM8VyAivM2hgLtN6aa8QqgHvb72ejyCP068N64pPasTQLzocpe8hIa2vPV4/7sxyRq8Y7oqvX5qr724cHo9DLcHvKYhBD3/SXs8/RWwPQ8SFT21BYs8whKePDF7bTxKWSg9NNw5PeV9yT17Wzi9UXXJvAgWLz3JyVm8RHawPChRWb3Oyru7Hr88PO0mrbyf+m69eK2RvELiVr1VNSQ9mAG1PNpwL72JlwK9QQBXvKDV6LwwssO7CNluPH3HpDxuer67TgqrvEz3A7xTPTK98iNoPQoWEjygtKC9Fc01vWdqyDyM2e67BxG6vGcz7jy+S3i9vXacPB+ldbxpJJ+80WSlPcC4wD0H40o7OZN4vbCb7zvgFoq7SCe3vOmCgDuwZx89Vsqiu2v1UrxF66e8F0i1vEgLlzzw4Me8w7NgPZj/oLtpzy+94Ou9vXqmyjztYoA8bezNvU4d17zvhOE86dO8PLFFdbweYmq99A3wPDGuV7yi70Y9NlqkvK7DIL22f6A85MEGPZiNvbxvXQK9JSUaPYDRzzxo8L27/roKuiCIIb0fSGS9/DH2u6G9cj17w0s9WffNPHjbgDxG/dE75+MMPT67sT3/JJC8GhgOPc0HF70iXoG8BJ4FPaIevjxurDe8SN38PPpTSz2JoNa75nEcPadddrzdagq8k+yJvMUdMT1Lk5U6/60oPfL/8ryeDzm9TwWyPMvSPzytUIG89nKIvPWdQLy+ixy9gbXDvCTmdzw/Bty8E52QOqkOWrx7JwE9WO3VvOYnQb0CVjU9AqCevDgwT73Oi3C8KfCZPECkgj39lUu912+fPPixBz4ymIa8WDAwPRKXfj2GBBO93vnFPPdAyjwrsOg8vBcJvI6fQj2SeOo7VApuPSyPAr1X7gc7YDBTvIqXEb3hR/Y8cWAAvHBtSTwiGZQ9iBSwvJPiN7yyygG9lSfiPGDVnj2Ch5U8ryJ+PdeKCL0zzLs7/EShPeYtUTzaHTm8/9yaPGBvLDzMBja9VD62uhOYCD1b/eQ8KugjvOdptryWGki8tIRGvFnrnbzapqm8CcMJvb/M2LxWW4o8ckg9PXlDGz3OzrM8TeKHOlo3fr16uKU8O/agO4OnozzQmDm9vhjjPFAP0rwYdQY98SCGvP1khbzpNce8XevZvPq3CD3ntwG9SbJVO4WHYD2wEN06wncwvTl5Ob0Hzo08fVgYvYeTFb05tqi8hpKMPXzOND0kje+83DLZPQKtGzyP9ZE8xE+7uQUFuzy4P2q7a0U8PIiVkrw/QrA774wtPfYBmTzgkQo9JwZMPQUtS70d2Gs9LU3buwdx0jxTEws9Cj8/PEP56jtEF1O9PBbLPJPAvDuxK6S79x6dvHLRCj3Odj69EJVGvVsvwLxDEoW9FTh7PQgo0ryzivI8db3QO0m4wTzuvf46P6yHvYwJOzw113i8QFMaPZh62rzmjgq9u68qvBBMhjuXlYG8xddyvLRbezwzDgS8hYFcvSVZa7zc9MQ8iTTovMBO1Dye7hG8s4MWPcFItT0rHpo8DdKcPA3jBjsXV7Y7jgtsPaToPr2L+Mi7OPFnvd7ejbuUWgC9sCqkPOrT2ju+ZuU4fMKbPGWUhL2UrBy9wUgdPDbRZ7ypPY09oWaGvFU1tTvomEi7u8IAvONJWryl/iY9je+FPJl0zb1IcbI8NEeJvTE9F7yYEXg8QFOXPKPv5TxzONE8yX0OvKVUpTv1oao8KmjUvBmpgT1CTxo8s+YbPV6piDszhns8q8RiPeBfQr2Dkpo7NOxJvanGTTyi+/O8nYh4PE/CFT3vRNc8fxPiOvxigztQZAM8R56CPIb2MT3XsLA8nFKGPKgDbT0uYU29LCqbvG+lCr39Jbu8ZKkAveSNSbzurZE8c0rnvHDrGzsb7N83+Fvnu0P1R72PCgq9/XJ4PalZTj2NvBy84EqXvG6PxbtVkmu6socwPH6k77wZtbY8HU0YPajbH71a/Xe7CReOvJ+eNjygTZS9uMAYOLxpIDy/KSq8c0PSPKV+ybt+Vgo8JS4/Pf2EAb3GqWK911lrPSrhmbzAE+a8tDpfPMLanT3SRpk8egCIvdLSjD1+tUa9fXTSvAprNzzRsim9dBXaupkKHTwBinY8PngjvXryzTwHD848U1AdPcDCOT3M/g48NOebvWzHoLx+WEK9dG5JvQ4YpbwbWaQ75zzdPPVLrjs2xJC5CD4xvM81v71QiH69qpv1Oiipo72KBMw8w25yO16fejzakHk5cx4jPVbygL2o8uW88wqRuxQV17wRcFA9PsoUvWiXkrzaBMc9GSyIPWp1MjxcfPy7A1IbPFoFor16rEc8jGVovRQuAb0h25q9OUQLPSCp0LogJ8a8eKjbPMQoAb0wopY8ezcCu1x39jsrE/Y8kp/cPGk/Ij0MIaA8UqfhvJYoNbkf1Ww98bKAuhYaT714N5g72M0kPQDv470pqTE9KCjdPEiACrwxWWG8VWwoPYlygDw8Jgc9w5q4O5stFDoWTg48a/KmPPX2DjwSfjg9iYn0PE+7LT1Lj4i8FYZIPFuQOr2Abfo5XVPuvF+LDj0KaCg933w8PHTvA715LyE949gwvHaj4bzJ5/a7iAhKuVjB4bz8KCq9ctqyvGdKBD3CcdC8RaA2Pbigh7xK/vm8v4X4uxjy67yujFC9+c1RvclgizxDCoa88L0TPWW5NbxPzcQ7+GugPMcy8DxLOkg8NDNIvOFAt7zgzuA8LlPDO5igHz2M7s+8Mi2PvL/BCr1Vtmc9h/RMO0rFOryBvuA5mF+FPACtvTyifwS8Kqgpve4XmjxFtdi8FNlRPJE/mzxh3CK8avRDPM2czzuaqGa6ADL0vMLf1Dwj/dO8H+IbvHX2bbz454O9ZSWbPBQTWzwuYIK7mWM/Ow4lpzx4w568yhmlvOm9pLxGp2W87APHvMwfjLwp3Tu99F1hvMs2HT1py009LM28PPvfQjvJVEW9eU2JPVTJ8TtYuDm94ottu5HkSr2eFD29SMxsvMwfDb2oGua8W23fu1bwBjxTpG89E+/tvHgRmjtgVXq7Wqacve2Rx7zXi9s79dKPPaB69jw3fyg8IpESPadbsztI9GW9hiVPPTSMIr091Bk9mtqtPLvsI7tOrOY8cdknPXaW+TtYjYq8w5EWvV8Wvj0Wc0+9OERZuo2kOT2zG6S9UEIivUsl0zx0dIW7N0Y4vDCgpDxluzu83djvvMoYPjwHaIw9c73BPB9HLD1mRre7LYKgvfW6BbwnPIO8Uno7vYH0HTxNKYI8r632PAIMybwPyry8NxutPIxC4TuwQFI99QXHvEHmLD0Y5SQ9n65SPf+URDunXyY8rSacvAD2nrsw4Ig8FykfPVWNLzys90i9u+XsvFbJsL1ZjQG4xIl9vb2ziD1vIp28BlI/vfvmZzsPvQi9918qPKFOz7xDdEi9mIknvQADLLwp2Mw62OmfPeFx4zxXeOI6j6qnPDjhnbsYL0I9i7OcvM9N17uTuR09LnprO/C5CT0giLE80wmAPSznhbvGqa+7sup6vWW2obqdU8k7Bt+FvY2hxLwZ/Zi8BwUkvWW8STtn7ze9C/AivbcjRDzIbjy9U8VgvZ/rvTwWHdu8XtsiPA1imr0vtbM8FyJTvUMVgTzdL/88NndwPa7yNjwc2TI9bNYuPYpsVbztNi27JB1SO1ryiT2ojuQ8U6CPPFJaHz3hEng8/o82PIT0gL1Azzm92tS/u3e0azwRncy7v0P+vOAIW7299F48
  72-2: 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
  72-3: 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
  72-4: l3YRPZsXgb3Whps8WczqPf+Vt7slLIe8jNx/vCNvED0oV168R3A1vQuZFDw//gq9qoDMPHOBlbvxSm296xJvvNqoBLwvUO28qj3FPO/dE73RQV48Ydi1u7lSST2JhiG9gbGEPJNYUz3xc/28VMe/O1jl8DxxhUG9HshkvT1xd72Miz29295LvP8bc7tMRqm9ciUsPF1ZeD2txRM9LZqcPA/gJ72LlUI8JeubPUkQnLtvSx28N7afOwP4xDxBI4C8PTtNPeZ9PL3socw8tAJIvUL8mzySkG+9UymDvdmBmby6p0Q9k8QOPVy9+byc64K6hSIOPZcDdD3J4ZM8L7wzPXFqP7sOOww8yoa8O/LcGb2cp2O8G/NBPaDFAr3Yeso63ubHPJRHzry7NVW8Np+/ujDD670lYTg912NKPdGX4zw7xwQ9l8qFPQINnj057OE8mgWMPaz+Cb2sA6E65tNEPTyErT0C77m8qIH9vEO7mTwGDLG8jYtDvJnq4btIx+a8jz6gPN6DcLxolLO8jjxwPNBFAbw/ays9ZlEOPWhWKb2suh29jKp3ve2f0Lybwi+734MzvZIDHz2ShBq8RkqQvVq2SzxnymC7VBHGPLcV4ry/Oma9Aq5WvGztLT0kORe96dgyPQ5bOb07rlC9galePTQxI7xmCxm91NlqPfuKqD3eOus8eWykvV3gFTzta5C8dDUKva14ab3Fdhw9/72nuhEu0Tps2wA8xoFsvWmThzy+aUA8xpC2POlJKTwLp5y5gaezvVvQKz08slQ8CAZXOqgbers2Cg49695zPJ5+mbxE1Jq69528PCkF6DyczAY9wuLJvD7QVr09Zb48tCWQPd5PbTzPvtu8lUpFPb0brzyAd7w7TuaLPd71LL0at4+9Hg/CvHPGIbzStSg9K4phPc42VTy43zM8SkYYvHI2kj0zVIi8ELbEPblU/LvUjkk9SO87Pc61szzuIwq7YkNjPHbH3jwzxXO7ddIbPQNeJLyz+ic9SLwEu1KZC7zuyrC8raLuPGhVJ71qWwm9fCDcO+UEjLwus/88/VjuukhekDvX6IW88skNPHslALuHqaE7a7IIPZZhkbwhTkw9JleQO2Lx+L28xms64Cj2u49eS72V8rW86KEbPRFKSz2SS6697SC/OTrHkj24fOq7wf49PZNZrjx+JFa5+YmfvPYtB73RVHo9nqkXve37Vj3wYvq8qFovPSsEhr2Ghae8UyWGvfqScL0T3GM8858bPAjVG7wbM3I9dfoEOxBhO7y+jDK8F99gPC6isT0vsFk9Cq4RPTU2D70TT/W7AW2VPcuzZTz6pr28SRCjPNdA3bzQghG9HEExujFUnjwD0Ec8I3kEO9P7Yr3kugQ9dgTbugRU7rz7LAG9X3wFPL0Mbjzs5Kq6ikFQPcBbxzyyfaQ8zvp6PGox0bxhfuc7Cq2OPErCFT3F+X28IfcvPJNzbr0a/8o8RaHNvCTPIr0Tejq9HrT6vBxKVT0LKKg6J1sjvSgblT2+Fwk8fH8ovULvNLx/dCi8kl8tvV39Vr1Fc/a8HgIXPfjPGz3KaNS6uR7gPZrjFzxNSrw8IEMHPag+/Lzjxpc7IbKrPPBohbxfXeo8gi9TPSz7bbyZPtS8Ch6bPNL0Y7wQZMU8c4IbvYKkJ7xPNhI9Ed5au1fy5rye6aK9DT1jugFAwDzR9xs9w4zTvIvUDj2mhCu9K62dvUw0Gb3STzK934iQPRFM2bwtbD686PwMPf47MLxqsOY8omqavCnlCrz64l28Lb0NPWlFYb0Q1J69zfJlurxaMLyGfV+7VFb2vP0VsjrUkNo8oAFHvYhUx7y6F4Y9KodZvALv5zsdUOs8Y7/0PPIBkT0x3fs87spqvNHmPr2QmTy9sW4HPUSeRLwtoC08b5W8vXKoIjx809+7ChtyPYIJ8Ly8baa7btorPLTOnL0WN8s7gGFjvUJ4uzwiOgE9afORO1/SO7zwdDE71Yx/PBDJEjwSSi28xg+Au/DoJL2qzDU9VJdVvYzdjL0yjQ89fnuiOystg7x8AKA73XrNvB6obrxlTAI9ss+/vNfn3zydko089gX1PDlq/rs1shI9yGAlvdNLDr3QTq+8RZixvIkOi7wjjYA7bVahPCoySjxr6S49zQQBuxgnq7x3VnY8MtkhPO6Ssjw05o48oH24vPineTwIFWy9xuowvbtdQL2y+pq7YyG1PI7hJr3GQ8A7j90zvCv8RL0djK44P/6OvV+5rLzxVNu7NqR6PYpxq7t/g7m8af94vebJrrzOqwE9iX2cvGC83zspjia8mgLDO7owjDzrnpa8xzq+vMsihDx4rHi8HQNnPGznjLxFBn48AD1FPAl0qTxZ9wS8ko/0PAlXVr1S2Pa8ErEDPW7OhLwWj1S8ASAmvAkOGj5WnDw8J8JIumGBvjzoq3G9NkTtvM+3Dr0OevY8euK9PMuuvzxdKlg9VnB4vReuCD2O5T88ej3cvEx2uzy6JRq9ZWqWvagiKr3yUMI6BNaOvVheJb1VJdW7W5rzPL13PzzyDZQ8eMURvTspaLyeYwy9nRN0vGOblr3Rep68HN4yvB9oIjzg+zY9TrQdPBALjr1BBS29P5D+vI8dkTwfKkk9V/0svfGOPT34FUk9Q0eNPJd+mjyT47C7+g66PKJ3gr2DyLA8kMQjvddo1bywYRW9Qw96PWmtujwnJYE8ToOFPCfXoryPRKO8k4R2PM9WQ7zgqRc902z4PGmrJL2YtSS9iheZvLOnNj0CTb497ryXPCkMrrwG1iY7cjHXvJ5+/b38J+k7hXAbPcP99bsm60q8vQyxPKSkFTwvun27wEx3uj8gejx7hsC8bL4vPFYfLj1Uqwi88ksGPe6ztTw935k8AvZhPJBTRr2TN9q8HN7vvLJVaz0PpFs9zKaTPEHmvL0WSrM8AoRBPWYPxTxsr0W8GzpgvJ/HBr3Wtau77lWFPWylRTvS9YK8I84XPcmyEDx5Wuu6sNsJPdKA9Dz0hV+9POaFvespRDwSq8s7qpxKPam+xbulYm88kU4dvMVCfD0areU8WZlDPBcRbb2fUmU9F1Iau3qPQjzYiAC8Va4zvaB9wbx6EXY8gFxEPf/lLb2rnDS7QgcAPVrZzLxX6R89H+cUvSr0v7vvX/a7PPfBugb7tzqV/668UpCMO+/DFTvn3Q48geZMvAskSrsp3Ai9m+SRvH3+7DySaEi9fqQuPJxhfDzSMTu7yi+WPc42xryp8p299d0vvceKq7xdvQg9X3SfuwWMCr0D6Da9VQB+PMB747pZqJw7gTCSPJtzjzxH7Ji8laN8PZfid7zRE5G8DIn7O1KMvLwiSKy8tl2svBm76jzSl9i8QIKHvPmOqzwkVp671e14vd12Hj1HSLk8pDIHveGJJr3OAAO8JSUFPXYBwrtVFug7qyqEPOwpTDzRbgu9l2nSPGdW5bynZt+7pQw6vAjQibybGdQ8jZopPUcY8jweiIe8LXfkvJhx4zwJIpy91kEJvRq+yTxsPM+8ey9AvQn7/zw60wm9DgG+POOoVT0KjSy79zk+POC1bjzWQII9CgxzPEWC8zub7MC8x/5Ivf3lsjtATQ68FxudvTNnFT2AzKO6KtZjPU8WursGYRy6OQlIOw9fZTtKKM48Movuu20YgT2fLF28eyKiPMxvNTxlEqC8xsL2vD+l0zwz47O8TQWRPCt/U7wqGXi8xQM1vfknwr2MoIs8RZRkvcP8ij0QyuM8+2kgvSKKDj1piJy7R+KxPAk8srwksOO8xI6rvOyVszzViom6LQx1PbRg9jsQ9Pg8CpsPPeUSBL2qIzY92SbXvOisT7zSlLs8HFoYPfoR5Dwohxw8w7a+PATiGr3HL/o8q28YvVAAbrt5yeq8wwGMvddoMbpw8jM9uezyvBQhTj2RqRQ7wQIjPKwUKjzVzda8FUSxvHpCq7yiyN68JOIOvZgji72cUHa8nWA+vXF+jz3ut5o8tOOMPc/vo7v63e88q8I4PdOfEj13zuK6Ns61u5ZI6DwXdoi8Ftx0PSzQMD3AO0M9sBW1PKW25zuUIQi9ALOFPMfymTxMkv08fDIQPVUwN70TwJQ9
  72-5: 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
  72-6: 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
  72-7: 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
  72-8: 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
  72-9: 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
  72-10: 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
  72-11: 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
  72-12: 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
  72-13: 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
  72-14: 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
  72-15: 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
  72-16: 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
  72-17: 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
  72-18: 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
  72-19: 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
  72-20: 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
  72-21: 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
  72-22: diSPPMXCCL2nvo66kn4OPes0ST1skS08keL1vBN89jyeGgg9QqkIve7xJT20M6K8KuqCvKwhqzwyiBa9l2vjvLSnlTzQFxe7Em81PUhGkDvwQWc6+V87ukXLFz18lRe8p+vuOigO5DyY4+88r9KxvFblQLwOe3C9vzc6vclymL19C9087q0APU+BAz2qf4i96cgIvD5n7j0dTny9Hl6GvAgbrL0ixAW84Y5MPbFX/7xMsQe91WW8vDo4KLwe0JQ8mYTVu6u7djxebGk9CEIivEV+3jx0Fh880F+rvcmA27vVGHM9yxvEPWKn7LxZ87Q8bXOjPI0jeD1QA8484kdqvBsuAT3rhk48AZTBPCZeTLyKpuo793a5PAI1Rb0r0ri8UPabPHYDLrzAIbY8kJuAvcsfrr3JKAo9oLSzPDh8oDzjFCw8wpMAPDYJUz1Bdzk9xhWZuzgmUDwiNa894So/PYh0qD3ETeS8KdU5u7+JTj0p+Ue9NWdovTRX17zZeTS8CcURPUGZKb3KDDW93pG5vO/cLbz0ym49XP2Cuz2I1bzs4968HUK8u72M77y7/2k81QknPORjQrxLLSC87SB7vWE3frzAy8m8fj9bPcrt1Lx9DCG9v+RBvWzNrzza7MC8+lqdPKD3YTyu6cO9STg0vHGz4LoXmQU9yyynPbn+tT1nA7M8cwyQvamqirwwBCW8/zRSvbL9qDxSWwo9WEUKPD3NRj161hS8tu49vZhBZT1DnFC96EQYPS2pWbxXsZi8/WivvXiAhzsXS628dTjNvFcWjLzuDsq6yak9PZLvmrw0i2+9Oj11PXujQzxccYU9uaLavGD0Ur11L2Q95FQlPag+B7xNKG48qjoSPRiaHTxHLBQ8BxAqPXfiV7zfpI+9DYUnvYNSoz3KOfk8gAY0PdYzKz3YQRq80GH3OzZOjD1ti527em49PZyQSb1/Zjs6Is4Gug8cmzrhFQy8oJDou3kBPj23OiY8KRVPPFTkE7sccDk9wpYhvGsIQz3pi7c8lAlvPbBKb7zniU+9IqAAvU5ChLyhs5O7jppCvHy52rxbawy937aiPMlczzshvYS85mi4uyEMSDyEnPE824m/OqTyc71kjBs9IIMDvQnO37ep4z07pxIWPPD7Tz3wT5G9WiBBvK0//z2G1u+7RSTrPH49cT1Wyb26BkqgPFV9ALshNZ88XEquvF/USj1E1SM7onttPUXxdb3ddAq9Bv8WvEZ/Hb3fpG08dljrPOATZbqQJTM9eNHPvP7Vgzw1tIg89B/Ju9Dcgj3b9cc8qcw8PeHRg7yOYLw8xPRwPfuNrzxZpa+8NCr8uzhy6TyOSUe9//eGvIoCMz10sF89YjmpPMdyHL3yNwi9baEzu9kSC70eCQi7vrFOvbgj/jmLD666+8t+PDm5kDvlW5U6r2d0PJoBCb3fIhw8H+3jPJlceD31QxW9/ZOIOwJ+grwWyce8kjnjuj5BFDx8z1q9uWe8vA0llrynnAy9q8PKPO4JYD0Zqc02qz9xvdgXQzmuCY490u+xvDyBG73Z9UU81dC5PQCfaz2eCTu9Ag8+PWm5hbuHgkq9Lc7EPOzQsrxG9do8YRtVPAVPijrAECC90fRLvAqBGT3fBhA9hYmDPR0OfbztYTs9c47qvLxK2zwKVwM8oxGavAnyArutBI69QBRNPFuBazz1SZy8r7Y8PShi+TyRGaO8TZ3QvLbp27xGSRK90aLEO2RTpr1RYxG8qkK6O5PdDLyTyvs8JQVLvC/6oLw0bqS80zyaPIEBoL0dNzG9QRRmO6efs7voUL286ravu/GDnjvVaks8rOxPvZlhj7zsfgy8GwUkvHAPxDyeqa08WoigPe0WpD09rYg749mJPQVOgzuf90M807t7Pec0Hr28bFg7Vm9HvQ0omrskvJ29BiEHvEVPCzyx60y8LrS/PExDJL1Mvw299jNoPHCpAry0eIk99zYKvfP1obwAWJu8bcpVvCIxDjxPrA89IEO2PEKvpr3PAoq8Rb6EvcPzQL1aa3w8EHkqPVsrHbyrkww92jMDPBMf/TcDwjI7dP58POdVuTxI/7S7/l5/PaRm37xSWK88vZs9PX0EBL0+KTi9If9vveEmjbsPGVK8eT+Hu9g2jT3Jcz091F9MvLy8PrvmD0A8vdenPALT+jpL/hu7f1MDvXcyHj0KTDi9+2kSvcGlDL20sZm7/QF4u8PF0rsdKj89O1YhvYVdv7s8FvW8/NbSvFZyM7w8GfU8mHdrPeEUgT2KNkG8jBnRvBPWObzJiJa7lVkqPe+BF7wFYRG9KKxIPY1BFr2pZtK8FxEJvdBaWjzs7+a9MzeFvG37GT3RMnK8GnDcPExNzzw7wxy8zPLiPIagSbvY1iO9b4YvPYL2lTyrgxy9gETLvPSkjz0jqjk84acovdVqMz2YnZu9M7B9vUyHZzpJ4M68ECogvIqq+TxPt/M87DeZvYGJiDxzjX89MHamPKO2eTz+8r+8IDOlvdLpa702tTW7ICuOvVjwirytAWq68irgPPn5kzwaXUY50HLCvJbymr2+gkG9+nLIvGh2jL0yNxK9JhPKPDyQ0ryAlZ27UkiiOyXsi715w/g7q1TwPKoD77xjwB09uH4eu71ymLv/+5I9v+McPTSZdztvhpw8edHFvLY4qr2PSqE7irAZvcsJF722iYs7o83YPFPrG7xgjaq8k1wausc2vbyTXcy7mLdkvK0iW7wto8o9oBldPbpsxTztDe87vYVqu0vW7jyCo4U9xw8GvCY+jLwG7Bu9wR+rPEqZwL3c0w49Ji/+PEd+Br1FaNI73d8FPbrLGT0KplI95QXuu6QvBD3AYu+8Q7qDPPKPKD3oWrU8cQOVPK3Siz2L+8g7+Hrwuti2WL1lyB+9y09wPO0xDz25bKc9IL1/PbneNr1Lk289ZGzTuyVMPr060Lm7ZsomPVbSjrw0K5679f8LPY1GKjsU2CS9tTc2PW+sRTzTWZC5ZL2DvDJCEz14hDm8Z2CpvGykKj1G48U6Vx33vHTUDbyb5A48skJ2O5b6I73n1JI9Oz/kPOZpFr3C7BY99OAoPdj6Hb26yz+8dKW7uzGL1rsMOlo80VubPE/FwLxan6i84CUNPQfs4jyMoNo8TNgoveNG9bvzVUy8wJLkPOkx1TzxNWG7FvofPB6RPL05Tes87nIXvQnaHT1y5u28T8efOXq1gbxTHQW9uVVtvFbsibyZI0W8cJuGPFBay7uUWsi8ebRlvF1ICrwgBIu8r7WNvXN/TLyiv/28fEyAu0cnZTtjbBA9uWyHvHIedDuZLRS90pQaPXnMzDchnX692gzEvHONC70SCHm8XZbQvJ1XkbyvO4m8dk+Eu7fH0zzCp2Y9H86AvEmDTz2U47+8zf66vMC00TtTbmm8A9LhOgN0MboMcwG9ETXAOpSW3Dwsco29/nfhPLOSybtA05K8+QF0PH2NmDvVKgg92F2UPW2BuDz4kG48XHmsu5c/tT1EiQ296+EcOlyoFj1mJYS9CHGjvATF77uNU4K9HEdBPf9U/ToxZNG8My7sPNLYirjfbB89yBvdOxXM7zyiwL48JkyrvAoCUr3qUBQ9y+6GvfrU2TxdkUo9rUcQPU8JE7x3dJG9f7NUO3UAeDxwu/k8pUQjvKDHPT1xohs91P1nPXgqh7yxgI282LaqvHY1bLzv94g8P/MBPVR+Gjt0dyC9t60kvbVHLr0ndVW92P06vUcCiz0AAq47+c0rvFHzcb0qSA693Tc9PH3UhLx9+Je9FzsovTb80TxGf248MftBPRtz3TzF7rS8S9aIPKbkx7xbJhU9tEuIvDxku7wUZqw8R2PgOzUOLjy92IY8xIW4PKr4OLqS7ds32/B3vfhy87zgBtu8lzmqvcmjJTvsRxM8WYawvOlWMbxq4aO8nUXDvD3M1TzOo+q8rmd5vbu4abw21Zm7MNAGPTpPlr3cOEo9PEm6u/UA1TsG7CY8zK/lPAoOCjxK5TQ9asOdPedOwztQs1G8TH8SutNgMT2m5Vg8oaBtPYghIz119wm96cXiOwIM37w/UDy9uas4vU/SBDx1omG79IvOvAIPZL2jaSY8
  72-23: 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
  73-0: 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
  74-0: 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
  74-1: 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
  74-2: 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
  74-3: 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
  74-4: 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
  74-5: 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
  75-0: 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
  75-1: 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
  76-0: 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
  76-1: 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
  76-2: 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
  76-3: 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
  76-4: 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
  76-5: 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
  77-0: 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
  78-0: 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
  78-1: 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
  78-2: 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
  79-0: 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
  80-0: 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
  80-1: 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
  80-2: 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
  80-3: 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
  80-4: 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
  81-0: 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
  81-1: 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
  82-0: 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
  83-0: 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
  84-0: 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
  84-1: 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
  84-2: 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
  85-0: zGxMPKnNTr0IVa+8daKIvc1jmTxGzI07/80dvD4f/rzy/ku8fDYVvdD3JLxi4Eg9gTHtvOFuST0K07m6zyy3PI2/yjxM1ui8qleXPYUPBj0m2pE9rDMAOokXBzzUopQ9HKWFPNt8QT1IALo72Z+CPDMLfr3RTTi9tl//vCtvhr0axhc94vThPDi3jzqkGTu9bMYOvZxQsj0vedu9oQ3vO2hASjwboC69/AuEu7mny7zx13G9qncgvco6pDyYuqc9m6opvZd9c72r1Gs9JlIcPXA9UTyghsk8JD+DvXZS5DxQpAc9Hi51PWRhmTx+7Dc9wlzZvUD1DT0EWpM8YHY8vC1+jTyT0Yy8wrOXvceSxjxM36s743SYPGMhQDzBUw88YttQuIP+pbuYfUW9z6qYvYJq2r1s3hs9AFToPLkXC71RLU29nDdUPQelq7yVC8S8UNWQu6pWgDyYOck8iNCyPKDQUz1Hcve7ugjnvPnYKj1y+H28HOlMPVjF57yZTZE8prgBPMDapLuxQpy86LfiumirMb3xsM48IN0Wvf93s7xcHAK65HeJun4YBr2Ne/W5nUhHPeqb6bzoJLu8fCeQvJy1gb1+NiC9oW/mPAOjAb2IN768iOdQvS0AqryHX1u8Bq5evC5tODw//By9+L4avMir3TvdQR098t3gO/lxersDEsk8xdhivccI8Tx+bxG8rBqsPEo+wDzUsCk9gQHOvOa5WrwaeTg8CLMQvMSqmT0oAnK9RCx1vAXpxrxaeOG8nWCfvNlJT729lCE8z4dWvbZwCL0OoOU8nPwEPdE91jy4zMS7PF1lPVXy1jyo9po7SpUwvPHob70A0Nc8duHlvB98i7wXHQK8SYPEPKBKFbwBcmC8P2/bPINowTtRiKa8rsPpOreA5T0HBHy7JF39u9GgDz0qVcI8QWBZvdLC5T2q55y8RLsUPMhCGLz7ilW994uAvZeJlTuQM3+9aNy4vCB2tz3BhG+8x7nKPAOPj7qa0rM8Ar6VvFwaHz1Hw9M7dXaMPdPUXDxMJE68R//ZvFIw4bwLsz69jW4mPXER4jtaMiq9g/UqO+GzAz0ZIRu9QdW4PEziPjwLWFe8AYrzOpbWyjzb4aA8d9aqvB8EyLyTKJU7GugEPWr4MDuIsQa9UOmPPeCzYz1rAj68CSmzPEInuT0JhwO9OGEaPdJxOT1lGKm8aFrXPGzQOzx9r7W8/GiNPCHNJb2OuPM8t6B7vDFCK73IYdQ8ZFucO27SyTyKid47ozmZPIJBwDz0oiS9Jh8KPQ+L5zvCatw8DnpJPbUOr7sBsoa9PLyKOxcInLlfNai8fL6IPKAIVzz62y290lJbOmFsLT05Mpk8oK8kPD4na7w2uVy9B0VXPL+hPr3vI6A8bTmCvLxbB71poog8T9KsvCtjxryILKe58IQVveubN70Owes83DMfvIJHBj0rpw29mDXsPCRpJr1UTk08rncPPJi6hbzaBUW9aTQHvUKldrxtHRi67kUxO1yv9brrYgG9BpxTvChbJrxZr3Y9Y+pkPDJSqbysVds8SZRWPcxryD1IUAK9sT8WPSODbLxp5GG9+t3UPAkVl7vW35u9iZMSPO9yWL3tZwK9fnQiPUt7bzyZwm49TLFpPLen+7x1prI9wNLZvBjKazxJHFM7gdTfPIzKQzy4b3M6FUm2vGKzr7tylYS97TazPM3K6Tz8rv+8p9wnPMJ20LxWCyg8UddpvKf5lr26VjI9ECaLvJk7kzywEQW8RX4QvdqbKj2VCO08841aPSI1ijwERHQ7b6gXu2ykvDxO/069XrbEuu8ISD2umMQ88hd3vQSj+7sepo883lVtvGMRIT0ZKUc8p6kHPS4MDLwNDsA7zfFZuh8hiTutih09FDq0PdNHLL0Mooa8XrKfvLbPqDvwI4+8KKShPAfrYzwfXds7hfVxPL8d17vcluO8J6QIPT23Ir0Jkvs83jnDvJQforv7Rry83FcwPcygi73ThS890Pb5PAo9k71924S80DsCvfxJAD2o80M9thBWPYHIUzyQslA8cGU5PeodhbzM7gM9GLH6PDGBIT1pb/u7vYmevNdpDT2oNL+8wlO1PYeIOrt/qJq8n4lJvLcrjzwNQV29b+MZvT6kFj1DiDA8v7+wPII9mzwAlgu9/Qp9u5JL3Twmske7agL1uzksMTyZ3Om670Gru3UWBr31Puo86N3Ju1vIkrn0hnA9pVLhvCMSGjyroR+87Vv7PGx31ryldQM88clQPcN2tD3kiwk9g1EovMFAqDlWfPU8psa2vHgMNrxEpyS7abPIvI+Kp7zoxpk804xFvYGEO7ujpLy9wZYlPMAUkz2uvai7b3A1vUElQLylFpw8ZQLOvOxo+7s1bS27IokdPdCyQDvJ5DG9yF47PWlWcTs/aMU8bCJcvZCHVD05Bhq9oAQbvXFMkjzYMBq9z6nhvJyrgzwKGpY5x5/hvBTc5Dyq0e06W6J2PVzXjT3Y43c80KWPvRaXGTyk9Ms8oc+Pvdi13Ds1zNo85880Pc3YLTt6ISm9pYy7u+CmjL1i9bq9BsUvveDeTTtbtmc8n/aFPNGsWL2YhW885dFiPa+7sLySUUc9zYw2PbyXPL1odQU9i4NnvNnqpb14OT09q68XPVd3urrpXnw9fWrxPCVzf72/una8RmVGNsVkOb0cAok6jceuPM9HF71mX3m9xR9FPcR5Sb0azBA89NWuO+aCAL0YoYq8e+jRPNjJMT2IZ3S879KcveF8LbyfiUo8sOxVvUFfSDt3Y0A9T0AIPEFslb2jDdk7qgPOPBrBuTx1FYg7SWVHPbWpdzxUKrY8377uvBdceTznUrI9KK3CPDWY6bxYY2k7id8bPWc8pDtMJjq9DvhEPV1/kLxgSw+8dAUHvaGOMb3qg+w8YERsPSHzeT29+Ro9bbhEvUt2l71/05g8NSbGPNNVCz0/69y8+Pa0vCP2GTyWC768UW61PK8v1bw5fnW7O9OqvB7ZT7xtMha9ghsJvX+1dj0oP0y8blbVPJVhTbzox4a8CYTJPJVXYr16Go67OUaAuVdyirx+5WI97YeBu46ZGT3M6To9vHAlPd3h/7x/c4U7tncgvZurEb1RThq80CD4vLRrHD3bNha9cxxQPNIVAL1bNlU7MuKNPLlCGrw9Eam7by/+O2J8Ar1O+cu8nv3BvDfHmj0U6Qw9ie0wvRBoj7zGKfi79E4FPBrV8rxVLOU7ma8IvaoO8jsG10S4ayEXPCJFtbygEZ28stg+vWJV4ztUP0+9ht4ZvS0aybzKDCU9Rly1PCaXLL2Ws/68kzRoPasfAL3L2IK84GWhvbiOI70x/zG8885BvAa5hL1bpIw8hsUxPTxOxbxV7K89M9DHvPqAKL2cSkO9K3/OPN9ORj0bWZ484VlhPX/XzTy6BFC97d5DPJS0xjtf63G8dQXCu0Dt3Lz6K8+8HsgCPHpp87y3Ios8l/8rPfrLt7zVY5g8KgeDvMTwNT0b0DU95npoPV54Zz1Onhm9DB0BO6/PvjwgQAg9F2fPvAQQJjzH/4k8tOCuO2u/y7zxZwc7hj+AvDtnSj0bqhQ85DyDvZ8umrwXGhG9CrAOvDlxt7xGjik9mbrBvBWJWb0fMP487rPYPHvFMLwmrgm8CltYvNFNMb2TQBI9dj1mPfB2wDtPKK29H3YzvYCXmLz/ZEE8GriePeQE+zwe6wm9vyX0vO76lr2rfYa8FbeWvBFxrj2Tlt280KcgvdbH2LxL2kS9EjvHun6k+DuhRWa88WoVPV3DWLuK7j49nDISPp/IZjwnuwa9y4GuPGYy+zviLh+8Zr+6PJbUzbxfLDQ9HtGgPKGQNT3TTfc8xXyQPLnKjzxuODg9QrAQvcZZk7xI10M9ibVovaEVWLzKwSy9SI6CvCC2cb1//yu80o9tvAhbAz1JzT+8DZuyvJvsDru2syu8wlu8PDxQwDyj6is9hV3ivEw7xLwVYLY9Nla7PE8JmjwnN+w8kslKPALpsbxmnEk7rQEYPYwXqT1eLAe75sgXvalK+zxeoIa8O1d3vUgREb2DoMq8f7AWupdPfz0miSC8LtGJO2YugztsacQ8
  86-0: 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
  86-1: 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
  87-0: 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
  87-1: 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
  87-2: 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
  87-3: 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
