embedding_model: jina:jina-embeddings-v2-base-code
chunk_size: 1000
chunk_overlap: 50
reranker_model: jina:jina-reranker-v2-base-multilingual
top_k: 10
batch_size: null
next_file_id: 14
document_paths:
- /data/data/com.termux/files/home/projects/straico-client/src/**/*.rs
files:
  0:
    hash: 8598276632c9443fb8329f09bd2f85a9ccf04b676de806fb0b84f3cb40c6657c
    path: /data/data/com.termux/files/home/projects/straico-client/src/chat.rs
    documents:
    - page_content: |-
        use crate::endpoints::completion::completion_request::Prompt;
        use crate::endpoints::completion::completion_response::{Message, ToolCall};
        use serde::{Deserialize, Serialize};
        use serde_json::Value;
        use std::borrow::Cow;
        use std::ops::Deref;

        /// Represents a chat conversation as a sequence of messages.
        ///
        /// The `Chat` struct is a wrapper around a vector of `Message` values that represents
        /// an entire chat conversation between a user, AI assistant, and optionally system messages
        /// or tool outputs.
        ///
        /// This struct implements `Deref` to provide direct access to the underlying vector
        /// operations while maintaining type safety and encapsulation.
        #[derive(Deserialize, Clone, Debug)]
        pub struct Chat(Vec<Message>);

        impl Deref for Chat {
            type Target = Vec<Message>;
      metadata: {}
    - page_content: |-
        /// Implements `Deref` for `Chat` to provide direct access to the underlying vector.
            ///
            /// This method returns a reference to the inner `Vec<Message>` stored in the `Chat`
            /// struct, allowing direct access to vector operations while maintaining
            /// encapsulation.
            ///
            /// # Returns
            ///
            /// A reference to the underlying `Vec<Message>` that stores the chat messages.
            fn deref(&self) -> &Self::Target {
                &self.0
            }
        }
      metadata: {}
    - page_content: |-
        /// Represents a tool/function that can be called by an AI assistant.
        ///
        /// The `Tool` enum is used to define callable functions that an AI can use during
        /// conversation. Each function represents a capability that can be invoked by the
        /// assistant.
        ///
        /// # Variants
        ///
        /// * `Function` - Represents a callable function with the following fields:
        ///   * `name` - The name of the function that can be called
        ///   * `description` - Optional text describing the function's purpose and behavior
        ///   * `parameters` - Optional JSON schema defining the function's parameter structure
        #[derive(Deserialize, Serialize, Clone, Debug)]
        #[serde(tag = "type", rename_all = "lowercase", content = "function")]
        pub enum Tool {
            Function {
                /// Name of the function
                name: String,
                /// Optional description of what the function does
                description: Option<String>,
                /// Optional JSON schema of function parameters
                parameters: Option<Value>,
            },
        }
      metadata: {}
    - page_content: |-
        /// Represents different types of responses that can be generated by an AI assistant in a chat conversation.
        ///
        /// This enum defines two possible response formats that an AI assistant can provide:
        ///
        /// # Variants
        ///
        /// * `Content` - A simple text response containing the assistant's message as a String
        /// * `ToolCalls` - A response containing one or more tool/function calls that the assistant wants to make
        ///
        /// The enum supports serialization/deserialization with snake_case naming convention.
        #[derive(Serialize, Deserialize, Clone, Debug)]
        #[serde(rename_all = "snake_case")]
        pub enum AssistantMessage {
            /// Text content response
            Content(String),
            /// Response containing tool/function calls
            ToolCalls(Vec<ToolCall>),
        }
      metadata: {}
    - page_content: |-
        /// Defines the format for structuring chat prompts for different language models.
        ///
        /// The `PromptFormat` struct specifies how different parts of a chat conversation should be
        /// formatted when creating prompts for language models. It controls the wrapping text and
        /// markers around system messages, user messages, and assistant responses.
        ///
        /// # Fields
        ///
        /// * `begin` - Text to insert at the very start of the prompt
        /// * `system_pre` - Text to insert before system messages
        /// * `system_post` - Text to insert after system messages
        /// * `user_pre` - Text to insert before user messages
        /// * `user_post` - Text to insert after user messages
        /// * `assistant_pre` - Text to insert before assistant responses
        /// * `assistant_post` - Text to insert after assistant responses
        /// * `end` - Text to append at the very end of the prompt
        struct PromptFormat<'a> {
            /// Text to insert at the very beginning of the prompt
            begin: &'a str,
      metadata: {}
    - page_content: |-
        begin: &'a str,
            /// Text to insert before system messages
            system_pre: &'a str,
            /// Text to insert after system messages
            system_post: &'a str,
            /// Text to insert before user messages
            user_pre: &'a str,
            /// Text to insert after user messages
            user_post: &'a str,
            /// Text to insert before assistant responses
            assistant_pre: &'a str,
            /// Text to insert after assistant responses
            assistant_post: &'a str,
            /// Text to append at the very end of the prompt
            end: &'a str,
        }
      metadata: {}
    - page_content: |-
        impl Default for PromptFormat<'_> {
            /// Returns a default prompt format suitable for basic chat interactions.
            ///
            /// This implementation provides a simple instruction/response style format with:
            /// - No special prefix/suffix for system messages
            /// - "### Instruction:" prefix for user messages
            /// - "### Response:" prefix for assistant messages and prompt ending
            ///
            /// # Returns
            ///
            /// A `PromptFormat` instance initialized with default formatting strings for
            /// basic chat interactions.
            fn default() -> Self {
                PromptFormat {
                    begin: "",
                    system_pre: "",
                    system_post: "\n",
                    user_pre: "### Instruction:\n",
                    user_post: "\n",
                    assistant_pre: "### Response:\n",
                    assistant_post: "\n",
                    end: "### Response:\n",
                }
            }
        }

        /// Defines the prompt format used by Anthropic's language models like Claude.
      metadata: {}
    - page_content: |-
        const ANTHROPIC_PROMPT_FORMAT: PromptFormat<'_> = PromptFormat {
            begin: "",
            system_pre: "",
            system_post: "\n",
            user_pre: "\nHuman: ",
            user_post: "\n",
            assistant_pre: "\nAssistant: ",
            assistant_post: "\n",
            end: "\nAssistant:",
        };

        /// Defines the prompt format used by Mistral AI's language models.
        const MISTRAL_PROMPT_FORMAT: PromptFormat<'_> = PromptFormat {
            begin: "",
            system_pre: "[INST] <<SYS>>",
            system_post: "<</SYS>> [/INST]",
            user_pre: "[INST]",
            user_post: "[/INST]",
            assistant_pre: "",
            assistant_post: "",
            end: "",
        };

        /// Defines the prompt format used by LLaMA 3 language models.
      metadata: {}
    - page_content: |-
        const LLAMA3_PROMPT_FORMAT: PromptFormat<'_> = PromptFormat {
            begin: "<|begin_of_text|>",
            system_pre: "<|start_header_id|>system<|end_header_id|>\n\n",
            system_post: "<|eot_id|>",
            user_pre: "<|start_header_id|>user<|end_header_id|>\n\n",
            user_post: "<|eot_id|>",
            assistant_pre: "<|start_header_id|>assistant<|end_header_id|>\n\n",
            assistant_post: "<|eot_id|>",
            end: "<|start_header_id|>assistant<|end_header_id|>\n\n",
        };

        /// Defines the prompt format used by Command-R language models.
      metadata: {}
    - page_content: |-
        const COMMAND_R_PROMPT_FORMAT: PromptFormat<'_> = PromptFormat {
            begin: "",
            system_pre: "<|START_OF_TURN_TOKEN|><|SYSTEM_TOKEN|>",
            system_post: "<|END_OF_TURN_TOKEN|>",
            user_pre: "<|START_OF_TURN_TOKEN|><|USER_TOKEN|>",
            user_post: "<|END_OF_TURN_TOKEN|>",
            assistant_pre: "<|START_OF_TURN_TOKEN|><|CHATBOT_TOKEN|>",
            assistant_post: "<|END_OF_TURN_TOKEN|>",
            end: "<|START_OF_TURN_TOKEN|><|CHATBOT_TOKEN|>",
        };

        /// Defines the prompt format used by Qwen language models.
      metadata: {}
    - page_content: |-
        const QWEN_PROMPT_FORMAT: PromptFormat<'_> = PromptFormat {
            begin: "",
            system_pre: "<|im_start|>system\n",
            system_post: "<|im_end|>",
            user_pre: "<|im_start|>user\n",
            user_post: "<|im_end|>",
            assistant_pre: "<|im_start|>assistant\n",
            assistant_post: "<|im_end|>",
            end: "<|im_start|>assistant\n",
        };
      metadata: {}
    - page_content: |-
        impl Chat {
            /// Converts a chat conversation into a formatted prompt string for language models
            ///
            /// # Arguments
            ///
            /// * `self` - The Chat instance containing the conversation messages
            /// * `tools` - Optional vector of Tool instances that can be called by the model
            /// * `model` - String identifier for the language model to format the prompt for
            ///
            /// # Returns
            ///
            /// Returns a Prompt instance containing the formatted conversation text with appropriate
            /// model-specific formatting and any tool definitions
            pub fn to_prompt<'a>(self, tools: Option<Vec<Tool>>, model: &str) -> Prompt<'a> {
                let format = if model.to_lowercase().contains("anthropic") {
                    ANTHROPIC_PROMPT_FORMAT
                } else if model.to_lowercase().contains("mistral") {
                    MISTRAL_PROMPT_FORMAT
                } else if model.to_lowercase().contains("llama3") {
                    LLAMA3_PROMPT_FORMAT
      metadata: {}
    - page_content: |-
        LLAMA3_PROMPT_FORMAT
                } else if model.to_lowercase().contains("command") {
                    COMMAND_R_PROMPT_FORMAT
                } else if model.to_lowercase().contains("qwen") {
                    QWEN_PROMPT_FORMAT
                } else if model.to_lowercase().contains("anthropic") {
                    ANTHROPIC_PROMPT_FORMAT
                } else {
                    PromptFormat::default()
                };
      metadata: {}
    - page_content: |-
        let pre_tools: &str = r###"
        # Tools

        You may call one or more functions to assist with the user query

        You are provided with available function signatures within <tools></tools> XML tags:
        <tools>
        "###;
                let post_tools: &str = r###"
        </tools>
        # Tool Calls

        For each tool call, return a json object with function name and arguments within \<tool_call\>\</tool_call\> XML tags:"
        \<tool_call\>{"name": <function-name>, "arguments": <args-json-object>}\</tool_call\>
        "###;
      metadata: {}
    - page_content: |-
        let mut tools_message = String::new();
                if let Some(tools) = &tools {
                    tools_message.push_str(pre_tools);
                    for tool in tools {
                        tools_message.push_str(&serde_json::to_string_pretty(tool).unwrap());
                    }
                    tools_message.push_str(post_tools);
                }
                let mut output = String::new();
                output.push_str(format.begin);
                for (i, message) in self.0.iter().enumerate() {
                    match (i, message) {
                        (0, Message::System { content }) => {
                            output.push_str(format.system_pre);
                            if content.is_empty() {
                                output.push_str("You are a helpful assistant.\n");
                            } else {
                                output.push_str(&format!("{}\n", content));
                            }
                            output.push_str(&tools_message);
                            output.push_str(format.system_post);
                        }
      metadata: {}
    - page_content: |-
        }
                        (_, Message::User { content }) => {
                            if i == 0 {
                                output.push_str(&format!(
                                    "{}You are a helpful assistant.\n{}{}\n",
                                    format.system_pre, &tools_message, format.system_post
                                ))
                            }
                            output.push_str(&format!(
                                "{}{}\n{}\n",
                                format.user_pre, content, format.user_post
                            ));
                        }
      metadata: {}
    - page_content: |-
        (
                            _,
                            Message::Assistant {
                                content,
                                tool_calls,
                            },
                        ) if i > 0 => {
                            output.push_str(format.assistant_pre);
                            match (content, tool_calls) {
                                (Some(c), None) => output.push_str(&c.to_string()),
                                (None, Some(t)) => {
                                    for tool_call in t {
                                        let ToolCall::Function { function, .. } = tool_call;
                                        output.push_str(&format!(
                                            "<tool_call>\n{}\n</tool_call>",
                                            serde_json::to_string(function).unwrap()
                                        ));
                                    }
                                }
                                // Maybe this is unreachable? Depends on the provider never answering like this.
      metadata: {}
    - page_content: |-
        (Some(c), Some(t)) => {
                                    output.push_str(&c.to_string());
                                    for tool_call in t {
                                        let ToolCall::Function { function, .. } = tool_call;
                                        output.push_str(&format!(
                                            "<tool_call>\n{}\n</tool_call>",
                                            serde_json::to_string(function).unwrap()
                                        ));
                                    }
                                }
                                (None, None) => {}
                            }
                            output.push_str(format.assistant_post);
                        }
                        (_, Message::Tool { content, .. }) if i > 0 => {
                            // Check if previous message was not a tool
                            if !matches!(self.0.get(i - 1), Some(Message::Tool { .. })) {
                                output.push_str(format.user_pre);
                            }
      metadata: {}
    - page_content: |-
        output.push_str("\n<tool_response>\n");
                            output.push_str(&content.to_string());
                            output.push_str("\n</tool_response>");

                            // Check if next message is not a tool
                            if i == self.0.len() - 1
                                || !matches!(self.0.get(i + 1), Some(Message::Tool { .. }))
                            {
                                output.push_str(format.user_post);
                            }
                        }
                        (_, _) => {
                            eprintln!(
                                "Message {:?} not in the expected position (found at index {})",
                                message, i
                            );
                        }
                    }
                }
                output.push_str(format.end);
                Prompt::from(Cow::Owned(output))
            }
        }
      metadata: {}
  1:
    hash: 26a507879d1590353061cc8dfbb406832e90af531f5565bb2fbcb36db7a2c53d
    path: /data/data/com.termux/files/home/projects/straico-client/src/client.rs
    documents:
    - page_content: |-
        use anyhow::Result;
        use futures::TryFutureExt;
        use reqwest::{Client, RequestBuilder, Response};
        use serde::{Deserialize, Serialize};
        use std::{fmt::Display, future::Future, marker::PhantomData};

        #[cfg(feature = "file")]
        use crate::endpoints::file::{FileData, FileRequest};
        #[cfg(feature = "file")]
        use reqwest::multipart::Form;
        #[cfg(feature = "file")]
        use std::path::Path;

        #[cfg(feature = "image")]
        use crate::endpoints::image::{ImageData, ImageRequest};

        #[cfg(feature = "model")]
        use crate::endpoints::model::ModelData;

        #[cfg(feature = "user")]
        use crate::endpoints::user::UserData;

        #[cfg(feature = "rag")]
        use crate::endpoints::rag::{RagRequest, RagResponse};

        use crate::endpoints::{
            completion::completion_request::CompletionRequest,
            completion::completion_response::CompletionData, ApiResponseData,
        };

        #[cfg(any(feature = "model", feature = "user"))]
        use crate::GetEndpoint;

        use crate::PostEndpoint;
      metadata: {}
    - page_content: |-
        use crate::PostEndpoint;

        /// Represents the state where no API key has been set for the request
        pub struct NoApiKey;
        /// Represents the state where an API key has been set for the request
        pub struct ApiKeySet;
        /// Represents the state where a payload has been set for the request
        pub struct PayloadSet;

        /// Builder for making requests to Straico API endpoints
        ///
        /// # Type Parameters
        ///
        /// * `Api` - Represents the authentication state (NoApiKey or ApiKeySet)
        /// * `Payload` - Represents the request payload state
        /// * `Response` - The expected response type from the API
        pub struct StraicoRequestBuilder<Api, Payload, Response>(
            RequestBuilder,
            PhantomData<Response>,
            PhantomData<Payload>,
            PhantomData<Api>,
        );
      metadata: {}
    - page_content: |-
        //impl Into<StraicoClient> for Client {
        //    /// Converts a reqwest::Client into a StraicoClient
        //    ///
        //    /// # Returns
        //    ///
        //    /// A new StraicoClient wrapping the provided reqwest::Client
        //    fn into(self) -> StraicoClient {
        //        StraicoClient(self)
        //    }
        //}

        impl From<Client> for StraicoClient {
            fn from(value: Client) -> Self {
                StraicoClient(value)
            }
        }

        /// A client for interacting with the Straico API
        ///
        /// Wraps a reqwest::Client and provides convenient methods for making API requests.
        /// Can be created using `StraicoClient::new()` or by converting a reqwest::Client
        /// using `Into<StraicoClient>`.
        #[derive(Clone, Default)]
        pub struct StraicoClient(Client);
      metadata: {}
    - page_content: |-
        impl StraicoClient {
            /// Creates a new instance of StraicoClient with default configuration
            ///
            /// This is a convenience constructor that creates a new reqwest::Client with default settings
            /// and converts it into a StraicoClient.
            ///
            /// # Returns
            ///
            /// A new StraicoClient instance ready to make API requests
            pub fn new() -> StraicoClient {
                StraicoClient::default()
            }

            /// Creates a request builder for the completion endpoint
            ///
            /// # Returns
            ///
            /// A `StraicoRequestBuilder` configured for making completion requests
            pub fn completion<'a>(
                self,
            ) -> StraicoRequestBuilder<NoApiKey, CompletionRequest<'a>, CompletionData> {
                self.0.post(PostEndpoint::Completion.as_ref()).into()
            }
      metadata: {}
    - page_content: |-
        /// Creates a request builder for the image generation endpoint
            ///
            /// # Returns
            ///
            /// A `StraicoRequestBuilder` configured for making image generation requests
            #[cfg(feature = "image")]
            pub fn image(self) -> StraicoRequestBuilder<NoApiKey, ImageRequest, ImageData> {
                self.0.post(PostEndpoint::Image.as_ref()).into()
            }

            /// Creates a request builder for the file upload endpoint
            ///
            /// # Returns
            ///
            /// A `StraicoRequestBuilder` configured for making file upload requests
            #[cfg(feature = "file")]
            pub fn file(self) -> StraicoRequestBuilder<NoApiKey, FileRequest, FileData> {
                self.0.post(PostEndpoint::File.as_ref()).into()
            }
      metadata: {}
    - page_content: |-
        /// Creates a request builder for fetching available models
            ///
            /// # Returns
            ///
            /// A `StraicoRequestBuilder` configured for retrieving model information
            #[cfg(feature = "model")]
            pub fn models(self) -> StraicoRequestBuilder<NoApiKey, PayloadSet, ModelData> {
                self.0.get(GetEndpoint::Models.as_ref()).into()
            }

            /// Creates a request builder for fetching user information
            ///
            /// # Returns
            ///
            /// A `StraicoRequestBuilder` configured for retrieving user data
            #[cfg(feature = "user")]
            pub fn user(self) -> StraicoRequestBuilder<NoApiKey, PayloadSet, UserData> {
                self.0.get(GetEndpoint::User.as_ref()).into()
            }

            #[cfg(feature = "rag")]
            pub fn create_rag(self) -> StraicoRequestBuilder<NoApiKey, RagRequest, RagResponse> {
                    todo!()
                }
        }
      metadata: {}
    - page_content: |-
        impl<T, U> StraicoRequestBuilder<NoApiKey, T, U> {
            /// Sets the Bearer authentication token (API key) for this request
            ///
            /// # Arguments
            ///
            /// * `api_key` - The API key to use for authentication. Must implement Display trait.
            ///
            /// # Returns
            ///
            /// A new StraicoRequestBuilder with the ApiKeySet state, preserving the payload and response types
            pub fn bearer_auth<K: Display>(self, api_key: K) -> StraicoRequestBuilder<ApiKeySet, T, U> {
                self.0.bearer_auth(api_key).into()
            }
        }
      metadata: {}
    - page_content: |-
        #[cfg(feature = "file")]
        type FormResult<T> = Result<StraicoRequestBuilder<T, PayloadSet, FileData>>;
        #[cfg(feature = "file")]
        impl<T> StraicoRequestBuilder<T, FileRequest, FileData> {
            /// Creates a multipart form request for file upload
            ///
            /// # Arguments
            ///
            /// * `file` - The path to the file to upload, can be any type implementing AsRef<Path>
            ///
            /// # Returns
            ///
            /// A Result containing a new StraicoRequestBuilder configured with the multipart form,
            /// or an error if file creation fails
            pub async fn multipart<U: AsRef<Path>>(self, file: U) -> FormResult<T> {
                let form = Form::new().file("file", file).await?;
                Ok(self.0.multipart(form).into())
            }
        }
      metadata: {}
    - page_content: |-
        impl<K, T: Serialize, V> StraicoRequestBuilder<K, T, V> {
            /// Sets the JSON payload for the request
            ///
            /// # Arguments
            ///
            /// * `payload` - The payload to serialize as JSON. Must implement Into<T> where T is the expected payload type.
            ///
            /// # Returns
            ///
            /// A new StraicoRequestBuilder with the PayloadSet state, preserving the API key and response types
            pub fn json<U: Into<T>>(self, payload: U) -> StraicoRequestBuilder<K, PayloadSet, V> {
                self.0.json(&payload.into()).into()
            }
        }
      metadata: {}
    - page_content: |-
        impl<V: for<'a> Deserialize<'a>> StraicoRequestBuilder<ApiKeySet, PayloadSet, V> {
            /// Sends the configured request to the API and deserializes the JSON response
            ///
            /// This method will send the HTTP request that has been configured with authentication
            /// and payload (if applicable), then attempt to parse the response as JSON into
            /// the expected response type.
            ///
            /// # Returns
            ///
            /// A Future that resolves to a Result containing either:
            /// - The deserialized API response data of type `ApiResponseData<V>`
            /// - A reqwest error if the request fails or JSON parsing fails
            pub fn send(self) -> impl Future<Output = reqwest::Result<ApiResponseData>> {
                self.0.send().and_then(Response::json)
            }
        }
      metadata: {}
    - page_content: |-
        impl<T, U, V> From<RequestBuilder> for StraicoRequestBuilder<T, U, V> {
            /// Converts a RequestBuilder into a StraicoRequestBuilder
            ///
            /// This implementation allows for easy conversion from reqwest's RequestBuilder
            /// into our typed StraicoRequestBuilder while preserving type information.
            ///
            /// # Arguments
            ///
            /// * `value` - The RequestBuilder to convert
            ///
            /// # Returns
            ///
            /// A new StraicoRequestBuilder wrapping the provided RequestBuilder with appropriate type parameters
            fn from(value: RequestBuilder) -> Self {
                StraicoRequestBuilder(value, PhantomData, PhantomData, PhantomData)
            }
        }
      metadata: {}
  2:
    hash: 7382af69956aea3f9805413f23f232d7ede5530c21a0bdf38c13092789a0157b
    path: /data/data/com.termux/files/home/projects/straico-client/src/endpoints.rs
    documents:
    - page_content: |-
        pub mod completion;
        #[cfg(feature = "file")]
        pub mod file;
        #[cfg(feature = "image")]
        pub mod image;
        #[cfg(feature = "model")]
        pub mod model;
        #[cfg(feature = "user")]
        pub mod user;
        #[cfg(feature = "rag")]
        pub mod rag;

        use anyhow::Result;
        use serde::{Deserialize, Serialize};
      metadata: {}
    - page_content: |-
        /// A container for API response data
        ///
        /// # Fields
        ///
        /// * `data` - The response payload, containing one of several possible response types (if successful)
        /// * `error` - An error message string (if unsuccessful)
        /// * `success` - A boolean indicating whether the API call was successful
        #[derive(Deserialize, Serialize, Debug)]
        pub struct ApiResponseData {
            /// The response payload, containing one of several possible response types
            #[serde(skip_serializing_if = "Option::is_none")]
            data: Option<ResponseType>,
            /// An error message if the request was unsuccessful
            #[serde(skip_serializing_if = "Option::is_none")]
            error: Option<String>,
            /// A boolean indicating whether the API call was successful
            success: bool,
        }
      metadata: {}
    - page_content: |-
        /// An enum representing different types of API responses
        ///
        /// # Variants
        ///
        /// * `Completion` - Contains completion response data
        /// * `File` - Contains file data (skipped during serialization)
        /// * `Image` - Contains image data (skipped during serialization)
        /// * `Model` - Contains model data (skipped during serialization)
        /// * `User` - Contains user data (skipped during serialization)
        #[derive(Deserialize, Serialize, Debug)]
        #[serde(untagged)]
        pub enum ResponseType {
            /// Contains completion data returned from completion API calls
            Completion(completion::completion_response::CompletionData),
            /// Contains file data, skipped during serialization
            #[cfg(feature = "file")]
            #[serde(skip_serializing)]
            File(file::FileData),
            /// Contains image data, skipped during serialization
            #[cfg(feature = "image")]
            #[serde(skip_serializing)]
            Image(image::ImageData),
            /// Contains model data, skipped during serialization
            #[cfg(feature = "model")]
      metadata: {}
    - page_content: |-
        #[cfg(feature = "model")]
            #[serde(skip_serializing)]
            Model(model::ModelData),
            /// Contains user data, skipped during serialization
            #[cfg(feature = "user")]
            #[serde(skip_serializing)]
            User(user::UserData),
        }
      metadata: {}
    - page_content: |-
        impl ApiResponseData {
            /// Extracts the completion data from the API response
            ///
            /// # Returns
            ///
            /// * `Ok(Completion)` - The completion data if the API call was successful
            /// * `Err` - The error message if the API call failed
            ///
            /// # Errors
            ///
            /// Returns an error if:
            /// * The API call failed and returned an error message
            /// * The response data was not of type Completion
            pub fn get_completion(self) -> Result<completion::completion_response::Completion> {
                match self {
                    ApiResponseData {
                        data: Some(ResponseType::Completion(data)),
                        ..
                    } => Ok(data.get_completion()),
                    ApiResponseData {
                        error: Some(err), ..
                    } => Err(anyhow::Error::msg(err)),
                    _ => unreachable!(),
                }
            }
        }
      metadata: {}
  3:
    hash: 42ecdcb8ae9990b8de89f41c11efdfe6a401e31fc58e08b1dfde86baf461cb15
    path: /data/data/com.termux/files/home/projects/straico-client/src/endpoints/completion.rs
    documents:
    - page_content: |-
        pub mod completion_request;
        pub mod completion_response;
      metadata: {}
  4:
    hash: ae9ee8db0c28ce9b6e5d7b082021536b019d96b7d5c2873de21613f6ee64131f
    path: /data/data/com.termux/files/home/projects/straico-client/src/endpoints/completion/completion_request.rs
    documents:
    - page_content: |-
        use serde::Serialize;
        use std::borrow::Cow;
      metadata: {}
    - page_content: |-
        /// A request structure for generating text completions.
        ///
        /// This struct represents a request to generate text completions with configurable parameters
        /// such as model selection, input prompt, and various optional settings. It is designed to be
        /// constructed using the builder pattern via `CompletionRequest::new()`.
        ///
        /// # Fields
        /// * `models` - The language model(s) to use for generating completions
        /// * `message` - The input prompt text to generate completions from
        /// * `file_urls` - Optional list of file URLs to provide as context
        /// * `youtube_urls` - Optional list of YouTube URLs to provide as context
        /// * `display_transcripts` - Optional flag to control transcript display
        /// * `temperature` - Optional parameter controlling randomness in generation (0.0 to 1.0)
        /// * `max_tokens` - Optional maximum number of tokens to generate
        #[derive(Serialize)]
        pub struct CompletionRequest<'a> {
      metadata: {}
    - page_content: |-
        pub struct CompletionRequest<'a> {
            /// The language model(s) to use for generating completions, accepts up to 4 models
            models: RequestModels<'a>,
            /// The input prompt text to generate completions from
            message: Prompt<'a>,
            /// Optional list of file URLs to provide as context
            #[serde(skip_serializing_if = "Option::is_none")]
            file_urls: Option<Vec<&'a str>>,
            /// Optional list of YouTube URLs to provide as context
            #[serde(skip_serializing_if = "Option::is_none")]
            youtube_urls: Option<Vec<&'a str>>,
            /// Optional flag to control transcript display
            #[serde(skip_serializing_if = "Option::is_none")]
            display_transcripts: Option<bool>,
            /// Optional parameter controlling randomness in generation (0.0 to 2.0)
            #[serde(skip_serializing_if = "Option::is_none")]
            temperature: Option<f32>,
            /// Optional maximum number of tokens to generate
            #[serde(skip_serializing_if = "Option::is_none")]
            max_tokens: Option<u32>,
        }
      metadata: {}
    - page_content: |-
        #[derive(Serialize, Clone)]
        /// A newtype wrapper around `Cow<'a, str>` representing a prompt message for a completion request.
        ///
        /// This struct encapsulates the actual text content of the prompt that will be used to generate
        /// completions. It can hold either borrowed or owned string data through the `Cow` type.
        pub struct Prompt<'a>(Cow<'a, str>);

        impl<'a> From<Cow<'a, str>> for Prompt<'a> {
            /// Converts from `Cow<'a, str>` into a `Prompt<'a>`.
            ///
            /// This implementation allows us to create a `Prompt` from either a borrowed
            /// or owned string through the `Cow` type.
            ///
            /// # Arguments
            /// * `value` - A `Cow` containing either a borrowed or owned string
            ///
            /// # Returns
            /// A new `Prompt` wrapping the provided `Cow` value
            fn from(value: Cow<'a, str>) -> Self {
                Prompt(value)
            }
        }
      metadata: {}
    - page_content: |-
        impl<'a> From<&'a str> for Prompt<'a> {
            /// Converts a string reference into a `Prompt<'a>`.
            ///
            /// This implementation allows creating a `Prompt` directly from a string reference,
            /// by converting it to a borrowed `Cow` internally.
            ///
            /// # Arguments
            /// * `value` - A string reference to convert into a prompt
            ///
            /// # Returns
            /// A new `Prompt` containing the provided string reference
            fn from(value: &'a str) -> Self {
                Prompt(Cow::Borrowed(value))
            }
        }
      metadata: {}
    - page_content: |-
        impl AsRef<str> for Prompt<'_> {
            /// Implements the `AsRef<str>` trait for `Prompt`, allowing borrowing of the underlying string.
            ///
            /// This implementation provides a way to get a string slice reference from a `Prompt` instance,
            /// making it easier to use `Prompt` values in contexts that expect string references.
            ///
            /// # Returns
            /// A string slice referencing the underlying prompt text
            fn as_ref(&self) -> &str {
                let Prompt(x) = self;
                x
            }
        }
      metadata: {}
    - page_content: |-
        /// A tuple struct representing the list of language models to use for completion generation.
        ///
        /// This struct can hold up to four optional model identifiers, where each model is represented
        /// as a `Cow<str>` that can contain either borrowed or owned string data. The struct uses
        /// `serde`'s `skip_serializing_if` to omit any None values during serialization.
        ///
        /// The four slots allow for requesting completions from multiple models in parallel, though
        /// not all slots need to be filled. Typically only the first slot is used with a single model.
        #[derive(Serialize)]
        pub struct RequestModels<'a>(
            #[serde(skip_serializing_if = "Option::is_none")] Option<Cow<'a, str>>,
            #[serde(skip_serializing_if = "Option::is_none")] Option<Cow<'a, str>>,
            #[serde(skip_serializing_if = "Option::is_none")] Option<Cow<'a, str>>,
            #[serde(skip_serializing_if = "Option::is_none")] Option<Cow<'a, str>>,
        );
      metadata: {}
    - page_content: |-
        impl Default for RequestModels<'_> {
            /// Provides a default configuration for the language model request.
            ///
            /// The default configuration uses only the GPT-3.5 Turbo model (version 0125),
            /// with no additional model slots allocated. This provides a sensible starting
            /// point for basic completion requests while still allowing for customization
            /// if needed.
            ///
            /// # Returns
            /// A new `RequestModels` instance configured with the default GPT-3.5 Turbo model
            fn default() -> Self {
                Self(
                    Some(Cow::Borrowed("openai/gpt-3.5-turbo-0125")),
                    None,
                    None,
                    None,
                )
            }
        }
      metadata: {}
    - page_content: |-
        impl<'a, const N: usize> From<[&'a str; N]> for RequestModels<'a>
        where
            [(); N]: Max4,
        {
            /// Converts an array of string references into a `RequestModels` instance.
            ///
            /// This implementation allows creating a `RequestModels` from an array of string references
            /// with length N (where N ≤ 4), converting each string reference into a `Cow::Borrowed`
            /// option. Unused slots are set to `None`.
            ///
            /// # Arguments
            /// * `arr` - An array of string references of length N (1 to 4)
            ///
            /// # Returns
            /// A new `RequestModels` instance containing up to 4 borrowed string references
            fn from(arr: [&'a str; N]) -> Self {
                let [a, b, c, d] = std::array::from_fn(|i| arr.get(i).map(|x| Cow::Borrowed(*x)));
                Self(a, b, c, d)
            }
        }

        trait Max4 {}
        impl Max4 for [(); 1] {}
        impl Max4 for [(); 2] {}
        impl Max4 for [(); 3] {}
        impl Max4 for [(); 4] {}
      metadata: {}
    - page_content: |-
        impl<'a> From<&'a str> for RequestModels<'a> {
            /// Converts a string reference into a `RequestModels` instance.
            ///
            /// This implementation creates a single-model `RequestModels` by wrapping the provided
            /// string reference in a single-element array and converting it using the array
            /// implementation of `From`.
            ///
            /// # Arguments
            /// * `value` - A string reference representing the model to use
            ///
            /// # Returns
            /// A new `RequestModels` instance containing a single borrowed string reference
            fn from(value: &'a str) -> Self {
                [value; 1].into()
            }
        }
      metadata: {}
    - page_content: |-
        impl<'a> From<Cow<'a, str>> for RequestModels<'a> {
            /// Converts a `Cow<str>` into a `RequestModels` instance.
            ///
            /// This implementation creates a single-model `RequestModels` using the provided
            /// Cow string value in the first slot, with remaining slots set to None.
            ///
            /// # Arguments
            /// * `value` - A `Cow` string value representing the model to use
            ///
            /// # Returns
            /// A new `RequestModels` instance containing a single model specification
            fn from(value: Cow<'a, str>) -> Self {
                RequestModels(Some(value), None, None, None)
            }
        }

        /// A placeholder struct indicating that models have not been set in the builder.
        ///
        /// This struct is used as a type parameter in `CompletionRequestBuilder` to track
        /// whether the required models have been configured during the building process.
        /// It implements `Default` to support builder initialization.
        #[derive(Default)]
        pub struct ModelsNotSet;
      metadata: {}
    - page_content: |-
        /// A placeholder struct indicating that a message has not been set in the builder.
        ///
        /// This struct is used as a type parameter in `CompletionRequestBuilder` to track
        /// whether the required message has been configured during the building process.
        /// It implements `Default` to support builder initialization.
        #[derive(Default)]
        pub struct MessageNotSet;

        /// Type alias representing a message that has been set in the builder.
        ///
        /// This alias maps to `Prompt<'a>` and is used as a type parameter to indicate
        /// that the message requirement has been satisfied.
        type MessageSet<'a> = Prompt<'a>;

        /// Type alias representing models that have been set in the builder.
        ///
        /// This alias maps to `RequestModels<'a>` and is used as a type parameter to indicate
        /// that the models requirement has been satisfied.
        type ModelsSet<'a> = RequestModels<'a>;
      metadata: {}
    - page_content: |-
        /// A builder type for constructing `CompletionRequest` instances.
        ///
        /// This struct uses generic type parameters T and K to track the status of required
        /// fields (models and message) during the building process. The type parameters
        /// will be either `ModelsNotSet`/`MessageNotSet` or `ModelsSet`/`MessageSet`
        /// depending on whether those required fields have been configured.
        ///
        /// # Type Parameters
        /// * `'a` - The lifetime of string references used in the request
        /// * `T` - Type indicating whether models have been set (ModelsNotSet or ModelsSet)
        /// * `K` - Type indicating whether message has been set (MessageNotSet or MessageSet)
        ///
        /// # Fields
        /// * `models` - The language model(s) configuration
        /// * `message` - The prompt message for completion
        /// * `file_urls` - Optional list of file URLs to provide context
        /// * `youtube_urls` - Optional list of YouTube URLs to provide context
        /// * `display_transcripts` - Optional flag to control transcript display
      metadata: {}
    - page_content: |-
        /// * `temperature` - Optional parameter for generation randomness (0.0 to 2.0)
        /// * `max_tokens` - Optional maximum number of tokens to generate
        #[derive(Default)]
        pub struct CompletionRequestBuilder<'a, T, K> {
            models: T,
            message: K,
            file_urls: Option<Vec<&'a str>>,
            youtube_urls: Option<Vec<&'a str>>,
            display_transcripts: Option<bool>,
            temperature: Option<f32>,
            max_tokens: Option<u32>,
        }
      metadata: {}
    - page_content: |-
        impl<'a> CompletionRequest<'a> {
            /// Creates a new `CompletionRequestBuilder` with default values.
            ///
            /// This is the starting point for constructing a `CompletionRequest` using the builder pattern.
            /// The builder starts with no models or message set, which must be provided using the `models()`
            /// and `message()` methods before building.
            ///
            /// # Returns
            /// A `CompletionRequestBuilder` with default values and no models or message set.
            #[allow(clippy::new_ret_no_self)]
            pub fn new() -> CompletionRequestBuilder<'a, ModelsNotSet, MessageNotSet> {
                CompletionRequestBuilder::default()
            }
        }
      metadata: {}
    - page_content: |-
        impl<'a, T> CompletionRequestBuilder<'a, ModelsNotSet, T> {
            /// Sets the models for the completion request.
            ///
            /// Takes any type that can be converted into `RequestModels`, such as:
            /// - A single model string (&str)
            /// - An array of model strings ([&str; N] where N <= 4)
            /// - A `Cow<str>` containing a model string
            ///
            /// # Arguments
            /// * `models` - The model or models to use for completion
            ///
            /// # Returns
            /// A new `CompletionRequestBuilder` with the models set
            pub fn models<M>(self, models: M) -> CompletionRequestBuilder<'a, ModelsSet<'a>, T>
            where
                M: Into<RequestModels<'a>>,
            {
                CompletionRequestBuilder {
                    models: models.into(),
                    file_urls: self.file_urls,
                    youtube_urls: self.youtube_urls,
                    display_transcripts: self.display_transcripts,
                    temperature: self.temperature,
                    max_tokens: self.max_tokens,
                    message: self.message,
      metadata: {}
    - page_content: |-
        message: self.message,
                }
            }
        }
      metadata: {}
    - page_content: |-
        impl<'a, T> CompletionRequestBuilder<'a, T, MessageNotSet> {
            /// Sets the message for the completion request.
            ///
            /// Takes any type that can be converted into `Prompt`, such as a string reference
            /// or `Cow<str>`.
            ///
            /// # Arguments
            /// * `message` - The message prompt to send for completion
            ///
            /// # Returns
            /// A new `CompletionRequestBuilder` with the message set
            pub fn message<M>(self, message: M) -> CompletionRequestBuilder<'a, T, MessageSet<'a>>
            where
                M: Into<Prompt<'a>>,
            {
                CompletionRequestBuilder {
                    models: self.models,
                    message: message.into(),
                    file_urls: self.file_urls,
                    youtube_urls: self.youtube_urls,
                    display_transcripts: self.display_transcripts,
                    temperature: self.temperature,
                    max_tokens: self.max_tokens,
                }
            }
        }
      metadata: {}
    - page_content: |-
        impl<'a, T, K> CompletionRequestBuilder<'a, T, K> {
            /// Sets the file URLs for the completion request.
            ///
            /// # Arguments
            /// * `file_urls` - A slice of string references containing file URLs to include
            ///
            /// # Returns
            /// The builder with file URLs set
            pub fn file_urls(mut self, file_urls: &[&'a str]) -> Self {
                let _ = self.file_urls.insert(file_urls.into());
                self
            }

            /// Sets the YouTube URLs for the completion request.
            ///
            /// # Arguments
            /// * `youtube_urls` - A slice of string references containing YouTube URLs to include
            ///
            /// # Returns
            /// The builder with YouTube URLs set
            pub fn youtube_urls(mut self, youtube_urls: &[&'a str]) -> Self {
                let _ = self.youtube_urls.insert(youtube_urls.into());
                self
            }
      metadata: {}
    - page_content: |-
        /// Sets whether to display transcripts in the completion request.
            ///
            /// # Arguments
            /// * `display_transcripts` - Boolean indicating whether to display transcripts
            ///
            /// # Returns
            /// The builder with display_transcripts preference set
            pub fn display_transcripts(mut self, display_transcripts: bool) -> Self {
                let _ = self.display_transcripts.insert(display_transcripts);
                self
            }

            /// Sets the temperature parameter for the completion request.
            ///
            /// # Arguments
            /// * `temperature` - A float value controlling randomness in the response
            ///
            /// # Returns
            /// The builder with temperature set
            pub fn temperature(mut self, temperature: f32) -> Self {
                let _ = self.temperature.insert(temperature);
                self
            }
      metadata: {}
    - page_content: |-
        /// Sets the maximum number of tokens for the completion request.
            ///
            /// # Arguments
            /// * `max_tokens` - The maximum number of tokens to generate
            ///
            /// # Returns
            /// The builder with max_tokens set
            pub fn max_tokens(mut self, max_tokens: u32) -> CompletionRequestBuilder<'a, T, K> {
                self.max_tokens = Some(max_tokens);
                self
            }
        }
      metadata: {}
    - page_content: |-
        impl<'a> CompletionRequestBuilder<'a, ModelsSet<'a>, MessageSet<'a>> {
            /// Builds the final `CompletionRequest` from the builder.
            ///
            /// This method can only be called once both the models and message have been set through
            /// the builder pattern. It consumes the builder and returns a fully constructed
            /// `CompletionRequest` with all configured options.
            ///
            /// # Returns
            /// A new `CompletionRequest` instance with all the settings specified in the builder.
            pub fn build(self) -> CompletionRequest<'a> {
                CompletionRequest {
                    models: self.models,
                    message: self.message,
                    file_urls: self.file_urls,
                    youtube_urls: self.youtube_urls,
                    display_transcripts: self.display_transcripts,
                    temperature: self.temperature,
                    max_tokens: self.max_tokens,
                }
            }
        }
      metadata: {}
    - page_content: |-
        impl<'a> CompletionRequest<'a> {
            /// Returns the maximum number of tokens configured for this completion request.
            ///
            /// # Returns
            /// An `Option` containing a reference to the maximum tokens limit if set,
            /// or `None` if no limit was configured.
            pub fn get_max_tokens(&self) -> Option<&u32> {
                self.max_tokens.as_ref()
            }

            /// Returns the temperature setting for this completion request.
            ///
            /// Temperature controls the randomness of the generated responses, where higher values
            /// (e.g., 0.8) lead to more random outputs and lower values (e.g., 0.2) make the responses
            /// more focused and deterministic.
            ///
            /// # Returns
            /// An `Option` containing a reference to the temperature value if set,
            /// or `None` if no temperature was configured.
            pub fn get_temperature(&self) -> Option<&f32> {
                self.temperature.as_ref()
            }
      metadata: {}
    - page_content: |-
        /// Returns whether transcript display is enabled for this completion request.
            ///
            /// # Returns
            /// An `Option` containing a reference to the display transcript setting if set,
            /// or `None` if the setting was not configured.
            pub fn get_display_transcripts(&self) -> Option<&bool> {
                self.display_transcripts.as_ref()
            }

            /// Returns the list of file URLs associated with this completion request.
            ///
            /// # Returns
            /// An `Option` containing a reference to the vector of file URLs if any were set,
            /// or `None` if no file URLs were configured.
            pub fn get_file_urls(&self) -> Option<&Vec<&'a str>> {
                self.file_urls.as_ref()
            }
      metadata: {}
    - page_content: |-
        /// Returns the list of YouTube URLs associated with this completion request.
            ///
            /// # Returns
            /// An `Option` containing a reference to the vector of YouTube URLs if any were set,
            /// or `None` if no YouTube URLs were configured.
            pub fn get_youtube_urls(&self) -> Option<&Vec<&'a str>> {
                self.youtube_urls.as_ref()
            }
        }
      metadata: {}
  5:
    hash: ecee44060f01810ba01edc2c153584bfceb4a67e7e5e8cd3e6dc462e2db5a971
    path: /data/data/com.termux/files/home/projects/straico-client/src/endpoints/completion/completion_response.rs
    documents:
    - page_content: |-
        use std::fmt;
        use anyhow::Result;
        use serde::{Deserialize, Serialize};
        use serde_json::Value;
        use std::collections::HashMap;
      metadata: {}
    - page_content: |-
        /// Represents a collection of completion data with associated pricing and word count statistics.
        ///
        /// This struct aggregates completion results along with total price and word count information.
        ///
        /// # Fields
        /// * `completions` - A mapping of completion identifiers to their associated model data
        /// * `overall_price` - The total price breakdown for all completions
        /// * `overall_words` - The total word count statistics for all completions
        #[derive(Serialize, Deserialize, Debug)]
        pub struct CompletionData {
            /// A map of completion identifiers to their associated model data containing
            /// completion responses, pricing and word count information
            completions: HashMap<Box<str>, Model>,
            /// Price breakdown showing input, output and total costs across all completions
            overall_price: Price,
            /// Word count statistics showing input, output and total counts across all completions
            overall_words: Words,
        }
      metadata: {}
    - page_content: |-
        /// Represents the pricing breakdown for model usage.
        ///
        /// This struct tracks the costs associated with both input and output tokens,
        /// as well as the total combined price.
        ///
        /// # Fields
        /// * `input` - The cost for input/prompt tokens
        /// * `output` - The cost for output/completion tokens
        /// * `total` - The total combined cost of input and output
        #[derive(Serialize, Deserialize, Debug)]
        pub struct Price {
            /// Cost for input/prompt tokens
            input: f32,
            /// Cost for output/completion tokens
            output: f32,
            /// Total combined cost of input and output
            total: f32,
        }
      metadata: {}
    - page_content: |-
        /// Represents word count statistics for text processing.
        ///
        /// This struct tracks the number of words in input and output text,
        /// as well as maintaining a total word count.
        ///
        /// # Fields
        /// * `input` - The number of words in the input/prompt text
        /// * `output` - The number of words in the output/completion text
        /// * `total` - The total combined word count of input and output
        #[derive(Serialize, Deserialize, Debug)]
        pub struct Words {
            /// Number of words in the input/prompt text
            input: u32,
            /// Number of words in the output/completion text
            output: u32,
            /// Total combined word count from input and output
            total: u32,
        }
      metadata: {}
    - page_content: |-
        /// Represents a model's completion data along with associated pricing and word count metrics.
        ///
        /// This struct combines the completion response with pricing and word count statistics
        /// for a specific model interaction.
        ///
        /// # Fields
        /// * `completion` - The completion response containing choices, usage stats and metadata
        /// * `price` - The price breakdown for this model completion
        /// * `words` - Word count statistics for the input/output text
        #[derive(Serialize, Deserialize, Debug)]
        pub struct Model {
            /// The completion response containing choices, usage stats and metadata
            completion: Completion,
            /// Price breakdown showing input, output and total costs for this model completion
            price: Price,
            /// Word count statistics showing input, output and total counts for this model completion
            words: Words,
        }
      metadata: {}
    - page_content: |-
        /// Represents a completion response from a language model.
        ///
        /// This struct contains the generated outputs and metadata for a completion request,
        /// including multiple choices/responses, model information, and usage statistics.
        ///
        /// # Fields
        /// * `choices` - A vector of generated responses/completions
        /// * `object` - The type of object (e.g. "chat.completion")
        /// * `id` - Unique identifier for this completion
        /// * `model` - Name/identifier of the model used
        /// * `created` - Unix timestamp of when this completion was created
        /// * `usage` - Token usage statistics for this completion
        #[derive(Serialize, Deserialize, Debug, Clone)]
        pub struct Completion {
            /// Vector of generated response choices from the model
            pub choices: Vec<Choice>,
            /// The type/category of response object (e.g. "chat.completion")
            pub object: Box<str>,
            /// Unique identifier for this completion
            pub id: Box<str>,
            /// Name/identifier of the model used for generation
      metadata: {}
    - page_content: |-
        pub model: Box<str>,
            /// Unix timestamp of when this completion was created
            pub created: u64,
            /// Token usage statistics for this completion
            pub usage: Usage,
        }
      metadata: {}
    - page_content: |-
        /// Represents token usage statistics for a language model completion.
        ///
        /// This struct tracks the number of tokens used in the prompt, completion, and the total
        /// tokens consumed during the model interaction.
        ///
        /// # Fields
        /// * `prompt_tokens` - Number of tokens in the input/prompt text
        /// * `completion_tokens` - Number of tokens in the generated completion/output
        /// * `total_tokens` - Total combined token count (prompt + completion)
        #[derive(Serialize, Deserialize, Debug, Clone)]
        pub struct Usage {
            /// Number of tokens in the input/prompt text
            prompt_tokens: u32,
            /// Number of tokens in the generated completion/output
            completion_tokens: u32,
            /// Total combined token count (prompt + completion)
            total_tokens: u32,
        }
      metadata: {}
    - page_content: |-
        /// Represents a single generated choice/response from a language model completion.
        ///
        /// This struct contains details about a specific completion response, including the
        /// message content, its position in the list of choices, and why the completion stopped.
        ///
        /// # Fields
        /// * `message` - The actual response content and metadata
        /// * `index` - Zero-based position of this choice in the list of responses
        /// * `finish_reason` - Why the model stopped generating (e.g. "stop", "length", "tool_calls")
        #[derive(Serialize, Deserialize, Debug, Clone)]
        pub struct Choice {
            /// The message content and metadata for this choice
            pub message: Message,
            /// Zero-based position of this choice in the list of responses
            pub index: u8,
            /// Reason why the model stopped generating (e.g. "stop", "length", "tool_calls")
            pub finish_reason: Box<str>,
        }
      metadata: {}
    - page_content: |-
        /// Represents different types of messages in a conversation.
        ///
        /// This enum is used to differentiate between messages from different roles in a chat or
        /// conversation context. It supports serialization/deserialization with serde and uses
        /// the "role" field as a tag with lowercase values.
        #[derive(Serialize, Deserialize, Debug, Clone)]
        #[serde(tag = "role", rename_all = "lowercase")]
        pub enum Message {
            /// A message from a user, containing text content
            User { content: Content },
            /// A message from the AI assistant, which may contain text content and/or tool calls
            Assistant {
                content: Option<Content>,
                #[serde(skip_serializing_if = "Option::is_none")]
                tool_calls: Option<Vec<ToolCall>>,
            },
            /// A system message providing context or instructions
            System { content: Content },
            /// A message from a tool containing output or results
            Tool { content: Content },
        }
      metadata: {}
    - page_content: |-
        #[derive(Serialize, Deserialize, Debug, Clone)]
        #[serde(untagged)]
        pub enum Content {
            Text(Box<str>),
            TextArray(Vec<TextObject>),
        }

        #[derive(Serialize, Deserialize, Debug, Clone)]
        #[serde(tag = "type", rename_all = "lowercase")]
        pub enum TextObject {
            Text { text: Box<str> }
        }

        impl From<Content> for String {
            fn from(content: Content) -> Self {
                match content {
                    Content::Text(text) => text.to_string(),
                    Content::TextArray(text_array) => {
                        let mut result = String::new();
                        for text_object in text_array {
                            let TextObject::Text { text } = text_object;
                            result.push_str(&text);
                            result.push('\n');
                        }
                        result
                    }
                }
            }
        }
      metadata: {}
    - page_content: "impl Content {\n    pub fn is_empty(&self) -> bool {\n        match self {\n            Content::Text(text) => text.is_empty(),\n            Content::TextArray(text_array) => text_array.iter().all(|text_object| match text_object {\n                TextObject::Text { text } => text.is_empty(),\n            }),\n        }\n    }\n\n    pub fn find(&self, pattern: &str) -> Option<usize> {\n        match self {\n            Content::Text(text) => text.find(pattern),\n            Content::TextArray(text_array) => {\n                let mut result = String::new();\n                for text_object in text_array {\n                    let TextObject::Text { text } = text_object; \n                    result.push_str(text);\n                    result.push('\\n');\n                }\n                result.find(pattern)\n            }\n        }\n    }"
      metadata: {}
    - page_content: "pub fn replace(&self, pattern: &str, replacement: &str) -> String {\n        match self {\n            Content::Text(text) => text.replace(pattern, replacement),\n            Content::TextArray(text_array) => {\n                let mut result = String::new();\n                for text_object in text_array {\n                    let TextObject::Text { text } = text_object; \n                    result.push_str(text); \n                    result.push('\\n');\n                }\n                result.replace(pattern, replacement)\n            }\n        }\n    }\n}"
      metadata: {}
    - page_content: |-
        impl fmt::Display for Content {
            fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
                match self {
                    Content::Text(text) => write!(f, "{}", text),
                    Content::TextArray(text_array) => {
                        for text_object in text_array {
                            let TextObject::Text { text } = text_object;
                            write!(f, "{} ", text)?;
                        }
                        Ok(())
                    }
                }
            }
        }
      metadata: {}
    - page_content: |-
        /// Represents a call to a function-based tool in the conversation.
        ///
        /// This enum is used to specify function calls that can be made by the assistant. It uses
        /// serde serialization with a "type" tag that is lowercase. Currently only supports function
        /// calls with an ID and associated function data.
        #[derive(Serialize, Deserialize, Clone, Debug)]
        #[serde(tag = "type", rename_all = "lowercase")]
        pub enum ToolCall {
            /// A function call with a unique identifier and function parameters
            Function { id: String, function: FunctionData },
        }
      metadata: {}
    - page_content: |-
        /// Represents the data required to make a function call.
        ///
        /// This struct contains the function name and any arguments needed to execute the function.
        /// It is used within `ToolCall` to specify function call details.
        ///
        /// # Fields
        /// * `name` - The name of the function to be called
        /// * `arguments` - The function arguments as a dynamic JSON Value
        #[derive(Deserialize, Clone, Debug)]
        pub struct FunctionData {
            /// The name of the function to call
            name: String,
            /// The arguments to pass to the function as a JSON Value
            arguments: Value,
        }
      metadata: {}
    - page_content: |-
        // Custom serializer to convert Value to String
        impl Serialize for FunctionData {
            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
            where
                S: serde::Serializer,
            {
                use serde::ser::SerializeStruct;
                let mut state = serializer.serialize_struct("FunctionData", 2)?;
                state.serialize_field("name", &self.name)?;
                state.serialize_field("arguments", &self.arguments.to_string())?;
                state.end()
            }
        }

        impl CompletionData {
            /// Extracts and returns the first completion from the `completions` HashMap.
            ///
            /// # Returns
            /// The `Completion` object from the first entry in the completions map.
            pub fn get_completion(self) -> Completion {
                let values = self.completions.into_values();
                values.map(|x| x.completion).next().unwrap()
            }
        }
      metadata: {}
    - page_content: |-
        impl Completion {
            /// Parses and processes the completion data, updating finish reasons and tool calls.
            ///
            /// This function performs two main operations on the completion data:
            /// 1. Processes any tool calls in the messages using `into_tool_calls_response()`
            /// 2. Updates finish reasons based on content and existing finish reason values:
            ///    - Sets to "tool_calls" if content is None
            ///    - Changes "end_turn" to "stop"
            ///
            /// # Returns
            /// Returns the processed completion wrapped in a Result
            pub fn parse(mut self) -> Result<Completion> {
                for x in self.choices.iter_mut() {
                    x.message.tool_calls_response()?;
                    if let Message::Assistant { content, .. } = &x.message {
                        if content.is_none() {
                            x.finish_reason = "tool_calls".into();
                        } else if x.finish_reason == "end_turn".into() {
                            x.finish_reason = "stop".into();
                        }
      metadata: {}
    - page_content: |-
        }
                    }
                }
                Ok(self)
            }
        }
      metadata: {}
    - page_content: |-
        impl Message {
            /// Converts tool call markup in message content into structured tool calls.
            ///
            /// This function processes the content of an Assistant message to extract tool calls
            /// that are marked up with XML-style tags (<tool_call>...</tool_call>). When found,
            /// it:
            /// - Extracts the JSON content from within the tool call tags
            /// - Parses it into FunctionData structs
            /// - Creates ToolCall::Function instances from the parsed data
            /// - Stores the tool calls in the message's tool_calls field
            /// - Removes the original content containing the markup
            ///
            /// # Returns
            /// - `Ok(())` if processing succeeds or if no tool calls are found
            /// - `Err` if JSON parsing fails
            fn tool_calls_response(&mut self) -> Result<()> {
                if let Message::Assistant {
                    content,
                    tool_calls,
                } = self
                {
                    if let Some(optional_content) = content {
      metadata: {}
    - page_content: |-
        if optional_content.find("<tool_call>").is_some()
                            || optional_content.find("</tool_call>").is_some()
                        {
                            let re = regex::Regex::new(r"<tool_call>(.*?)</tool_call>").unwrap();
                            let items = re
                                .captures_iter(&optional_content.replace("\n", ""))
                                .map(|cap| cap.get(1).unwrap().as_str().trim())
                                .map(|s| {
                                    serde_json::from_str::<FunctionData>(s).map(|function_data| {
                                        ToolCall::Function {
                                            id: String::from("func"),
                                            function: function_data,
                                        }
                                    })
                                })
                                .collect::<Result<Vec<ToolCall>, _>>()?;
      metadata: {}
    - page_content: |-
        let _ = tool_calls.insert(items);
                            content.take();
                        }
                    }
                }
                Ok(())
            }

            //pub fn new_assistant_content(content: String) -> Self {
            //    Message::Assistant {
            //        content: Some(content.into()),
            //        tool_calls: None,
            //    }
            //}
            //
            //pub fn new_assistant_tool_calls(tool_calls: Vec<ToolCall>) -> Self {
            //    Message::Assistant {
            //        content: None,
            //        tool_calls: Some(tool_calls),
            //    }
            //}
        }
      metadata: {}
  6:
    hash: ed3f43e2ae654d3f86556031f10227aff8c1b976e49dd8cc9d89baae8935c65b
    path: /data/data/com.termux/files/home/projects/straico-client/src/endpoints/file.rs
    documents:
    - page_content: |-
        use serde::Deserialize;

        #[derive(Debug, Deserialize)]
        pub struct FileData {
            pub url: String,
        }

        pub struct FileRequest;
      metadata: {}
  7:
    hash: 0a17034504d36486a1366d6bd3dd65e5b65774fceca35e4ba84b88c17c85c671
    path: /data/data/com.termux/files/home/projects/straico-client/src/endpoints/image.rs
    documents:
    - page_content: |-
        use serde::{Deserialize, Serialize};

        /// A structure representing data about an image generation request response.
        ///
        /// # Fields
        ///
        /// * `zip` - The URL or path to a ZIP file containing the generated images
        /// * `images` - A vector of URLs or paths to individual generated images
        /// * `price` - Pricing information including cost per image and totals
        #[derive(Deserialize, Debug)]
        pub struct ImageData {
            zip: String,
            images: Vec<String>,
            price: Price,
        }

        /// A structure representing pricing information for an image generation request.
        ///
        /// # Fields
        ///
        /// * `price_per_image` - The cost per individual generated image in credits/points
        /// * `quantity_images` - The number of images generated in this request
        /// * `total` - The total cost for all images in this request
        #[derive(Deserialize, Debug)]
        pub struct Price {
            price_per_image: u16,
            quantity_images: u8,
            total: u16,
        }
      metadata: {}
    - page_content: |-
        /// A structure representing an image generation request.
        ///
        /// # Fields
        ///
        /// * `model` - The AI model identifier to use for image generation
        /// * `description` - The text description/prompt for the desired image
        /// * `size` - The desired output image dimensions (e.g. "1024x1024")
        /// * `variations` - Number of image variations to generate
        #[derive(Serialize)]
        pub struct ImageRequest {
            model: String,
            description: String,
            size: String,
            variations: u8,
        }
      metadata: {}
    - page_content: |-
        /// A builder pattern implementation for constructing `ImageRequest` objects.
        ///
        /// # Type Parameters
        ///
        /// * `T` - Type state for the model field (either `ModelNotSet` or `ModelSet`)
        /// * `U` - Type state for the description field (either `DescriptionNotSet` or `DescriptionSet`)
        /// * `V` - Type state for the size field (either `SizeNotSet` or `SizeSet`)
        /// * `W` - Type state for the variations field (either `VariationsNotSet` or `VariationsSet`)
        ///
        /// # Fields
        ///
        /// * `model` - The AI model identifier state
        /// * `description` - The image description/prompt state
        /// * `size` - The image dimensions state
        /// * `variations` - The number of variations state
        #[derive(Default)]
        pub struct ImageRequestBuilder<T, U, V, W> {
            model: T,
            description: U,
            size: V,
            variations: W,
        }
      metadata: {}
    - page_content: |-
        /// Zero-sized type indicating that the model field has not been set in the builder
        #[derive(Default)]
        pub struct ModelNotSet;
        /// Zero-sized type indicating that the description field has not been set in the builder
        #[derive(Default)]
        pub struct DescriptionNotSet;
        /// Zero-sized type indicating that the size field has not been set in the builder
        #[derive(Default)]
        pub struct SizeNotSet;
        /// Zero-sized type indicating that the variations field has not been set in the builder
        #[derive(Default)]
        pub struct VariationsNotSet;
        /// Type indicating that the model field has been set in the builder, containing the model string
        pub struct ModelSet(String);
        /// Type indicating that the description field has been set in the builder, containing the description string
        pub struct DescriptionSet(String);
        /// Type indicating that the size field has been set in the builder, containing the size string
        pub struct SizeSet(String);
      metadata: {}
    - page_content: |-
        pub struct SizeSet(String);
        /// Type indicating that the variations field has been set in the builder, containing the variations count
        pub struct VariationsSet(u8);
      metadata: {}
    - page_content: |-
        impl ImageRequest {
            /// Creates a new `ImageRequestBuilder` with all type states set to their "not set" variants.
            ///
            /// This is the entry point for constructing an `ImageRequest` using the builder pattern.
            /// Each field must be set using the corresponding builder methods before calling `build()`.
            ///
            /// # Returns
            ///
            /// A new `ImageRequestBuilder` instance with no fields set.
            #[allow(clippy::new_ret_no_self)]
            pub fn new() -> ImageRequestBuilder<ModelNotSet, DescriptionNotSet, SizeNotSet, VariationsNotSet>
            {
                ImageRequestBuilder::default()
            }
        }
      metadata: {}
    - page_content: |-
        impl<T, U, V> ImageRequestBuilder<ModelNotSet, T, U, V> {
            /// Sets the AI model identifier for the image generation request.
            ///
            /// This method transitions the builder from having no model set to having a model set,
            /// while preserving the state of all other fields.
            ///
            /// # Arguments
            ///
            /// * `model` - A string slice containing the identifier for the AI model to use
            ///
            /// # Returns
            ///
            /// A new `ImageRequestBuilder` with the model field set and all other fields preserved
            pub fn model(self, model: &str) -> ImageRequestBuilder<ModelSet, T, U, V> {
                ImageRequestBuilder {
                    model: ModelSet(model.into()),
                    description: self.description,
                    size: self.size,
                    variations: self.variations,
                }
            }
        }
      metadata: {}
    - page_content: |-
        impl<T, U, V> ImageRequestBuilder<T, DescriptionNotSet, U, V> {
            /// Sets the text description/prompt for the image generation request.
            ///
            /// This method transitions the builder from having no description set to having a description set,
            /// while preserving the state of all other fields.
            ///
            /// # Arguments
            ///
            /// * `description` - A string slice containing the text prompt for the desired image
            ///
            /// # Returns
            ///
            /// A new `ImageRequestBuilder` with the description field set and all other fields preserved
            pub fn description(self, description: &str) -> ImageRequestBuilder<T, DescriptionSet, U, V> {
                ImageRequestBuilder {
                    model: self.model,
                    description: DescriptionSet(description.into()),
                    size: self.size,
                    variations: self.variations,
                }
            }
        }
      metadata: {}
    - page_content: |-
        impl<T, U, V> ImageRequestBuilder<T, U, SizeNotSet, V> {
            /// Sets the image dimensions for the image generation request.
            ///
            /// This method transitions the builder from having no size set to having a size set,
            /// while preserving the state of all other fields.
            ///
            /// # Arguments
            ///
            /// * `size` - A string slice containing the image dimensions (e.g. "1024x1024")
            ///
            /// # Returns
            ///
            /// A new `ImageRequestBuilder` with the size field set and all other fields preserved
            pub fn size(self, size: &str) -> ImageRequestBuilder<T, U, SizeSet, V> {
                ImageRequestBuilder {
                    model: self.model,
                    description: self.description,
                    size: SizeSet(size.into()),
                    variations: self.variations,
                }
            }
        }
      metadata: {}
    - page_content: |-
        impl<T, U, V> ImageRequestBuilder<T, U, V, VariationsNotSet> {
            /// Sets the number of image variations for the image generation request.
            ///
            /// This method transitions the builder from having no variations set to having variations set,
            /// while preserving the state of all other fields.
            ///
            /// # Arguments
            ///
            /// * `variations` - The number of image variations to generate
            ///
            /// # Returns
            ///
            /// A new `ImageRequestBuilder` with the variations field set and all other fields preserved
            pub fn variations(self, variations: u8) -> ImageRequestBuilder<T, U, V, VariationsSet> {
                ImageRequestBuilder {
                    model: self.model,
                    description: self.description,
                    size: self.size,
                    variations: VariationsSet(variations),
                }
            }
        }
      metadata: {}
    - page_content: |-
        impl ImageRequestBuilder<ModelSet, DescriptionSet, SizeSet, VariationsSet> {
            /// Constructs an `ImageRequest` from the builder once all fields have been set.
            ///
            /// This method can only be called on an `ImageRequestBuilder` instance where all type states
            /// indicate their respective fields have been set (ModelSet, DescriptionSet, SizeSet, VariationsSet).
            ///
            /// # Returns
            ///
            /// A fully constructed `ImageRequest` containing all the field values that were set during building.
            pub fn build(self) -> ImageRequest {
                ImageRequest {
                    model: self.model.0,
                    description: self.description.0,
                    size: self.size.0,
                    variations: self.variations.0,
                }
            }
        }
      metadata: {}
    - page_content: |-
        impl ImageRequest {
            /// Returns a reference to the AI model identifier string.
            ///
            /// This getter method provides read-only access to the model field,
            /// which contains the identifier for the AI model selected for image generation.
            ///
            /// # Returns
            ///
            /// A reference to the String containing the model identifier
            pub fn model(&self) -> &String {
                &self.model
            }

            /// Returns a reference to the image description/prompt string.
            ///
            /// This getter method provides read-only access to the description field,
            /// which contains the text prompt used to generate the image.
            ///
            /// # Returns
            ///
            /// A reference to the String containing the image description
            pub fn description(&self) -> &String {
                &self.description
            }
      metadata: {}
    - page_content: |-
        /// Returns a reference to the image dimensions string.
            ///
            /// This getter method provides read-only access to the size field,
            /// which contains the desired output dimensions for the generated image.
            ///
            /// # Returns
            ///
            /// A reference to the String containing the image dimensions
            pub fn size(&self) -> &String {
                &self.size
            }

            /// Returns the number of image variations requested.
            ///
            /// This getter method provides the number of different variations
            /// that were requested to be generated from the same prompt.
            ///
            /// # Returns
            ///
            /// The number of image variations as a u8
            pub fn variations(&self) -> u8 {
                self.variations
            }
        }
      metadata: {}
    - page_content: |-
        impl ImageData {
            /// Returns a reference to the ZIP file URL/path.
            ///
            /// This getter method provides read-only access to the zip field,
            /// which contains the URL or path to the ZIP file containing all generated images.
            ///
            /// # Returns
            ///
            /// A reference to the String containing the ZIP file location
            pub fn zip(&self) -> &String {
                &self.zip
            }

            /// Returns a reference to the vector of image URLs/paths.
            ///
            /// This getter method provides read-only access to the images field,
            /// which contains URLs or paths to each individually generated image.
            ///
            /// # Returns
            ///
            /// A reference to the Vector of Strings containing image locations
            pub fn images(&self) -> &Vec<String> {
                &self.images
            }
      metadata: {}
    - page_content: |-
        /// Returns a reference to the pricing information.
            ///
            /// This getter method provides read-only access to the price field,
            /// which contains details about costs per image and totals.
            ///
            /// # Returns
            ///
            /// A reference to the Price struct containing pricing details
            pub fn price(&self) -> &Price {
                &self.price
            }
        }

        impl Price {
            /// Returns the price per image in credits/points.
            ///
            /// This getter method provides access to the price charged for
            /// each individual generated image.
            ///
            /// # Returns
            ///
            /// The price per image as a u16
            pub fn price_per_image(&self) -> u16 {
                self.price_per_image
            }
      metadata: {}
    - page_content: |-
        /// Returns the number of images that were generated.
            ///
            /// This getter method provides access to the quantity of
            /// images that were generated in this request.
            ///
            /// # Returns
            ///
            /// The number of images as a u8
            pub fn quantity_images(&self) -> u8 {
                self.quantity_images
            }

            /// Returns the total price for all generated images.
            ///
            /// This getter method provides access to the total cost
            /// in credits/points for all images in this request.
            ///
            /// # Returns
            ///
            /// The total price as a u16
            pub fn total(&self) -> u16 {
                self.total
            }
        }
      metadata: {}
  8:
    hash: 96cc633755f115f2b01563576c8d79af4970f25a9d930d29aa74687b582a936a
    path: /data/data/com.termux/files/home/projects/straico-client/src/endpoints/model.rs
    documents:
    - page_content: |-
        use serde::Deserialize;

        /// Represents the root data structure containing collections of chat and image model configurations.
        ///
        /// This struct holds two vectors:
        /// * `chat` - A collection of chat model configurations
        /// * `image` - A collection of image model configurations
        #[derive(Deserialize, Debug)]
        pub struct ModelData {
            chat: Vec<ChatModel>,
            // chat: Vec<serde_json::Value>,
            image: Vec<ImageModel>,
        }
      metadata: {}
    - page_content: |-
        /// Represents configuration for a specific chat model.
        ///
        /// This struct holds the configuration parameters for a chat model, including:
        /// * `name` - The display name of the chat model
        /// * `model` - The internal model identifier
        /// * `word_limit` - Maximum number of input words allowed
        /// * `max_output` - Maximum number of output tokens/responses
        /// * `pricing` - The pricing configuration for this chat model
        #[derive(Deserialize, Debug)]
        pub struct ChatModel {
            name: String,
            model: String,
            word_limit: u32,
            max_output: u32,
            pricing: ChatPricing,
            metadata: serde_json::Value,
        }

        pub struct ChatModelMetadata {
            applications: Vec<String>,
            capabilities: Vec<String>,
            features: Vec<String>,
            cons: Vec<String>,
            pros: Vec<String>,
            editors_link: String,
            editors_choice_level: u8,
            icon: String,
            other: serde_json::Value,
        }
      metadata: {}
    - page_content: |-
        /// Represents pricing configuration for chat models.
        ///
        /// This struct contains:
        /// * `coins` - The number of coins charged for using this chat model
        /// * `words` - The number of words provided per coin spent
        #[derive(Deserialize, Debug)]
        pub struct ChatPricing {
            coins: f32,
            words: u8,
        }

        /// Represents configuration for a specific image model.
        ///
        /// This struct holds the configuration parameters for an image model, including:
        /// * `name` - The display name of the image model
        /// * `model` - The internal model identifier
        /// * `pricing` - The pricing configuration for different image size formats
        #[derive(Deserialize, Debug)]
        pub struct ImageModel {
            name: String,
            model: String,
            pricing: ImagePricing,
        }
      metadata: {}
    - page_content: |-
        /// Represents pricing configuration for image models with different format options.
        ///
        /// This struct contains pricing configurations for three image formats:
        /// * `square` - Pricing for square format images
        /// * `landscape` - Pricing for landscape format images
        /// * `portrait` - Pricing for portrait format images
        #[derive(Deserialize, Debug)]
        pub struct ImagePricing {
            square: SizePricing,
            landscape: SizePricing,
            portrait: SizePricing,
        }

        /// Represents pricing configuration for specific image size formats.
        ///
        /// This struct contains:
        /// * `coins` - The number of coins charged for this image size format
        /// * `size` - The dimensions of the image in "width x height" format
        #[derive(Deserialize, Debug)]
        pub struct SizePricing {
            coins: u8,
            size: String,
        }
      metadata: {}
    - page_content: |-
        impl ModelData {
            /// Returns a reference to the vector of chat model configurations.
            ///
            /// This function provides read-only access to the collection of chat models
            /// defined in this ModelData instance.
            pub fn chat(&self) -> &Vec<ChatModel> {
                &self.chat
            }

            /// Returns a reference to the vector of image model configurations.
            ///
            /// This function provides read-only access to the collection of image models
            /// defined in this ModelData instance.
            pub fn image(&self) -> &Vec<ImageModel> {
                &self.image
            }
        }

        impl ChatModel {
            /// Returns a reference to the name of this chat model.
            ///
            /// This function provides read-only access to the display name
            /// of this ChatModel instance.
            pub fn name(&self) -> &String {
                &self.name
            }
      metadata: {}
    - page_content: |-
        /// Returns a reference to the model identifier of this chat model.
            ///
            /// This function provides read-only access to the internal model identifier
            /// of this ChatModel instance.
            pub fn model(&self) -> &String {
                &self.model
            }

            /// Returns the maximum number of input words allowed for this chat model.
            ///
            /// This function provides access to the word limit configuration value
            /// that specifies the maximum number of input words accepted by
            /// this ChatModel instance.
            pub fn word_limit(&self) -> u32 {
                self.word_limit
            }

            /// Returns the maximum number of output tokens/responses for this chat model.
            ///
            /// This function provides access to the maximum output configuration value
            /// that specifies the upper limit on tokens or responses that can be
            /// generated by this ChatModel instance.
            pub fn max_output(&self) -> u32 {
                self.max_output
            }
      metadata: {}
    - page_content: |-
        /// Returns a reference to the pricing configuration of this chat model.
            ///
            /// This function provides read-only access to the pricing configuration
            /// that specifies the coin cost and word allowance for this ChatModel instance.
            pub fn pricing(&self) -> &ChatPricing {
                &self.pricing
            }

            pub fn metadata(&self) -> &serde_json::Value {
                &self.metadata
            }
        }

        impl ChatPricing {
            /// Returns the number of coins required for this chat model pricing configuration.
            ///
            /// This function provides access to the coin cost value that specifies
            /// how many coins are charged for using this chat pricing configuration.
            pub fn coins(&self) -> f32 {
                self.coins
            }
      metadata: {}
    - page_content: |-
        /// Returns the number of words provided per coin for this chat model pricing configuration.
            ///
            /// This function provides access to the words-per-coin value that specifies
            /// how many words are provided for each coin spent using this chat pricing configuration.
            pub fn words(&self) -> u8 {
                self.words
            }
        }

        impl ImageModel {
            /// Returns a reference to the name of this image model.
            ///
            /// This function provides read-only access to the display name
            /// of this ImageModel instance.
            pub fn name(&self) -> &String {
                &self.name
            }

            /// Returns a reference to the model identifier of this image model.
            ///
            /// This function provides read-only access to the internal model identifier
            /// of this ImageModel instance.
            pub fn model(&self) -> &String {
                &self.model
            }
      metadata: {}
    - page_content: |-
        ///
            /// This function provides read-only access to the pricing configuration
            /// that specifies the coin costs and dimensions for different image formats
            /// (square, landscape, portrait) supported by this ImageModel instance.
            pub fn pricing(&self) -> &ImagePricing {
                &self.pricing
            }
        }

        impl ImagePricing {
            /// Returns a reference to the square format pricing configuration.
            ///
            /// This function provides read-only access to the pricing configuration
            /// for square format images, including coin cost and dimensions.
            pub fn square(&self) -> &SizePricing {
                &self.square
            }

            /// Returns a reference to the landscape format pricing configuration.
            ///
            /// This function provides read-only access to the pricing configuration
            /// for landscape format images, including coin cost and dimensions.
            pub fn landscape(&self) -> &SizePricing {
                &self.landscape
            }
      metadata: {}
    - page_content: |-
        /// Returns a reference to the portrait format pricing configuration.
            ///
            /// This function provides read-only access to the pricing configuration
            /// for portrait format images, including coin cost and dimensions.
            pub fn portrait(&self) -> &SizePricing {
                &self.portrait
            }
        }

        impl SizePricing {
            /// Returns the coin cost for this image size format.
            ///
            /// This function provides access to the number of coins charged
            /// for generating an image using this size format configuration.
            pub fn coins(&self) -> u8 {
                self.coins
            }

            /// Returns a reference to the dimensions of this image size format.
            ///
            /// This function provides read-only access to the dimensions string
            /// in "width x height" format for this size format configuration.
            pub fn size(&self) -> &String {
                &self.size
            }
        }
      metadata: {}
    - page_content: |-
        impl ChatModelMetadata {
            /// Returns a reference to the applications vector.
            ///
            /// This function provides read-only access to the list of applications
            /// supported by this chat model.
            pub fn applications(&self) -> &Vec<String> {
                &self.applications
            }

            /// Returns a reference to the capabilities vector.
            ///
            /// This function provides read-only access to the list of capabilities
            /// supported by this chat model.
            pub fn capabilities(&self) -> &Vec<String> {
                &self.capabilities
            }

            /// Returns a reference to the features vector.
            ///
            /// This function provides read-only access to the list of features
            /// supported by this chat model.
            pub fn features(&self) -> &Vec<String> {
                &self.features
            }
      metadata: {}
    - page_content: |-
        /// Returns a reference to the cons vector.
            ///
            /// This function provides read-only access to the list of cons/disadvantages
            /// of this chat model.
            pub fn cons(&self) -> &Vec<String> {
                &self.cons
            }

            /// Returns a reference to the pros vector.
            ///
            /// This function provides read-only access to the list of pros/advantages
            /// of this chat model.
            pub fn pros(&self) -> &Vec<String> {
                &self.pros
            }

            /// Returns a reference to the editors link string.
            ///
            /// This function provides read-only access to the editors review link
            /// for this chat model.
            pub fn editors_link(&self) -> &String {
                &self.editors_link
            }

            /// Returns the editors choice level.
            ///
            /// This function provides access to the editors choice rating level
            /// assigned to this chat model.
            pub fn editors_choice_level(&self) -> u8 {
                self.editors_choice_level
            }
      metadata: {}
    - page_content: |-
        /// Returns a reference to the icon string.
            ///
            /// This function provides read-only access to the icon identifier
            /// for this chat model.
            pub fn icon(&self) -> &String {
                &self.icon
            }

            /// Returns a reference to any additional metadata.
            ///
            /// This function provides read-only access to any additional metadata
            /// stored for this chat model.
            pub fn other(&self) -> &serde_json::Value {
                &self.other
            }
        }
      metadata: {}
  9:
    hash: 868b7af0c3ccb83a9cf098d7ea21100873e55796ebb4473c366ca99d52e7fcb4
    path: /data/data/com.termux/files/home/projects/straico-client/src/endpoints/user.rs
    documents:
    - page_content: |-
        use serde::Deserialize;

        #[derive(Deserialize, Debug)]
        pub struct UserData {
            first_name: String,
            last_name: String,
            coins: f32,
            plan: String,
        }

        impl UserData {
            pub fn get_first_name(&self) -> &str {
                &self.first_name
            }
            pub fn get_last_name(&self) -> &str {
                &self.last_name
            }
            pub fn get_coins(&self) -> f32 {
                self.coins
            }
            pub fn get_plan(&self) -> &str {
                &self.plan
            }
        }
      metadata: {}
  10:
    hash: b4c353524b840f530b27d5d1966421550a33b569bbed9b1cf945b45383816ce3
    path: /data/data/com.termux/files/home/projects/straico-client/src/endpoints/rag.rs
    documents:
    - page_content: |-
        // Still need to implement the builder pattern, and add it to client.rs
        use serde::{Deserialize, Serialize};

        //use std::path::Path;
        // Use trait bound "AsRef<Path>"

        #[derive(Serialize, Debug)]
        #[serde(rename_all = "snake_case")]
        pub enum ChunkingMethod {
            FixedSize,
            Recursive,
            Markdown,
            Python,
            Semantic,
        }
      metadata: {}
    - page_content: |-
        #[derive(Serialize, Debug)]
        pub struct RagRequest {
            pub name: String,
            pub description: String,
            pub files: Vec<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub chunking_method: Option<ChunkingMethod>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub chunk_size: Option<i32>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub chunk_overlap: Option<i32>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub separator: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub separators: Option<Vec<String>>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub breakpoint_threshold_type: Option<String>,
            #[serde(skip_serializing_if = "Option::is_none")]
            pub buffer_size: Option<i32>,
        }

        #[derive(Deserialize, Debug)]
        pub struct RagResponse {
            pub success: bool,
            pub data: RagData,
            pub total_coins: f64,
            pub total_words: i64,
        }
      metadata: {}
    - page_content: |-
        #[derive(Deserialize, Debug)]
        pub struct RagData {
            pub user_id: String,
            pub name: String,
            pub rag_url: String,
            pub original_filename: String,
            pub chunking_method: String,
            pub chunk_size: i64,
            pub chunk_overlap: i64,
            pub breakpoint_threshold_type: String,
            pub separator: String,
            pub separators: Vec<String>,
            #[serde(rename = "_id")]
            pub id: String,
            #[serde(rename = "createdAt")]
            pub created_at: String,
            #[serde(rename = "updatedAt")]
            pub updated_at: String,
            #[serde(rename = "__v")]
            pub v: i64,
        }

        #[cfg(test)]
        mod tests {
            use super::*;
            use serde_json;
      metadata: {}
    - page_content: |-
        #[test]
            fn test_deserialize_rag_response() {
                let json = r#"
                {
                    "success": true,
                    "data": {
                        "user_id": "64ada93f22131d3f5",
                        "name": "Rag de prueba txt",
                        "rag_url": "https://example.com",
                        "original_filename": "sample_txt.txt",
                        "chunking_method": "fixed_size",
                        "chunk_size": 1000,
                        "chunk_overlap": 50,
                        "_id": "670565d07e1234eb",
                        "createdAt": "2024-10-08T17:03:12.078Z",
                        "updatedAt": "2024-10-08T17:03:12.078Z",
                        "__v": 0
                    },
                    "total_coins": 0.97,
                    "total_words": 967
                }
                "#;
                let result: RagResponse = serde_json::from_str(json).unwrap();
                assert!(result.success);
                assert_eq!(result.data.user_id, "64ada93f22131d3f5");
                assert_eq!(result.data.name, "Rag de prueba txt");
      metadata: {}
    - page_content: |-
        assert_eq!(result.data.rag_url, "https://example.com");
                assert_eq!(result.data.original_filename, "sample_txt.txt");
                assert_eq!(result.data.chunking_method, "fixed_size");
                assert_eq!(result.data.chunk_size, 1000);
                assert_eq!(result.data.chunk_overlap, 50);
                assert_eq!(result.data.id, "670565d07e1234eb");
                assert_eq!(result.data.created_at, "2024-10-08T17:03:12.078Z");
                assert_eq!(result.data.updated_at, "2024-10-08T17:03:12.078Z");
                assert_eq!(result.data.v, 0);
                assert_eq!(result.total_coins, 0.97);
                assert_eq!(result.total_words, 967);
            }
        }
      metadata: {}
  11:
    hash: 2578de5b7533d74ca732e559ac1a9915081e15e4b7ba902d538b4b06e9006d13
    path: /data/data/com.termux/files/home/projects/straico-client/src/lib.rs
    documents:
    - page_content: |-
        pub mod chat;
        pub mod client;
        pub mod endpoints;

        /// Represents endpoints for GET requests to the Straico API
        ///
        /// # Variants
        /// * `User` - Endpoint for user information
        /// * `Models` - Endpoint for available models
        enum GetEndpoint {
            User,
            Models,
        }

        /// Represents endpoints for POST requests to the Straico API
        ///
        /// # Variants
        /// * `Image` - Endpoint for image generation
        /// * `Completion` - Endpoint for prompt completion
        /// * `File` - Endpoint for file uploads
        enum PostEndpoint {
            Image,
            Completion,
            File,
            #[allow(dead_code)]
            CreateRag,
        }

        impl AsRef<str> for GetEndpoint {
            /// Converts an endpoint enum variant into its corresponding URL string
            ///
            /// # Returns
            /// A string slice containing the full URL for the endpoint
            fn as_ref(&self) -> &str {
                match self {
                    GetEndpoint::User => "https://api.straico.com/v0/user",
                    GetEndpoint::Models => "https://api.straico.com/v1/models",
                }
            }
        }
      metadata: {}
    - page_content: |-
        impl AsRef<str> for PostEndpoint {
            /// Converts a PostEndpoint enum variant into its corresponding URL string
            ///
            /// # Returns
            /// A string slice containing the full URL for the endpoint
            fn as_ref(&self) -> &str {
                match self {
                    PostEndpoint::Image => "https://api.straico.com/v0/image/generation",
                    PostEndpoint::Completion => "https://api.straico.com/v1/prompt/completion",
                    PostEndpoint::File => "https://api.straico.com/v0/file/upload",
                    PostEndpoint::CreateRag =>  "https://api.straico.com/v0/rag"
                }
            }
        }
      metadata: {}
  12:
    hash: 6b78bbdc3f275eab6f5da656b7eafb837edd92aa8c4afbdeacc5136c59b8a610
    path: /data/data/com.termux/files/home/projects/straico-client/src/main.rs
    documents:
    - page_content: |-
        use actix_web::{web, App, HttpResponse, HttpServer};
        use clap::Parser;

        mod server;

        #[derive(Parser)]
        #[command(
            name = "straico-proxy",
            about = "A proxy server for Straico API that provides OpenAI-compatible endpoints",
            version
        )]
        struct Cli {
            /// Host address to bind to
            #[arg(long, default_value = "127.0.0.1")]
            host: String,

            /// Port to listen on
            #[arg(long, default_value = "8000")]
            port: u16,

            /// API key for Straico (alternatively use STRAICO_API_KEY env var)
            #[arg(long, env = "STRAICO_API_KEY", hide_env_values = true)]
            api_key: Option<String>,

            /// Enable debug logging of requests and responses
            #[arg(long)]
            debug: bool,
        }

        // pub fn completion_with_key(
        //     api_key: impl Display,
        // ) -> Result<StraicoRequestBuilder<ApiKeySet, CompletionRequest<'a>, CompletionData>> {
        //     let client = StraicoClient::default();
        //     Ok(client.completion().bearer_auth(api_key))
        // }
      metadata: {}
    - page_content: |-
        /// Represents the application state shared across HTTP request handlers.
        ///
        /// This struct contains all the necessary components for handling requests,
        /// including the Straico API client, authentication key, and debug settings.
        #[derive(Clone)]
        struct AppState {
            /// The Straico API client used for making requests
            client: straico::client::StraicoClient,
            /// API authentication key for Straico
            key: String,
            /// Flag to enable debug logging of requests/responses
            debug: bool,
        }

        #[actix_web::main]
        async fn main() -> std::io::Result<()> {
            let cli = Cli::parse();

            let api_key = cli.api_key.expect("API key not set");

            let addr = format!("{}:{}", cli.host, cli.port);
            println!("Starting Straico proxy server...");
            println!("Server is running at http://{}", addr);
            println!("Completions endpoint is at /v1/chat/completions");
            if cli.debug {
                println!("Debug mode enabled - requests and responses will be logged");
            }
      metadata: {}
    - page_content: |-
        HttpServer::new(move || {
                App::new()
                    .app_data(web::Data::new(AppState {
                        client: straico::client::StraicoClient::new(),
                        key: api_key.clone(),
                        debug: cli.debug,
                    }))
                    .service(server::openai_completion)
                    .default_service(web::to(HttpResponse::NotFound))
            })
            .bind(addr)?
            .run()
            .await
        }
      metadata: {}
  13:
    hash: 52d584fc8fea93502f67c0e4543c0caafe8d6dc9ecb2ea4253842e3b1f3a2665
    path: /data/data/com.termux/files/home/projects/straico-client/src/server.rs
    documents:
    - page_content: |-
        use crate::AppState;
        use actix_web::http::StatusCode;
        use actix_web::HttpResponseBuilder;
        use actix_web::{error::ErrorInternalServerError, post, web, Either, Error, HttpResponse};
        #[allow(unused_imports)]
        use futures::{stream, StreamExt};
        use serde::{Deserialize, Serialize};
        use std::borrow::Cow;
        use std::iter::Iterator;
        use straico::chat::{Chat, Tool};
        use straico::endpoints::completion::completion_request::CompletionRequest;
        #[allow(unused_imports)]
        use straico::endpoints::completion::completion_response::{
            Choice, Completion, Message, ToolCall, Usage,
        };
      metadata: {}
    - page_content: |-
        /// Represents a chat completion request in the OpenAI API format
        ///
        /// This struct maps incoming API requests to the internal completion request format,
        /// providing compatibility with OpenAI-style chat completions.
        ///
        /// # Fields
        /// * `model` - The model identifier to use for completion
        /// * `messages` - The chat history and prompt messages
        /// * `max_tokens` - Optional maximum number of tokens to generate
        /// * `temperature` - Optional temperature parameter for controlling randomness
        /// * `_stream` - Optional streaming parameter (currently unused)
        /// * `tools` - Optional list of tools available to the model
        #[derive(Deserialize, Serialize, Clone, Debug)]
        #[serde(into = "CompletionRequest")]
        struct OpenAiRequest<'a> {
            /// The model identifier to use for completion (e.g. "gpt-3.5-turbo")
            model: Cow<'a, str>,
            /// The conversation history and prompt messages
            messages: Chat,
            /// Maximum number of tokens to generate in the completion response
      metadata: {}
    - page_content: |-
        #[serde(alias = "max_completion_tokens")]
            max_tokens: Option<u32>,
            /// Controls randomness in the response generation (0.0 to 1.0)
            temperature: Option<f32>,
            /// Whether to stream the response
            stream: Option<bool>,
            /// List of tools/functions available to the model during completion
            tools: Option<Vec<Tool>>,
        }
      metadata: {}
    - page_content: |-
        impl<'a> From<OpenAiRequest<'a>> for CompletionRequest<'a> {
            /// Converts an OpenAI-style chat completion request into a CompletionRequest
            ///
            /// Takes an OpenAiRequest which contains chat messages, model selection, and optional
            /// parameters like max_tokens and temperature, and converts it into a CompletionRequest.
            /// The conversion process handles optional fields by conditionally building the request
            /// based on which parameters are present.
            ///
            /// # Arguments
            /// * `value` - The OpenAiRequest to convert containing messages and parameters
            ///
            /// # Returns
            /// A CompletionRequest configured with the specified messages and parameters
            fn from(value: OpenAiRequest<'a>) -> Self {
                let builder = CompletionRequest::new()
                    .models(value.model.clone())
                    .message(value.messages.to_prompt(value.tools, &value.model));
                match (value.max_tokens, value.temperature) {
      metadata: {}
    - page_content: |-
        (Some(x), Some(y)) => builder.max_tokens(x).temperature(y).build(),
                    (Some(x), None) => builder.max_tokens(x).build(),
                    (None, Some(y)) => builder.temperature(y).build(),
                    (None, None) => builder.build(),
                }
            }
        }
      metadata: {}
    - page_content: |-
        #[derive(Serialize, Debug)]
        pub struct CompletionStream {
            choices: Vec<ChoiceStream>,
            object: Box<str>,
            id: Box<str>,
            model: Box<str>,
            created: u64,
            usage: Usage,
        }
        #[derive(Serialize, Debug)]
        pub struct ChoiceStream {
            index: u8,
            delta: Delta,
            finish_reason: Option<Box<str>>,
        }

        #[derive(Serialize, Debug)]
        pub struct Delta {
            #[serde(skip_serializing_if = "Option::is_none")]
            role: Option<Box<str>>,
            #[serde(skip_serializing_if = "Option::is_none")]
            content: Option<Box<str>>,
            #[serde(skip_serializing_if = "Option::is_none")]
            tool_calls: Option<Vec<ToolCall>>,
        }

        pub struct DeltaIterator<T, I, U> {
            role: T,
            content: Option<I>,
            tool_calls: Option<U>,
        }

        pub struct ChoiceStreamIterator<T, I, U> {
            index: u8,
            delta: DeltaIterator<T, I, U>,
            finish_reason: Option<Box<str>>,
        }
      metadata: {}
    - page_content: |-
        pub struct CompletionStreamIterator<T, I, U> {
            choices: Vec<ChoiceStreamIterator<T, I, U>>,
            object: Box<str>,
            id: Box<str>,
            model: Box<str>,
            created: u64,
            usage: Usage,
        }

        impl IntoIterator for Delta {
            type Item = Delta;
            type IntoIter = DeltaIterator<
                std::vec::IntoIter<Box<str>>,
                std::vec::IntoIter<Box<str>>,
                std::vec::IntoIter<Vec<ToolCall>>,
            >;

            fn into_iter(self) -> Self::IntoIter {
                DeltaIterator {
                    role: vec![self.role.unwrap()].into_iter(),
                    content: self.content.map(|c| {
                        c.split_inclusive(' ')
                            .map(Box::from)
                            .collect::<Vec<Box<_>>>()
                            .into_iter()
                    }),
                    tool_calls: self.tool_calls.map(|t| vec![t].into_iter()),
                }
            }
        }
      metadata: {}
    - page_content: |-
        impl IntoIterator for ChoiceStream {
            type Item = ChoiceStream;
            type IntoIter = ChoiceStreamIterator<
                std::vec::IntoIter<Box<str>>,
                std::vec::IntoIter<Box<str>>,
                std::vec::IntoIter<Vec<ToolCall>>,
            >;

            fn into_iter(self) -> Self::IntoIter {
                ChoiceStreamIterator {
                    index: self.index,
                    delta: self.delta.into_iter(),
                    finish_reason: self.finish_reason,
                }
            }
        }

        impl IntoIterator for CompletionStream {
            type Item = CompletionStream;
            type IntoIter = CompletionStreamIterator<
                std::vec::IntoIter<Box<str>>,
                std::vec::IntoIter<Box<str>>,
                std::vec::IntoIter<Vec<ToolCall>>,
            >;
      metadata: {}
    - page_content: |-
        fn into_iter(self) -> Self::IntoIter {
                CompletionStreamIterator {
                    choices: self.choices.into_iter().map(|x| x.into_iter()).collect(),
                    object: self.object,
                    id: self.id,
                    model: self.model,
                    created: self.created,
                    usage: self.usage,
                }
            }
        }

        impl<I, T, U> Iterator for DeltaIterator<I, T, U>
        where
            I: Iterator<Item = Box<str>>,
            T: Iterator<Item = Box<str>>,
            U: Iterator<Item = Vec<ToolCall>>,
        {
            type Item = Delta;
      metadata: {}
    - page_content: |-
        fn next(&mut self) -> Option<Self::Item> {
                let delta = Delta {
                    role: self.role.next(),
                    //content: match &mut self.content {
                    //    Some(c) => c.next(),
                    //    None => None,
                    //},
                    content: self.content.as_mut().and_then(Iterator::next),
                    //.map(Iterator::next).flatten(),
                    tool_calls: self.tool_calls.as_mut().and_then(Iterator::next),
                    //.map(Iterator::next).flatten(),
                    //tool_calls: match &mut self.tool_calls {
                    //    Some(t) => t.next(),
                    //    None => None,
                    //},
                };
                if delta.content.is_none() && delta.tool_calls.is_none() {
                    None
                } else {
                    Some(delta)
                }
            }
        }

        impl Iterator
            for ChoiceStreamIterator<
                std::vec::IntoIter<Box<str>>,
                std::vec::IntoIter<Box<str>>,
                std::vec::IntoIter<Vec<ToolCall>>,
            >
        {
            type Item = ChoiceStream;
      metadata: {}
    - page_content: |-
        fn next(&mut self) -> Option<Self::Item> {
                let choice = ChoiceStream {
                    index: self.index,
                    delta: self.delta.next()?,
                    finish_reason: self.finish_reason.clone(),
                };
                Some(choice)
            }
        }

        impl Iterator
            for CompletionStreamIterator<
                std::vec::IntoIter<Box<str>>,
                std::vec::IntoIter<Box<str>>,
                std::vec::IntoIter<Vec<ToolCall>>,
            >
        {
            type Item = CompletionStream;

            fn next(&mut self) -> Option<Self::Item> {
                let completion = CompletionStream {
                    choices: self
                        .choices
                        .iter_mut()
                        .map(|x| x.next())
                        .collect::<Option<Vec<ChoiceStream>>>()?,
                    object: self.object.clone(),
                    id: self.id.clone(),
                    model: self.model.clone(),
                    created: self.created,
                    usage: self.usage.clone(),
                };
                Some(completion)
            }
        }
      metadata: {}
    - page_content: |-
        impl From<Message> for Delta {
            fn from(value: Message) -> Self {
                //let content_to_string = |content: Content| match content {
                //    Content::Text(text) => Some(text),
                //    Content::TextArray(texts) => Some(Box::from(texts.into_iter().map(|t| t.text).collect::<Vec<_>>().join(" "))),
                //};
      metadata: {}
    - page_content: |-
        match value {
                    Message::User { content } => Delta {
                        role: Some("user".into()),
                        content: Some(content.to_string().into_boxed_str()),
                        tool_calls: None,
                    },
                    Message::Assistant {
                        content,
                        tool_calls,
                    } => Delta {
                        role: Some("assistant".into()),
                        content: content.map(|c| c.to_string().into_boxed_str()),
                        tool_calls,
                    },
                    Message::System { content } => Delta {
                        role: Some("system".into()),
                        content: Some(content.to_string().into_boxed_str()),
                        tool_calls: None,
                    },
                    Message::Tool { content } => Delta {
                        role: Some("function".into()),
                        content: Some(content.to_string().into_boxed_str()),
                        tool_calls: None,
                    },
                }
            }
        }
      metadata: {}
    - page_content: |-
        impl From<Choice> for ChoiceStream {
            fn from(value: Choice) -> Self {
                Self {
                    index: value.index,
                    delta: value.message.into(),
                    finish_reason: Some(value.finish_reason),
                }
            }
        }

        impl From<Completion> for CompletionStream {
            fn from(value: Completion) -> Self {
                Self {
                    choices: value.choices.into_iter().map(Into::into).collect(),
                    object: value.object,
                    id: value.id,
                    model: value.model,
                    created: value.created,
                    usage: value.usage,
                }
            }
        }
      metadata: {}
    - page_content: |-
        /// Handles OpenAI-style chat completion API requests
        ///
        /// This endpoint processes chat completion requests in the OpenAI API format, forwards them to the
        /// underlying completion service, and returns the generated response. It supports debug logging of
        /// requests and responses when enabled.
        ///
        /// # Arguments
        /// * `req` - The incoming chat completion request in OpenAI format
        /// * `data` - Shared application state containing client and configuration
        ///
        /// # Returns
        /// * `Result<impl Responder, Error>` - The completion response or error
        #[post("/v1/chat/completions")]
        async fn openai_completion<'a>(
            req: web::Json<serde_json::Value>,
            data: web::Data<AppState>,
        ) -> Result<Either<web::Json<Completion>, HttpResponse>, Error> {
            let req_inner = req.into_inner();
            if data.debug {
                eprintln!("\n\n===== Request recieved: =====");
                eprintln!("\n{}", serde_json::to_string_pretty(&req_inner)?);
            }
            let client = data.client.clone();
      metadata: {}
    - page_content: |-
        let req_inner_oa: OpenAiRequest = serde_json::from_value(req_inner)?;
            let stream = req_inner_oa.stream;
            let response = client
                .completion()
                .bearer_auth(&data.key)
                // .json(req_inner)
                .json(req_inner_oa)
                .send()
                .await
                .map_err(ErrorInternalServerError)?
                .get_completion()
                .map_err(ErrorInternalServerError)?;

            if data.debug {
                eprintln!("\n\n===== Received response: =====");
                eprintln!("\n{}", serde_json::to_string_pretty(&response)?);
            }

            let parsed_response = response.parse().map_err(ErrorInternalServerError)?;
      metadata: {}
    - page_content: |-
        match stream {
                Some(true) | None => {
                    let i = CompletionStream::from(parsed_response);
                    let stream = stream::iter(i).map(|chunk| {
                        let json = serde_json::to_string(&chunk).unwrap();
                        Ok::<_, actix_web::Error>(web::Bytes::from(format!("data: {}\n\n", json)))
                    });
                    let end_stream = stream::once(async {
                        Ok::<_, actix_web::Error>(web::Bytes::from("data: [DONE]\n\n"))
                    });
                    let final_stream = stream.chain(end_stream);
                    Ok(Either::Right(
                        HttpResponseBuilder::new(StatusCode::OK)
                            .content_type("text/event-stream")
                            .append_header(("Cache-Control", "no-cache"))
                            .append_header(("Connection", "keep-alive"))
                            .streaming(final_stream),
                    ))
                }
                _ => Ok(Either::Left(web::Json(parsed_response))),
            }
        }
      metadata: {}
vectors:
  0-0: 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
  0-1: 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
  0-2: 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
  0-3: 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
  0-4: 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
  0-5: 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
  0-6: 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
  0-7: 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
  0-8: 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
  0-9: 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
  0-10: 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
  0-11: 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
  0-12: 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
  0-13: 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
  0-14: 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
  0-15: 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
  0-16: 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
  0-17: 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
  0-18: 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
  1-0: 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
  1-1: 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
  1-2: 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
  1-3: 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
  1-4: 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
  1-5: 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
  1-6: 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
  1-7: PpRFvNo1SLynP2S9HVjKPDz6yrzfvro7VD5qvLcK5LqfvhW81HCQPGIlLz0hT747cHAHvIqKITwIaXk9qYWlu454frxFLxO9NPEYPRW8pDyk/o67kGfIPKOzKTvjA+s8r+5fPSP7uz1RHEM73jVUvatuujtwdhi9r5OQPRpzDb1GsRc9Q3XoPJ6k2zxUHE68Pas7vXwydD05Te+9DLjMPIMStr05PYg81FzDvDQO4LyrWlI8FnDRuduHVL3aRwU99T4Kvep6Kj3aMko9gb5FPdlpqL04xn28+DTsu8DfgD167TK99x6MPZjQFjxOveI6YoHJPDUvFT3k2ew9DFabvA6wvbzpo0I8EHlkvB+wtLugEa869D+/PBpVWb1LCk08D1b/uUglXLyi5z89S1qhvB+yKbxRLO487AYtPYdjd7w45Li7g0qqu6qXVL0m8w+9wRsAvbBRwjxnGxs9eQQMvbnOhr3giKO8vdxuvQHtjzxRm5O8/LG0O3HYBL0c5IK7KTkOvQsj8LxC4v29QGScOx0JcL1l3+k87yyvOwj0OTkRPlw9HkHgvGhmlTwSzYW8WsgzPQR8Nru84Rm70wdFvQBuFL3MTjI95OdiveV4kL3iiYy8MXMyvNU9g7qEuZO92aYCPCxw1TuhWwq9aUmxPIwFPT2UT409qNuxPDjnR7sQ46c8ic9AvadGjbx+7tI8PDG9PKrUjD0R90I809o3PdgK5bxrODS8jmk5PK8ejj1a/bO86LxXvEDVnbveCSe9mj0EPK54xLumzgi67xyrveyUOL1S+Ag9HoXxOfogbrwpi9E8b1YOPQeXLjz1wJa8kumpPFXiI70ECBI9qy1QvShBdrxJDRA713GrPAgBA7tzf+07aZTIu1e+p7vzPUU8UlwiPPTA+zwW0628qxADPWNVQ7yON+A72SSHvTd75Lt3s3U8CUM0PF10pjwhWgK83yISveOSnTqLPRQ9u+UQPQAxlj3D+SY7kC3PvKEUBj1Iblw9nxEWvWitGz3/VNa8/hEdPPxGB72ZRxY9HPpevamnOjzd+4+9bfCfO1XHDT1o6Ra9aKjYuohlMTxUMRM8pRF9vEp/aj3hNYc9v1kIPVwgpb1JX3U9vwTzvHntK7vzl4e99KtDPE+NeD3MSpq8p7PHu2LhND2pb4u8ka26O8hKoD0p9IA9tsVqOy2Xvrxfvx49xSunu29pmzyb3Pi8QaChvME0Mb2pLWC6RIiqvHErST1DArE8t3L1vG3cijzZmgo9uIkbvMQYjjz7Jye9kEn4PNY9EjyhhYW8JXv8vHCTUr0I/T+9e9jYurxGzjbpXCU8cj+6Oi0WaT3uwtW7IZBvve1G7jwF5YM8AUUnvF8L9jnosmK9Lt4xPS0BTr3IK/m7u2kIvVa1XTxekQM9vWqSvc+Uhb299Se9Kbw5u8Oe27z3fY48jP4XPiz0qD229PW7wna+vMu5ALf7F/68Tu8EvW1YET0MsFi7JTocO8vsIb12vCa9stJDPdDoabyjh0Y9tE48vNrJ4jyyyJA8tcfBO0DnqLoPqFe8D0WEPcTuTb1q0ru9bV9IvSueBb0lEK69ooxrvSmZYj0rlDK9oxfbuxCiBLw+l3K8Ny2HvBMnhLvckpK8syRxPXtQMr1plUG9EgSZu1P0fb0PMkI9RqzSvL7O47ynyVm8Rf9VPcMc8zwklLg8hTBHOyFtzzxDWBC91yPzO96cQTz/Plq9X39lPcETg7zQLm48GHB2vIANvbyFI2w9nMXDvGt/bT1sphk8lRoFPIjXCb1ebQo9oVhGPVDnzLwydqc8R/oTvQuchTw6dSC9DBG6ullBmrw3H+O8YRJ5Oz7tCz0D4vW8/RxrPYvcWrw09gY8nddDvUF0wjzFP+07vhqZPLwsGDyUu1y8Iz9MPSOIKDvu+J653KGXPHVv9Tz6nCm8k2++uhRDeDxQW1Q7j9oKvJGt4TwQh8y8d0c/PKCkeD2rHIM8Jw0Zuin8Tbz+9QU9+IDqPPqbU70hTHC9y0WYvUipxDv9Kui8DfEFPVIBuLsDTMM8ahklPOIoIr3kCyW8iRAfPKzSZbywvF072NHFPAWAir0HQvs73KoGPYhIejkWyZy9P1/pvF8iAD2MpW48yGakPDBXGTz1TIy9TzmJvWM5hD3AVGY8E8zYPC5omzz3s269iLjzPFPKnbsTMhs9SGjivNxI6rydQ4Q8+DQBvStMND1mulK92rUVvGA5C72Nxhw9rO9OPH2gVj3x6868Q5GtPItpTT2Yowc9rHxSPKXuIjwHs468Q6USPIGHLbz7E5Y9iGBQvYhyg7zhBYC7BJoDvW5Np71v7W289YaxPJ7+Tzx/z4G8XYELveqBY7x65L68waRdPcBCar3O54q9qYguPYZQgTzWgoq9h0JNvChjZTq6ElM8dA1eO8LuSz0YEcm7it4XPJ0qWb3cEmq8PMxavXVguTzdCdu8qb2APQ1XortTp0k9TrwNu9t4Qz0xNkE9TbhEvLT+DL2zIya8SzZGvRBpWr1/8uC79MGfPcvYOz3Dt7u8gDqHPaPNujwKgF69fOD+PMuthL3uHYe7OdrSPSPfTbzHRAO9TLovPQno1LwXuMs8+bohu51qGj2+FMA5l/mmvNjBsjy2ZaY8Y3DYPAv7Grwvt5c90ztFvdKMgjzMbSk9zVx+vFnch70nya88MiL1PFGL1TymkCC9znOlvMyp9rxvyz+9d0WNvc5iJ7zwlrC8fug0PWIOFD1++Ue7aGlQvYR0njwKPLS8FBAevbCuULw/Xyk8BtD+PAOnJDx07pm7u3OmPFvGzDx2IYU8gPUqPbQzEj2WfdA8rOWAu6+ulTwEEaC8rMzZPG0ijDy9Er87X2+CvDYTaj2Xq3K9ONgYvA2rjDzc6QK8Dj7YPJTib7ytV8u8JMasPASXPr2yHIM9XydpvV/eAb1ZyAQ8xkYHPfyrQDxbT4i9dl3iPAoGzTwY13y9ZgAmvHMfI72iwra89p3TvEKHGrzyTxg9RU2MvaFfHj2GR0c9mfkMPWaqsLyjnYK9BT05PJLOKzwk1TC8cWX3O5HjirvEJC89jnGVPD/vRrwAcyq7t8ORvOm7gjqfuuk6KD8aPUJmwLxcszy9sQBzvVr8OLxsSeW7G92KvTt5WTyMCaM83vWVPIgdbbySwIC83qmLO4WCCjoTLko7ZD9hvfVqIDx9b1k7l4DevEaqrrxJvhm9uMyWPO5AprxuIOc8n6aivPtkLDyrglQ8DJquO07Z6zzqkN28c/YwvDJdJD1ltDy8DqnCOpbflr2Wjr488Zw+Pc6YFL2z9Ny7Hxe0u9IXKrvPE8A8pmMLvXrbEbzppsY7U2y0vO5vXb2ogEM8EG6ou545bL1mEJc9HaRvPIFOTj2JJAW9XMuXPNVLZD38D7y7jbegPFG5/Lz6EE28ZS9LvV2IRbw1aeO8wvA5vNbATzmUQNu9zUp1PEMNUrw0/828pD3NPdBfwLxLFBW9V7WLPYH9X7qMmjw9hl0RvTfd8Lwvix89SV0fPXNmt7wpr+A9h+PaPM55Bb3T1NA7haAwPR0JZr1ZuY682O+iPO3XeTwg6UI9+rvEvNYiu7yQZFE9BlaIPZwKJLwGawG9UIIHu2IB37up9CE8XUQtPcd4XDtEwjQ9BC87PFTjEb1vDKI90F7uvJI9p7tzhWW87X+APClK1DusHd28PZXKPFOBCr2cAwA9FuUUPSMLJL0blKY8GqcyPSIYCj3UJWa9qX7lPI3JhDx90V696iaAvFFTLjtsHli8VOqaPMnwYbyFJ5I9odVWPWKNAj2mLqo9eTGFvGvgOTzsMMi8ArARPcCRkzxoZYW8SpYqvOxb6TsVQO06irmiPI6IyjxvrYG8VxWWvC7KAj0ZmZ87xhWvukan0jwgXQW9pFR7vVlitLzpG0S7Oi6CvUPZ87n+1o48VqVqvCd5RLzfkVs8jyvOOkq/2rufM888n+65vFWeSTzJ9KY9o8UHPPENWb1fh807tLJVPdswEb2YILu8OvV3PVjYhju0gIO9oswFPMhmYrxEir+8O2wuPJWhYLxv2PW51mAvPKIjjTxLIkC8E5H2PDnzjLwYESA8
  1-8: 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
  1-9: 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
  1-10: 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
  2-0: 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
  2-1: shSSO4f4YjzM+bW7fPKhvQWUYDyPAW+8RFntu+6ncbzexAW9JyfpOfBAbj2CYkO8i74FvBe1OLwxaes8EzAZPBNKxrwqMym8bUcCPWnZEjo/G4Q9g7fBPC0vMr26pm09He+3OxrvUT2Jj1w81dk9vRbONb17BLU8A8oZu1MwV70ilcy6DD3IPD/yQL15Wh09wV5+vMJSGz3hqd29/ZgGPZgfFr2niF+81omjvQL6uLwUWdw7yYqgu+yHWL2TCA09VKGHvbsIB7142NA8C7nFvEK3GLvlo309aBguPb9n7bpiRbQ8IRmdPVBEMLwSnKY8EDhpvU8hLD0mC9e84fqWvA4r9DxmaSw8ohAZvBJyJTwEAe680CspPShhJzuRBvU8o+w7vXn4Qz0QEp89XNtCvfdm4DuHn0Q8Kz3dPFm0F71Ztwm8TeMOPHZArL0o13s6xW8VvJ5Pbrs5YHQ9t9Abu2eHh7wMQOo73C0XvYtES73J4Q294CgYPUBq47x80JK7kWpJvMKSGb0v2kS93KDxuyZ8Br3d+s08XaOVu6MYND10BHo7uHh/vfnTmbx1Ih67TD+HPAOD07uN+Bu652lcvUwug72BE4I8se+bPPwIJTxcZru8WcX0u3srXL29GTK8aaJkPeIIOjx+w+m7xkm0vGD7b7y07GA9TBVkvMISgTvdjJ+8jK4BPVltFLzQzMs8Jv/UvC4WFLulqV06ne8JPH+jDz1SWJ8866HvvHUqcju8dJY8v/MYPVazXjuQZyq9gXOIvCNFarwn07M7mX7mvB+M57wopu6823SGu7/DuryIh/w8OdmyvLMILDtIxzW9fs06vK/aqb3O5q48BwM7vbj7WLpVCjK9tSf/PLOLor3jRMc5kkcAvMuKIj1mZ2G9BcgzPU890TyLhxG9jfQUvDF58rykSQM96g5EvZ1C6zy43x49FwB9vDlSiDwcNFy939l8utwcSbtyxF69VdgLPaaYkDyU6sO8eP8QPDdzaDzkIf883U4QPXcipDyvUTC91lmfvMpEH70knK+8ZL9ovNCRSTzRmMG7dch6Pfedar3rvQi9jLWzuocH0Txg6RI9VJBIvSj1+DyMMEM84/joPDZpTL1afwO9U0uKO+cadbuNebQ73s0MPVs8dzx/2mq8ohlWPWZQLr2AKKM7brfGvPQGoD168ou8XqWyPHgo3DykHE+8h0VsPcY1qbt5Mri7ggmlvMXvJ72Ym8C8Sz8vvI1icr2M9aq8gokZukO3kDxm0688QrsjvUKnLj0VWB+93wSlPeRZSb1Ubwe9gLiRvBFygb35Qxi9Q6J/PBtjED3WiMu7ybpkvQ66jjxfhwm9k+oNParxEzs5tag9sCSavWvfsrxdlIa9e3qJPeKw27xjJuU87UQ4PNopML25u3s9SqyMvFXyHr2BQFu8nzYkvUQqlDtCluM7evooPvYHj7x+54I8IFS+vOpKGTpX3C495esUPQ9BdbyGlS495RKCPC2ctLu9h3C9TpSKPO5DB72uepI9cFEive8hBb3bJIQ9zLMiO5M6MToj6G49KTWPPAVNdzzcpu082OfUvDGuJD1m2ju9Bal2PCBOND2xrKu9hwXYu0zNqjx1u7o9++1rvFCavbzSS3a760mGPA/my7xxPm08MfoQvIIMGT1orVY91eu+vOrI+ztw9uO8YlvpPJbobD0Vc+47b7VCvGsVKT13GsS8s6M1vRfgwjxNjTe95SMYPW8DB738Ayg9qtc5vZGvxDxwJk07NuGrOxmZiL3Tghy9L7X3PPe767xg2rG8SI1UOubmAr0vxAM9y6goPay3Ir0iGhW9qwlOOxcl67vpizu6LtIRO3x++jwyHJ68jkkEPRxTAj1sG5q8W1MEPf6tNT1YFXc95vO0PcqQ1708YAy96yT9vAEcmDxA5hA9VWROPU71jjyG2Ae92vq2PFMHyrxtaI689DF8vHbY+rwrXu089pbLOkS5rryA1yW97rILvFNbXr26+kg9wEhJPTgrlLxA5788wluDvT4Tdzq3Fsq8zisIvS7DJL1wIsw7Ir8QPfICkTzmNWO8YpB7vIXY4bvyJaw8RyxBPDnyKjx6Ixa9CwUPPBgigr3Ep6m8jny1vPy8xzy6Mki8PsPCvEmlmz1EjAA9nQDBuyjVsDxrfig8A30KPdmUCT2lqU692EoYveRclTxHg6U9DHAXvaeNdz2wGGC9+CLAPKDPoT3qyEI9pl/NPdza8rreVzO8W3jMPC4wljuWwC49GaV9PSzkJrtmgF092Bv2PL+nzLyUsT88rZIlPDd/uzxg5aa7JXZNveQRq71s8Wc9eeyavJrbojrd3oy9TrNAvVJb4Dwu0+S7HhAzPOKirjpvRZA87BkRPWL3+ztmyFy9LsMZPSFzaD1Towu9pIEFPYU84Ts4vYI9GosqPDK6OLq4hTm94DDEvKTz1rxNZaO8vnkuvbpdxzkWld28lz8CvdS+Vbxy1FI8NVmpPVRjUTxRI1S7JSh3vfEt/jyR5/i7g28Vvfx3Sz04ZL08tAnIPFLquzwkjeY8u6cwuxBoab3ep6a9zsyHPA1RKzspsBC9GHXwu4KLrTxibTK9QAonPNocDDy3nzm9B9d+vEiDMTx7aBQ8JB2ZvF8BML290na8iP8EPX/6Sz1KNLc8oBM2Oyei67ynTTU9oQMfvfAcijshPZK9FRKUPMBJozu7RNS8TF8CPJB0+7yUEPM8C4mZvTHMyTx07mY9zB6auutgZDwFpLE9oGaNOEnlvTs4pLE74JozvM7exrwgqkQ9x40IPZsnqDy0DRK8UgWFPavl1byAPx29U70tvNZlhry2V8E7qhGlvBfQHb0NyVo9ARoePDHbMrwB4Fu9qGVePfqRqjxmu5i8HbcNPfDehz0GE1c8dIwvvScTmbzN/4I80PXDvKveqj1zzlg9rMWBPMyplL3ueb87BJhCPfLyrLwRYH29y1MHvAjlkDwxQ5g827taPSq1iLwpYJa8oQgTPJL1Lrz0R0+9RnvyO3osLj3d96w8ClpsPKSeobw7G4e8trSSPPZUubwnqky8RBwWvbpSgz1IvDE9vZQwPZovTDzmpmq8m/6RPBeTu7xKbcW8AmsIPRZZl72MB7W84ABrve2gzLx+WNW8JWKMPdnKq7yj0AU8QrerPP13+Dy6ekg8j4I7PRsoXj1f8R+8KFc4vFzJrjyV9z+8Zgc/PBbQVj0iIkG9RUfRvG5R6DwnuLu7qdRevW2fkT1QszC9CN6/vNO3Bz2QOFW8XWwQvIAcIL2f3+s8/hBQvTjcITwarHQ8+MRWu3xupr1Ko708VoEFvFHe4DrRWn49MWq2vYeAebyL5t87hantvHQ1cb2TphW9qZZFPV+XHTyGi5w8KsNfvakaE70u+g099G5rOv1dFjrHo6U9BdCmvOOADT2YPmq8D1fbvJgRDTzkjTK9CG63PHq46zlEUzC89p9+POPaEr079Ye9R6EXPZnVEzzplz+8TjWrPN6VabyDSQI8zCNlPHpC6zu1rr+8HvJYvTQw+byNp/48OWEKvRb0GD0xkn88aPafvCU5lb3Tuo08MsbFux5hTLu2wbo9T7eZPJ1lDz100xE7qSSUvCEIQb2k/OG81ARtvO5cvLxMPZw8MNy6PN4aCL1bZFO6k5gdvWvkSbwMkvA8/DmJvMPvR7yMllS9B40APG0us7yq3Ra9AKT9vCImlbwP7oa99zWfvCSporvH0Ik8bQdKPeDKOD1cTBy700sMu7pY9Tt2POk3c2TuPNViDb240q28GntQPUeAzbzcR5c7Wyu/PbnY1rxQQqW9bghevJkS7Tz0zLG8K7SqPbSXljwv+lY9Vm5jPIxfnD1fZby7rXw6PRaDzbnB/Sy82IErOnUvT7yJIhS7T4lgPKIJWD008AQ9QuMovcIMDb0GsmO8ROMVvUSsvTxKWqA8jct3PSMBOD2MlG89AcpROysHij1B3TU8+oyDvZiBYrtVE3M90mHRPI1S1joujvY7+BDEvNKUebz1Oiy9TGQLPXLMGb0pKQk9DDAKPDMmIT1gujS8LRP6vJM0EDzP+i+8puPBu6l6xrxqRIq8GdqTPGY+1rx/OsM8
  2-2: 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
  2-3: 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
  2-4: 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
  3-0: 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
  4-0: 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
  4-1: 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
  4-2: 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
  4-3: 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
  4-4: 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
  4-5: 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
  4-6: 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
  4-7: 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
  4-8: yhoTPZQhajzMaKm9Ok2cvcD5kr2+SMa6SeUSvDtDhb3c6gY9GH8bvYcyybu1BpI9kKtZu0kMAD1+xBQ9oQoPvexOFDr+0hI8IkknPcxewTxtUQY8s595PBwwiLxV/ao9TyUuPEohcD1zg6w88GbbO5CVfrx48B29kJZuPEyayTyawwa9xI1CPQY/HD2hm5O9T5KBvKBWcDxmnkK9NxHcu6Yj4TzAOJ+9OXO+PJ4KxbzCcZK8quAWOzcIg7y7DIM9qU5cvZMCZDwOs4U7Rw8ovIL2R7xBZoQ8wHNzvHywEz3LYji9zY+oPR02iz0Y3gy9/JBJvfydw7vby1I9nlMwO/ekrbzqrIq7E/mBvKv5pLxArZC7Xi+yOxICrz3dtvU7VjVAvdQXZDyWG2M9+tCuPPJzNb0zSfU8p3iJPYWwKr2U2iQ9g5MYu/UfDL3hX5O9KuacO/4d9bwI46M80N2Vuw+7AbyOuN+8xN2vvbwnGj3J+TC9NEHTPHQugbzavts7mQVgPN2sIr3VAxE7DOYCuqNBHTtjYlW9C+IDvlGUEr1K9FG9hWOjvALnETssPCK8qCZbvZy7Lb3+EJS9vxaoOqRMsTxvX408qezTvFNPBj2FUJ+3B3pIvFNHO7ww6CW9T62XPMOU0DxM1JC9cnR4PIxxYz3YaXI9AeuTvB44Ub2Y2oE9QnphvQJ+t7yILgs8MVUpvcmjC7ykwRk7q9ptvOAtA76lMoY6m0+4u9g/Bro6D9A8JM4MPSxKsz0nrXK8kprfvGGeI7yPOsU9G4pxu7l1OL0s8848KY0ZvHC1Kj31pAI8LV14PI8TlrwuqFi8wcc+vUZphb0dyNc8tgB2vWLnmLv3AZs8ritXvVos1TsQ+KG8n2mqPO7aQrtueAq93jg/vLCGADzkIjo8abIWPfrQNbp1oaa73cAdPKtSjT0+Ewe9J/5JvVwI6buAwbG8S0WAuzaGdzzINwY9eNceO+ypjz1c3406RX/5uwRpPD0jxiY9ucmIPKKL5rzgaGI8hBYEPf1BIDxe65i7VPAEvZdcxbxx6tI8nAEdveGl2zxsz+u84nehPCxPcbtpzD+9CNcKvNbK/ztrfgg8OG2FvKDqgjy5+5S8AzpHPURroTxTBis8u/TGOxeotjy0dZS8LYGbPcTx0zq+2B49GVAqvTMWJz2fm6M8RCfau+COWLz5tNA87qIkvVv6V7vVcwo9wEeCvCIFWjtjk6U8zSmEvapexjywRY08ZSoGPTbgxDzeAMA8ADHwvAEgSzwmKZC8O/ezOzxG9DtIeCm9eAWYvOWYWj0tbQ480KiBvLIGM7p14kO9MlNWveedzDoADD09Cr6CvGDwFbyf/AC9cyVWuvzcGzxbucy9C0IVPN6bkL1fv4Q7HPKXvPRoAL2D3M48nglrvZFOK7yrAzm6HuPxO89pAL3/nOy7siQnPa0Ugj0SxF28BAn6u73IbL2ooHA7gFoqPXZf+bziXvO8LFbMvHtRmb3QBaa868gJvO/PZ7w1Ezw9Z25yO4rqA7yXwhg8Bl6ZvH8oNztZMdM7nUWzvP/PJz2yOfO8hDXPPJskY701iME8iqFHPJMevzzwGRe9LhZ9vX1/HLxn5JU9XNXfvDWgFbw+9aC9Zz2tua8cmb0+98k8Z9mMPAWoXzyMm0499yD3vHtiy7xBCqQ85ZVlPWfZMrxqdI89/AWiPHVK7Dz9gYk8BU23PNfSzrxCUpe8EjEtveR16DlU7T88Eg++vAaZRL3fXyW8SL2iO0ddAT3rX6W84xiqvDf+pDxJNAc92xV3PbWXKbwxsOK6VhDWvIeNsDskKy69HbDdvG8/+zwX33K84LH+vPHNkLlRAeo8lui+O9hxuDxSj4M7tF/0Os2XSj0wdAA9HN/BPJHOVLz9NYS8VHz4PEzHvzwsaI48C9n6PE/zkr0BTro8Xkz7vKWFSz1Su6I8pLXMPKwvIr2Vy6+7tYwHugP8Ab08ftc8EsEHPJrdsbtssw08uNo9PGIn1Ly6QpE86wOAvbPrSz3QAs68SzhUvOUssj08Cck8OQbAvI4eMb1T/dU8Sq2sPMQqLr2gu/o8aE6uPO5CwrxZkB29MIBhPNFADr1lBaS8th3tvFGpqDwwa/K8LGvlOb/iwrwag7E7iyQSPf3Odz3vPVm9KGlUu67rOj05sQg9LtnmvGZ4UTzSKo08DDROPfxB6jw0dIe9MiBqvLilyDouy6U8N+S3OyF+gzoizk08L3RGPXHxyzuhIDU8M0TBPHflDT1kZoa7W+5BPXRIQzwXwJI948GTvMNSibyCoOq7NZFxvSVO972U+ug7sNnkvBfVyrxL09c7ntAePIBuoLx/Fda7PNlJO4ucpjw766E8yM/qPDtQer2Dhyu9OHNIO9FcnL1UoSi9KXRVvMmJpbzspka8rMtaO+dWgD27y5A9LBCYPQCCsTztCCi8NuEAvQ/Ybz02KAq7iaS0PXhgR7zUJD29p1uJPS3b/7x9TDG8WfedOpTJyTxzJhs8sFEkvNK0aLtYBNu7LU+0PEO//DqAD1A9bmiEO8p5YT253YS9oRBOPelm9LpIxVI97sSAPMVCKb1Cg2i84e+bvIHd+rwN/LG8j6qNPR31FL3m3zU9S4s+vGDeEz2cBiY8g5w1PTvSjLqFX8o7u+28PEh3Hbyr4Vw9ai0EOzR1h73DRjK93PjfuxQwzDxOgEC9iyT7u9sww7zhLE296611vYKRIrwyiTU9Sx0+PWJbIzyj/LI77KhNPAJQObzPIiG8WogJPUk8Sz3AVxM9mnUevS2Y5rpIPbC8l43hO4fIRz2S4G29d3hbPRH4dD3tdys9m0ecOrIepzzwzIY9J5gLPKgdBj317bg71hnRvIO+NTyuxn89ZXkzu7jXrjzzjYu68imqvB1Sr7t1xFI7X8rbPL9tWj1+TeE7HmPJu3FrQ7305vU7oD1rPF2CuzxCeKQ81vG4vQDezTyj0yK9DdvNvNxGijlXN9G8c0H8vDK8ujz3uc47I/sevFcGuD1Uryk9kh1xPJtNkTxaqw89wuQXvQ5QF73TAvK8l90bPToXDzyQ+o88c4+PvTtHar0YMYM8C+xRvOQQRzz0YpA9TG/+uhM9fb3rfqU9VGQmvQfSFr1gSw67hnr1vJ1kFLx690A9Ibs2PcshZ73B6F893bkFPfEKTj3d/Y+9N2GSOmK7lL341oc8VMmNvJ3iYD2R9Fy8WIOyPb5pLj3ifCC8NoFdPGUrm7wAbok8NaYmvGam0jxtgI88mq0uONvpIb1Vahi9t22Kvah+yr1wRmo9S1b3OvTzX73hiO0808X6vKtzgTqmSNs8AXIwvbXEqztOO5+8M7vqPOq4KLzKtIO7akPAPWHnOb1DTL89aDnBvDKgxLzfq+Q8xElSPR9Z0Dyp5Da8f7iGPHCRZb1PlQm8vhcmOiAM8zuljAe9MsztOsOmFbwEvGi9MK+RuvkV+zutbLw7u6WBPJJr3Dxlu9O8drCiPBF9Oztuq9w7cfNtOqKw1zzGZwS9uVFJumfX4Du8tME9UNA2vZ+qubxNddA8fO/cPH+lFr0vScY86Pk7PBn2yrwYlE68Nut3PPWakDynFiY7kMpZO9cCYLs0HxA9wAn8O8Dkb735cMc9P6oCvYORZLzwV+G8kNfyPK4bn71CClq9xlDwPBYoFD3STZ0847ZUPUzUYbyfxeA7K74GvYLlhr06lLU8C5OyvA+K5LzaJeC8QJhLPeUCbD0WbYi86GH6Oyi0vLyn8QO9p2LCOjgrq73HZlE83dlKvF7IVbkPV9o8BhOWPToDyLr1VxO9GYk4O5NmiTwpzEc846xPPXeqNrxsJcI7It70PPAyMD2b/Ky79xTGPCzMm7ya3QI9trIhvC6bCDzUgpe81cvtvDv1Dj0JIrQ7i2lKvR09F71mgO88V2IDvZ0ErjvaIhu7FSDgu+/DK7yVXDC9/pQIvNAu0DyB4WE9k6unvTXkT7zQXY49KJAtPTvRALwcUT295em0u7y6NzxOXCs8dEnMvEvrUbysRi29xoYpvHqN+7wsa2O9BP8ZvGqOpLzkVYw9yWwnPfhNuzypJIW8tPoqu2iCNj0oacc8
  4-9: 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
  4-10: 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
  4-11: 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
  4-12: 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
  4-13: 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
  4-14: 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
  4-15: Y8WnPGkEVjynory9pCrpvCi1Gb3LtgI9klMUvaUNIL38JNQ8htHwvByBuDwZ8448tu00vZjg7DyhVn08SmCVumuH0LplJSI8wnRRPSoWTb2ESsE8gn/7PLc7lLzwu6c9AKY4PDHhaTy4btG7lADWvM9b1DyOuUW86diqPDly0buqEy28YyqUPKdNkjyi26u8L+v9PGt24j1B6Wi9LxWPvcWhn7141p+96jfMu2NsCTygKGU9ec3ZOz9WsbswFDE9uWNFvCbNu7xiY5e7eDYkPa61DL1VZ7m8s89nvQL0ej3Yjz69GWmQPVdxED38FpA82Q2lvP5bJD3xKKQ9/rC9PHZpjbzJS2s9xk4RvZgpK7xrtR47t6SZPZsxzzw0OQO9eSguvbww1TuVOHw9Tc37vMVIqr02M5+7ZdoWPEE4krsGH7k7l9BuPJOYj7zrN2S9iTxNPKmWwLyL9YM6+nvqvCaBCzwVXBi9Q9fGvYnasbvEWiK8CSJVOzEsAjxpDgO6KycNva9O37ybY7W9WFYCvUJOaLydIYe8oRnXvKXbU7wPF/i6WjYJvbRK47vP1uK8MNBiO68sDLtImZW9BdWgu8b1dLwWPt484jdrvGyLTbxX4ti7lgkDuxTHYToqGye9aEghu0N86zti32e9hYmeOlKXZD28m688wcwlOzxB37x8UiU9Kra0vcKMCL3wiii8Tj+IPFEYEzysy009mzcBPQVezr3LtXw8hGCAu2P7xT1oWVO9lYBIPUdqHD2VmRm9Q2ZROySy0rxuDDc9TBW0vWIl/7ww2ys9adBqvKbtL7xj2QY9jI29PNeSor2V5iw9f3EPvMlRp7touPg8PH3IvP8lqjyHNQc95rXlu1Zd07v00Lo82Y6iPOEyDL3HNlY9DdczvR5SOLwm+iC9xVSQPa4qh7zWex287BZVOrXb1TzAWWk8CakRu7n1p7rqZTc85BkSPGCa5DwOeHu8Rf7FPOVLej2fwqs8wQCLOzA1WT3yLUO8iUPnu6XLIb2MDye9ALFCPfmEyrrMn7C86t4tPMipfjyn0GE8LpaDvGHsDz2m6Fu8Z/n6vBQuIj1Pfdm85XItPTfnDD1piTA9gUvsvKGj/DuLppm8eaLAvM7lvLz9z1a8p6RiPMpMJD0/0NS87dblPIQEXjw0bCk8/o0mvRd8Ej1QMz08ahMlPYusC72M6xk91SdPvPViNDyM7AG81okCvWGf0LyeUKE8onISvQTanTuoFoQ7ABRdvTwbRb1MGi49kDBEvOmmMTzmOyO9mf1ZPTxpmz0pPbi82CsnPY9HuztKk828/lmVu0GHqDwInpe8uOidvDBVZjwEvgc8bv8EvZBjhbz96ZO7s9S1u3s+xbxyKbC9eXQHPZ70/7yCK0q8FbbmO9F2AbzW/8c96tJ3vSP7+bxtBHM7TepiOzv7ib0hl1E9dmaxPXSNjD3UeLI8AgMavbHHK7wZJak7amcFvP47CLzHOre9UasyvVXlA70+CFG9mSZ+PXgL4TsIWnQ8yUfhvIsHwrzuJVM907oHPJapgLt1lM+8Foe+PCLD/zwALA69eFj4PECUkL28Dgo82+1yPMZhCz3ieAM86C8MvAqFQbxtyqG6HLxUPHPVE7wzqtG85npaPZ75jb1S99w8dpEFPBzhCL2n4FU917QJPLraDT3QCNm7pGJlPb+DVjxkEEM8iRkzvP03KD1qh9O8cOiYOtxXST2zdum8IMazuTC29rxvVIy84sXJPJQnf73WQRU8x3l8vHk9jjsLti07D6KavJIBSr3sNvk8LQeBPUeQuzsb5VM94jodvaCL1TzCdIa94bVAvM4ZjDyxGA29MY8wvd5TcT3jR406SzegPYB2X7zSCWA8UYPoPMEQyj3dzAA9cMOLPeP0rjrFPWi826+0PHpnyzs9/0u810mGvPf/+7scQg487n+IO1jSoDrb3Zw8Mj6kPBjlrbx7YRM9wdVXvQrNQD3Otwi6IhnlvIza4jzVCqo7Ap1QPBDVqL3l55Q7UputveNvZDzv7w89+LsivEesJT1jhAc9aWk/u5vsjr2cLDE9NEx/PKeHM7xvsAQ9TnUrPYvcx72kawy9OFeXPa5adDt3q3C9u8SlvAd5XbwWhx+9vbtUvDJwjTyE6yO8TxpQPAYbiD1mMx27OVwqu1yUGj0FtNg8xSsGutSqizwPCRi9W97hvGbBHryTfFE7oCSTvSKmpjwITnO9LFDGvEHTAbz70ww9vqWzPAz6ijyy+CI9kyFEu+XEDD25fz09L53CPINe0rrehIM8I+eWvRzgQr1jScY8uxNovEk7kL3l7Tu7w0Kou+GYOb2Ogz29iGo5uwp2ybtc4o685kZDvNdJubyhTJS8jNb7PJY3T71+Uw+9PmnEPGJfBb0/R3W8t/FuPMjxdT3zsUA96ypUPAFTpD3sJeE7tiDaPDOY1Dxs5WO9lmPRvNKmAD1jdLe8pp2SPR8+IzySaqC7t4y7PY0TxDwgefs8a305vXSYE7x1ogq9cqR7vMmdy7xB31K6gHAfvQQyHDuFRwc9TH81PAeTXj3uuK+9xFGlPfkusLypST89ySKBPfQi4TuJbJm7snY4PFx5f73vDpS8uz3JO98/m7yLpN08YXOcOx6HEjs0r5C827oIPSUlGzz7ijs9yFyTvE5vArwyH7U9OtanvEBAyLvIU2u9y4K/POfLCL3SvXW9TGC7vI4zwb0y+Xy9lny/vET3wDoaMak7BpAuPTeWNzxmYMi8XAzbvO96Rr29s+c8u3OyPMoEkjxGUqo9aYAMPeiZwLoUaUS8jlMAPYW0rzwHXNk5TzycPAkiaz2Lrik97Po4vMdD4btEeGs9FAynPEOL4TtjWBG9Ru3EvBa0/zytiGc8x/10PMcb/zwW1Io8xfxQPCq+mrt36FU8gAotPM+pXj12xus8vbyrOohyQ70/+cI7I28XO3+58ruLcpK9JiJnvPPoMbsTWjq8iwcSPdAHGzyQa/88iDRGvG+Gzrr4khY9i5G3OzNAnT22Drw8zkkZPSNWIjtxpCa9XqaevIgFj7toPjq99Fm2POjBWLyOcPM8Q70uvYYE37yny029KeflvLwC4jsDVGg8ax/GPHYMgrwVLt472P6QvZNXT7x0oAG9E5DKvLe1EjxAcwY9JiSpPVGKXr1LPrY8KxfEPGp4Bz2/T4m9qYo0vVaDhr0yVqS8v/SFvFG0PT0jFAq9oH2GPWxrgDyKe6K7YT1QvXjuBDwNhY67lG4AvVXqWDyEohq9s1g0vAo4gDwxIHm9w5ZDvT1gJb1qtz49QHhlPOtrlr1MQkO8u02ZOvF22Dwk2V49hoMxvZTz/jvoyi88GHN2vJ62BL3VeYY7PwSBPSxCQrz9UNA8kL4ROt7ZIT0zC8g8zWDOPAxMXz3lR508sKb5O6akTb2XJSy8NaPFu9x4FDyxqBi9NwJaPKIcO71BYoW7yfm8PBAAs7tZ1Z28gtBvPdz1uDyhkli91zSsvKBLizzJEwi9cN59vMMgMz0U3h69Dtd7vEEMFL32EdI9tHgwveI6BL0KaNs8kH4BvXMooL34G0K7DOYQPY7+Z7z4HB29c/i6vEWsl7wErQW9giv7PM4u17u3pLm6ZzHLPMaGPbzHz2A9AzRZPCNCpLyQ9kU9feUSOcUErLyLaYK6kDA5PIPRYDugpsa8meTmPL8o3zoDQN68kFU0PX4iOr1zJys9b4J/vfWk3r0KSgG7h2UEPdgZjD2Bs/S8u56vvPEl+bkSbwG9tn70O9b7zLzSRyw8B8tSveC9HL0QR4497q4WPQG0ajwuHO06/NPZPDmT8rxXkxo9viAZPQVKUT3n0/U7qy8IPWkx2jwoX4M8cYOwPPIkTD2v/dS7CRe9vCp4yDvhakk8UG/wvN8URD299wG8l7hBvf3Ef7ynm6M8AuKmvecEijwDBCc8Z02FvPL8hjzwVRm9yaKOPF9dQDs3xjU9eMS4vZEw2rysV3M9Z3qmux0MUzxlYPK8TqIAPcWWsbyIvfs80l6VPFaN6zys1TK9EJTmu9Uhtbqwk2G8mt+JPEv37byGety8OSdGPFTYarwx/4K8IzP7PL6hTT04rTA9
  4-16: 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
  4-17: RgY7O5Zzhjt3VXi9uw9WvRqqdLxqeQw9wNeFvDrhyLwJZxw9W0tHvULSrDyCyAk9XE8tvUgORT1kiQi9apPNPMQQ5Dw8/bM8Ot8fPPjFWbyNxXk9hWM/PbVJCrw1FqM903PGu26vGz0C7oW8DNBvvOpWDzvHJXC8fODUOzi6BL3sTB48tc4PPUQajbvOUng7eEWdu85d2T3ujqa9CuY7vRoTsr1ghEC9m3/SvG7edTziqEk9rXJZu6DribzBeCk9M2C4vAlYzrrnrvo8vc27PEeD+rxith28Z0ydvaKxnz181LG8CtJSPc54Urx6lRk9Xbl8vf3RZD1cT2I91MDEu37yhbyMrew8STdxu465F7yR7H47wIyVPZ5GRD0P2LK8pIJivRdGCrvAkJc9QeVwvY0HV738Wus64AfAPNHgWjwFndw6MIqkO83bFr2JjaO8lAHuPAlBgLvKIMw8Y5jMvAwPwLwhyxG9S6k0vVy2Kb1NZwy8nVpau4ZparzPI9e8lyuavGBXorsiaZC9jhEOPOQmTr2ThMU80kWEu5RV1rs31Ks8s020vOpXXjw0mxA7tCUrPQNLC7v0pVS953H9vKhMGL3csUM9+dj2u1QWwTqKz7+8+xGzvFAPAD3KLi69REUrOw7TCrqgIFy9nmfwvHSBKj2rRrk8jxI3vOpHU703elE9XR6ZvdTwBr3mB2Y8viT4POSrezwbAe88Yh0lPZvSrb299V47z8r/Oyuc6T27Ihu94DRdPbDa9TtOWC+9UZh3Ozp3cL3mhFU9iIZXvY3X17zWMdc8TxQSveS+5Lwcq2c4HFMhPQUSyLyhnQM94q/UuTjfR7vXrEE8J7VmvVDBQj2/6LU7Cy2fuw+axjwkV9k83qCdOw1fCD2mYjA9beJPvLq8ELsFLma9WNQIPdhO0buF4Ga8zlO/u0fOCj1Ll8w7imERuohEsTxIV9O8xLMTu13OvTy+O+S8fNBUPIOekD2smYU8jFekPO2mWD1Tb4e8rOOwvHV4lr1ezC69lGLtPJRrkTwb5uO8q/KUPDqIL7zLDKw7jo4kOizTdDxm5Za8G2+LvGyclzyJFT2814sWPT/+NT04DRc9aao9vLRTj7w8L+a8snFmvajLIL2zGmg8U9yDO2qlpDxbDoW9PStWPYzx3zq4hma8vK7JOlnbkD3d2KQ8gDb+PASIObxpfjA9/c6KPL/FVLz2NNm82TOQvAo6Hbxv5b08CQ2qu2c3QDvNjp48aK5XvRcLRb04UP48zxASvZfmAb0Gvko83kQjPQ5IjT2d5Wy7j3LGPbf4izxt0N+86h+euPTOhjxImUW8Boy/PE2BM7wTvJW8h0AevTbCzryiobK7JqlNPGBUL71nuYy9JDEfPGbuz7s7+q08N2kJPLagvbxNmJg91lQ2vV5fLL1QTgW9KqMEO9R/nr0ZUiE9EvPJPZTTmz311To9ElgEvEgrmLzTphO8KTDRu+c+dTzlT7S9tB1evQbhL73t5se8Et+PPYE4tzyyLI68yFdNPLDkjrxfy1Q9RxTuO4kHoryjAYK8yyrkPOm1dT0MPQU8RBICPfrxkrxV4dW8E26kPKwriDxms9q8fC1NPansz7yh9zi9+sV6PEr/Yb3yfT68eGoxPcB4Gb1cENA87ZNsvDehvbzYKmY9qRDEuKJjCj3UuKk8xp6DPaeEGD3snQm9Lf0LPKmvOz14zgS9g7B8vIwnPD2vDfO8qecPvXXiRr1yrRW9OCH8PIQK9LyYyty5wI9CvTWY0DwAbEK8I3xQveervr1Bujw9WhY6PcfBtjxbuig9N5EvvSN4XDwCbV+9FRaHvCmazDxLvEg7TSEdvTvVIj1JvZq8CwPVPY9pL73rY6c6DPaXPGFjnT1ybxo84wusPf7O8rsBCA68aiCzO4WmGbsT0pI6SkXAuw6uojwrPXY8SUskO95KB714BhU9Q13CPG1DYLtFtx09u7MCvUl4YT3OprO8GXMbvacrBj37zL67wCXKvLxhl73R+ag8KQHIvS+DnTwG9IY9ts0DvAJ/rrltLjs9Cu/cvCrwNr1SePs8Xo44PUFqQbzFI3M9AvzhPAndm73DaWG85GOBPfsQK7rfoJW9E2k+vawOC7zVCgy9YS6cu5IUeT04Fjk7iB4DPPYbLj099sg7e8jUOrVPDT1Fxvc8KGP5O40YqTtQhlK8u3CNvGgMMrw4z3083cZRvT4Pery3Poq9lrg5vVzY5rywVbY8WhUdO2kGhDxQe9U8w+lMuwgzAz2esoA9n54EvPfzpTwqYZe7Hf1zvUTHlb1T90s7So4QvGy7cb2q8T28wQvUvP0WhL30EXq9Ffs7vE5FnzwLdJm7cUO+u0ZOcTxSmBc8fccvPX6kRb26Xzq9IMaiPLjPmbw9/zi6kMorPVUcaD0gMII9HabEO4UFOD3J6Lu777umOr8skjz7r3C99o8ZvXUsujwsPjS7mJyLPO9fJTx2sdY73U2zPXxJRTyRS+w8fzyUvek9JTzPZFy9htWlu/B66bzxMme8U1RjvOibs7s/XwY9iVAtPDbpqjwF1DS9z8GQPTMonbyG/DE9iSR2PbxqNbyg8I88NayRPHCWGr0sAra7N3tAPOA0UL0ZKVM9V+cLPD0vrrxbiFO6we7/PMkyOTz0jVc93EHWuj8V+7whOUw973ohvCCE1rx6QxO9XdwXPYRtMb01hIC9KliIPJtFf71keRS9KJEaOsbG/Txe92e8tqL+PORjlzy4//28c9kkvZAqPb0DtZ086OQNvdXzn7qkqLw9LKDKPLW1iby+aqG8FSt7PBUmBz1W/ww6QQGiPBeiTz29S1U9obGAu2BsuDzEuzs9/UOwO+MEmTwrPIa9imJ8vM9KhTzX8ks8lolxPCoJ9jx56Q28TyJFul7prbx2CeU8qGP1uzLiGz1E2WU6eE/PvGUAQr0NwOW8FbWJvAOvmrsFjNK9f+KbvFundLu/g267dq+PPV+i6rt5FXu7JBfTu9ViR70qNNU8r5afPFbMjD2OImQ8hAoNPY3U5bwa5iW9QtouPHt4lTu49AG9POtaPPE9ubolk5Y8nbAzvNa5Gb0AnZa8Z2T6u7fCMDvT/ck8HyPgPC/YOr35/qC85XoSvWHxyrxSOkS9OcH8vIde1jiCnxE8uj54PSJlprxemq26T1+OPEBtQT1au288xlTIvK8wtbw4wg29PvsNvYvlYj2aNKG9SeecPV62+jz+apu8ihJZvdOJBjxTRqi8kDGfvCLzJzzRW3C9Li4hvHr2Mj2ia4i9ejM0vQSZF72vuyY96/6qPPNLI7xPfwW9iRQTO031RLvN/XM9ggTRvKlckjcHmc07FzmAvAt2YL0mpno7/cAGPUL5rDymrSo8rUPiu4HHxjwnj6M8G0xOPPxBaj1Xc5A8KPRFPMg0a730etq8UdjZvJof4LsWhR29Xu+oPI2itbxkadG8+BCEPIWifrnXeBg7rSupPd3tAjwDnSi87Pa2u7QCLTzRPBi8IkNxPHQsQT2yY9e7uehAO+p36LwgE7g90yCUvLNuurylut88Q48UvQrvir1u4h+8aPn5PAO1sjxSl4Q7rvycvI53HL0TUm+8RsmOPFiBAjzudZ46BbATPTGJZrt7Nf08ycUvPBg2Hr3ggdU8DUsivHdWwLyW7EA9tdCAuxoJ9bzZWTC9idMrPbHAtLxlnjy9IWgxPRTPFb0JhJE9HGa1vZud9L3AjYK8pBiLvNofoz0jsPS8vEsPu2pmS7xbdXS9Z2KrvB6Ndbzf0WW8mknAvLOx0jsXaVM9cA/HPDq+nDxHUh081XmXPGhE3bw3dZA80ZB/PaVKCz34xRg6iXoiPIvRwDx2f508eS3VPK7Tqj0PyRm7o0IGvWLiFL2OKyM7PaP9vAu56jwim627lwWcvTdKojyf2lA92FKCvQUUsTyycp48GdPSuUcpKT3kkYW9l9PVPOmPhzzZSDQ9U0JsvY5TF73x92E9/2MPvKDpKrxHcdQ7x8ELPeDFCb3XdPO7YG+TPMg3lTwJ2FW9o+Y5O3h0YLylZ7G8ncbfPHW1SL1Urhi8M8NwPfjDvrzIZOu8bvwNPQn6tTxPEzs9
  4-18: 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
  4-19: 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
  4-20: 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
  4-21: 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
  4-22: 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
  4-23: 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
  4-24: 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
  5-0: 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
  5-1: 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
  5-2: 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
  5-3: OtasuuFIjbx9mpq92WzLvFBHJD1NeRQ8kcUXvWPjXbkVUMc8xBVaPLD8vbt3xLQ82NALvTM2pTtINlI8bK8rPbjdJDz6NM86rTsPvWq/9buVfni6DhSXvE+ivjygN8o9R2QyPJstBb31vI49OO6NvYVbGL0z/Yu7nC0hvXYbWLwnC5k8Z6IdvD2OAL3VLca99s9QPM1e9Dwl+dC9DqAaPFB9ULyniYy84NxXvcrLyDx1yvw829YFPRcfgLx3H+o8+2gEvVtZvL3HRUC9C9Z1vdlBxLyoRjE9ox0cuvfcDDy13oe6dkSXPOXkp7zNTXQ7hH5dvcrVJD3RybM8DxNouwdJzTt5oSK7anxJvE0/xjypCUG7zNexO6J4iTys9oi7DYKTPMteLz1R5ys8qIx9O9gI0jypmgM9XzfCPNKWBbw5J9o8eWmYO+4nHjtuNjK96tz0PHoBVTrOR2k9nq4qPLseUb33o3U8vVgtvboJFj1CErY8XqQUPZXAU7293gq9zldCvcXLZb0Zxpe92xQsPIGUcr0xsjc9GnEsvRr99zzhSgy9M2OavfFIoLzo23W9oPqxPK4DDj2pR+g8qmZavCbvpbxCDig93maMPbMgaLtYIMa8eueaPAGhjLudZCA9Hv3APAfKaDwN7ZC7KSVwPHqeuru1BEw9Og8KOrnQybtvsYo8P3vRPFH4KTv9QQu91cBUPR+ktzoI2RU9gWU3Oy5xoT25UKM8LmtmusM+GD0NPrI9+O5OPZ/eqzwtClC9GXifvCRcCj3CeKm8VX9MvFUlA73sbAq8EHeivFGPQ71z0rY86KY5O2ysm7okQMw8K0tOvAZQtr30qoy60tNbvZyFMj0s2qy8zZrqPHDXqTu6rpO8VLabPQaIZz0/9Fa9sT03vWcVsbvbW4g8vjjQvFA+urwwZd88CypRu376fzu4jJE69oVsPFSNBz3Rgz48IgsnvE31oLyShYi9cgATvUbUGDu3Zgi9kBOmPGwkOT2cEUQ9zUvjPM8GIj3bj1C9gwbRu0YIk7yHUOm6IdEFPGNqPL1+5NW8dsbnPN5B9rx/21e95mMUvf3d9TxPXg882+HRPHTokzxL41O9F6JiPDpWub0zMWK93sXbPLVlZL0bv7I8AJpOPV4oLT38c0m9FGGsPfGdkrzwv1O8B9QUvevu5T1QFr88M8nzPKd7uLzmAoq8mTUZvVO6XDym2XE8ZZ/gvAeNIL1bWJE97ATnvF3HEL2sNik9lfVCvCvsSTzgpZy8iooVvfqzJD31LH291jUZPOeTo7zi7Aq9sXwwvbLzh70ljv+756C/PPY2R7zNCkw8+Q6WvIOFt7p0gy28oofhO4FydrzmjGI9wkQfvAbNP70rU8m8mRJquvdPo7vEeyM9v+C3O+hL87yLa7s9wlSRPKloL7wr9dw8eLMJPGjff70z0P27aFSCPeZ2xTnN/Vs8ueOJvV27k72OnKq87quhPQ9BSj3AWAq5aljLPJJVfDvGJdC8M7YSvbMpLr0t34c9sN6wPATXqrw/WCI8MbMdvV3rf72dIIw9SsnzvNvscD2UC648Oua5uqCj5DydWEe9y7K4vPqRijv7y2u7fFcvvcd8lzwgcak90vaKOobsL72XY0+8R/1wPRLXeLxUmG89rthRvVDLhLwcEck8kiX9PIPBjT1CYpa9ArYyPaNRJTuyBcS7O6b3vHouaD3DERo6szWivJd5Xz33BNO8z3QqunNXDb1a1VI9VxovvDvzmD37Efu8JdkgvXvSh72uWlM84Ws4PO7zJb1cHhi9szMsPVqRUby27ym8RkzPvDiBZ7y6XZG8OxmFvJA+Lz1nniQ9ZtrJvKTrD7zf2lq9pCF5PQlLHbz/F4u7kYO8PHwouzwEC7Y8XxNYPdPNVr0Sbfs7qj9fvWerpDyzQzm9cSyevfP+BD3yGAs8wiHpPMzU47wvDYI7B2plu2STs7wDiTC7dv1WPH7Fljwsg/q8MMXGvGQ2mDxs8e885BGBPcKOkbx01gc9F9iCvHiWhbwvJyG9efUMPSocOTs9hsU8TFWQPJrVBz1lDUG94WhwvfScybtHESg9KcMzvSWuVT0K5Ye9oUfSO3V7J73CnII6SAPTvK9QRL23MNI5cChKvPbkUT1HLRu9ggVnvSKcST2BJii9lyOvPIUYqjvXmFI7nbxGvLBwizxUvcS8pzGFu/ZrHz2OWB88CE8Xve9Ulrz3N6e8ToiOvFFPXrxfV5k7aMPKPLxWIz1Yw4o9feI4PWMZAj1kz6i89CpgvNpLbL0aWDQ9f/+VvG0lD7yiybk7gE3zvBXdub09oPw77vZgvbkiPrx5A3u9SAZnPL4M0Tt5xxU9PLtWOsruqD10WFM99OczPSO+0rzMZzS9Mbe5OoaND70gKxC9FJ7zPBZoYTxFdqk8N+mFvCwndD19fZK8jnTWvAyiEr2j+5u8SjGXu9+OZrwq+dM7/3egutO5AT286mC9M/ofvSm7t7z9+a87SUhzPM+heT0sIW87tfvePLi9Tjr37rG8mgGJPNVdh7uwjo0817pGvXZ4Ib3dWiS9sQpUPWJspLytK6e8lGh3vMsbjTs72Tw9xczWvAV4Gr2f9pA9jD5svOuhcbs3SQ49nwUWPbLMrr2xXl69gUULPZRHbjws6ZY920tfvKnpzjxtWm68e9ypPJOb1LxA1pm9ULlGPDvnkDyu36C8vGqYvLwTYTx5WjG7uFS4vR+eX7176po91iowPYqA4Tx0w5O7zC0jvcUAyDxrnwq8mwvnu2QZAr3Krkg9Oy43vLE1Cr1kybG8AkVJPVmLF70cLFC9bQ6CPIYk5zxBPBs9yhhOvF/cD72MOwM8ivy6PAXfoTx1Pns7Mag4vYXhtDxliUM9i9xqvH4/x7zxWDI8lC+rvCN8Sj0Tft093eLhO5AuVTq1dRM9efv9u6ZCbL1RYf68F4UHvUkNG735JGQ89nY4OhLawbzkN/283cijPWp3GDty/1C7M4VBvZ1mAr11G+46kq0avMfnFT0ezvG8SOKhvLvsmL0E/rY7YoFbPQVNlTzBc7s8VuH4vK5KnDw1XZk8Uh4GvEbVDj02gK08M4TKPNPUMr2aS4s96bF2OlQ2k7yJ/wA9moJ7PIfvn7xGBdm8OAC9PH6iGT1P9hG9qKccvE5ISD0RnRc9t0OePK+rZrxK8wu9ib00vV8sLDuLZFK9CBmsvG6bqTwM5rW9VgsyPd4bcj3hx/M8suTPu0Z7CT2f0uu8+IWKvClGlby+Iv+8tBl7vOJ4ubw+Vw094ySmvLCJIT0/46G8sOHZu6QV1bzfryI9nAcduwLYiLtqECs9++emvJx8ET1aH2y9NHdkPGP2yLxpVoG92KiVvG7mhbw2s0E9zj4mvSvB9by7jHs9+X+3vEXnGL1cSPU8XkBjPK3ypTtH6k49KF6pPONr77rBJsK8Y5PbPOc4Db2E9626I6TIPId95jvOR/m88YF6uqLBSz1n3be805lgPApqd7ybZLY88z3TvMSlHTw0Hf+8DP1jvbwDhjxjg4g8HWcvvT5NB7uFMg09bbokvJFS3DwjnIY8nWocvJWuFj1lgKA9J9+ePTHrhLw8KjK9iA1SPdRT1Dzknzw8DsYqPUqqZb09q888obqEPO1lBzxGA6O8zSeZu7anUD30h1u9xTspPE6xD7zDY2482hIsvUE3ezyuuzi6wyz6vHy0kbwJ58Q8w1EDPXXWBL3adF49Tpg5vY8wdz2VTIE8yLEIPY+9ELyaT6u84O1SvC/bbr3esCS8dgs8PbLOhDweWi89VihnPWuSGb2At+o85HMkPcK4Zj35mTM9UhKcPab73Dz1eEA38iS0PDwrNj20ONU8J7rIPC7xO73J5KS8zydLu+2czLukDZi7X3clvSFQ+bsZtwW9IL10vc0B1DzI/i29eCRNPaAOej2ZxsK8M7KDPcK/Aj0kjg09yv9Tuzl5Aj1lkmE8KfsIvQ7IXr0pW1I9xKzUPG/EDr2mSdU8NlBePSxQRzyJhW28Uk3bu4XzJTxKpig9gNYrPZuFjr0fI7K7vq0yvdQREbt7FbK9gLc5PCf/qzxibjk7Ip8EPfFxQTz0QZI8
  5-4: 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
  5-5: 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
  5-6: d8VDPSbqQz2GwaC9nHfLvBNCUj0izKC8jgQwu9G3wLziawc9fS/DvGyBhzu0rog7++H3vDwTkLxUGwG9ldA/PUED1ruW/cq8eY8Tu25RxTeiErS7Y+QOPLYT6jsmJHI8JzEYPBwwNbgLEog9YU0OvYfMMTwEp5m85GPlu3G7J70QYqe7B2umPEfGzjopU4y9UuboPIfGkT3ax5G9YtTxvEo777yB20A8Yn6EvVusUjtfSZA8txApvEO+yzx7SPM8yQyCO9Qojb3FhNS8WdKEvMhV97yZiI489SQhvek9ULqnI4w8haCyPRzQTrx5rYk9AcsUO0EWmz1Ti4M81vAKPLyg5zzzEN08ZUf/OzzHwzzNbee5O97wPJ/bizt96/C8Po+7PMNFdz0nPlw9OtnEvZROj72fvVc6n/LzPLW0ILx+BXU8hfE+vC0JpLytAD69ze2OPMIY7DrJMRM9CdBmvFkbLr3ZSdM74NLovHlKkDqu6zC9RlZTPQJ98Lz/lke9SVKSvFP427yZesG9duRGuQqG67yuvgQ95wYovQta5jwJItK8xFfqvGVISryMrVq9+6TkPKQZiDy7s8A7ZED7OycarbxTMpQ8+F+TPG9YKLxzm+a8R9NQPAYzWjw2zbK8skQzPXo+z7w5nze9NBcXPHkYzzx+pis9QtHSO6NBy7uw41C87r4jvIeYabxu8CO9JlklPHLJojzq3ro8hFcqvGWXNj3gbqe7mVltvNSykz0trXC87juoPdL0vzx9TNe9LMmYPFMr5Tw9m7S87IuHvOaU1LxZAeW8HNDbPI06Hr1peGc9JyZkPRzyTrpIS908rR8Mvccvh71Tkkm9LzJ/uicjozxJv/68BjEZPYxO7bzCvyA9lUiRPVgtajyUgVq8jDxzvYeHjDz2NIG9PNQKu/rPY70wnN487J5QPIh6Az21giQ80XCdPN9YDj3FG2i9sWIpvWutsrxcPJW8WfrZuqJR07q2Mqu7SNDrPBOXxDx8Sy894DX8vBJtD7w7pIq8XBpVPFHkmrxyCZS7rVgTvI4bG73EpH46CCcpu2TVtbx2zE68Op3+vJMIhjyDejK8NP8lPVfNED1ylGI8aTzAPOW1L72n4Si8acJOPPmUXTx70ti7Q8uSPUHZ+jy3+Uq9w6oGPd+L2btrKIs8rdY+PHi2pz141jC954mju4hxYr1/Zxw8FCnNvKiBOzzue5m8aSpPuzUR1L3UMB49n8ukvXFcaL1qYkA96U1yvaY4hTxMBXq8u0qOPPmrC70OnQ29mR3GPHlOvTyHN9W8VHhLPIrIWLws7KO8EsP8PPeqcDtdMfu8hsWLvc0nBTwummk8ivMBO7wfjzx1/AM97KKTvbcMA706xoK9+mUrPVfq+bwlCk282OWOvMKFjLzW7Ns9+/SbO/tYgbtditA6S3ZHu69fMb2LTB85iJi0PdwZUjwxAQW9molPvT7yNL00Y0m9W+2OPJcUTD0XwE69a5o6u5TzW7w1Dc+8UKEQPbioHTy8GGe8AeZnOeWU8jvIe1A9kuYrvdBcsbsv7JK8FIezPLn6gTyYPMm83e2KPZa3Oj0nPju9/engPOsBIj2ucfo8JZaKvLij5zywApU6IGIJvfMMMLtmSyg9wvWHPXpfo73EXCA8IVvavNwMDjz7Crw8bRAtPWD93T3iFp29F9KGPVqVzbzV8vG7rLuMO88rgD3VH2y9X0ATvZ31nT3huWO99G1RPc5vK72vqYu9C9kAPctAnrzbXyc9ePlSvTbd+LwRiW89PniVPOtAp73lAL48qdEMPcAKqbzpYoQ83NOGvMaqGT08VgC90csfu9PgbT0WFdq7hctLvYA8Yj218Jm8zZq3Pcbdgb3TAc+8xQZrPSXQODxx0mE9wnWsPfpimLyQDRk8I6RBvXqClLwYLjC9PABLvbGP1bxaXnO7q0h1vAx9C73aqJU8OSqJOxC4lzzunMk9Q96SvJWL97oLeuK7SOjju7L4JD2Ppdy8wc4bPb0vMb2Qdrc8YMjBvT6QC72U/7s8xzXHPFDQzztSEzk9Z1qcPFF02jyMeeW8ZFVTO7gDzrsfVzs97/OEOpdMML2MMDy9jEN0PFpbOTw5ySK8ucbHOwI3pbz7moW9mZdlvJehVT1fAY68997LvGLnNjw52rC8kPQGvS1MlDz15Ru7DCGdvCO16bvqLAC9doeQvapdEj29E868jsmLvOJ3nTze2BG97Gc0vT1/27vcdYW7fsGiO3PNJz0CYZc7+YFqPUSzVbzTZ4o8OfG8PAf5l7typIc9itHVvLZnR7xJJEk9E728u7Sj9byGbMo7PC8AvfsXjbz2XJu9E3RVvM2uxDxR76q7J/1+Pb6/Lj1q3KS870mwPG/0Nbyrtl29SK9cPOAkM7qVB7S8AtIYPEtuNj37caA9LmmrvKwUHT2WxpS9nKIsvb99Cb2ZPHC84gBMvWME27zJvjm8MsCGvKQiFz1NDtY8+mxqui94lTyIgZs82oFDvUTyHz1ojJi8VHZmvDinDb0LLO+783KHO1QzGjs6eSk9/5bovJlFHr39i529KwMtPYiOkL13eC+81iLDPQP9ELxcp3s93k4sOxJvor0G9TM9RswRveBzLL3uGtQ8WnyNvIHDjbwXqmk8vmIzPUJqszuMFFk9yZqKvTYiwTwq2QY9J2bvO/T7fTyRRcG95ChLPd9babyYega9AkU0vdDWFb1XPIm8lHQRvKXYkbxpP2A9FlKrPFFjkTvYyjg99cZavKTjNbxy9xk9PK+QPM+zrryDguQ8jmvPPIQuCr3isEU8O7sMPU0zFb3znse8yGcLvAdKlz1G/5o9av0Zvevkc7xmEZS7p3SYPPTvRj2+afm8u0I4vZ+arrv6X+i8vknjuxy1hby0/o68Lc2dPFZMbT2SsY898Sv1POsjPr0tUik853kBvL99Cb2oVpW8ueppvCiKIb0pnmm9xRcdPdtWt7ybfVO91WngPWyUybwNa8087tabvAqmObrmGjU923CUPJ/TNT2Q4xm8iD2ROs2gtbwDe9a6NIIhu6/d3LtO54Y99BiLvGs+zDyozgC8jZpTvCvFQT1RUyK9+aAKvY94UTxAhKQ8zrluvOmYl71WMJS8SOCXO41a4ryEtnO8QpTgPCimMj1G+gi82WUsPS0mz7xsCjY9KPJNPVZiDDwe5ze9G4RUvcpyFL0XJqa8pcKfOyxdCD3B7sW8LJshPbopoDsvzKo8Yg7/vDgdB7yjirm8bwtwu3ogfzzCIMK8pH/DvM7BIz23bze8L/M3utMx7Twugni8AYXGOvmfejqn6G68RJ79PCwfyzxi/648m945vaGmXjz4BZe8km8LvdR5x7xzCpq9uQVcvPA/DL2ssB09r8UIvYlS3zz7x7G7SoJKvKtuurxlSZW6udUGvAZJEb2qt0k8baKJuoIcuDwfrji9LwcKPRodPL3gZXa8WLg7PCCU6DzoCLS7pECDPbEjJD205FI8kiY+PJWaXLuY01G97tknvFVxzTtT/Au9FYw/vW3AGb0sIog8i5A2vBpkF7zILnc8fthpvTQ51DygyL+8CI2APV9OIj0uzgI9b5DDPR0WibwaSKe8acrsu6DALj1RZDg9UtcRPdMDBjzGGCM9ZQHYvN0yrzwIn5u8ronEuxipoT1PGYM7m4H5PCg3gjzfQJa9g1kju9+ZprxEBaC8vW2SuxV1Gb1Lp4K8kJCHvLmolrywpE49xLjQvDvOzj0slxU7fnQOPShziLyeYY07cDVbPGpgrbxvGf+6dN5PPF2x3by5BIU9dfNiPWgrmDtrQCQ8f2CbPWQUOzwQkPq8nZzIPexV3jw7yZu7QmCcPLAaDT31R0M9VAa9PMebnj18Hx48CS3ivIIenTw12Mw76EkROoH4ZDyB3Is8ar4UvRVWFD2ythO8R7LBO2Ot/jz6oqM8QG1aPGFxAj3bJ+i8E1MEPdAa2zw6mIs8rVdIvdatYL35uL08U5KbvMsVD7wr6i68UGp4Pd9AFrh91t28AgLyPADdlbp7sai8Jr2xPG6vxjw95bK65p+IvFv6DLwj9sa9XceAvOZ71jrHgEu8vyXBu3uylLx2wtg8
  5-7: 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
  5-8: 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
  5-9: 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
  5-10: 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
  5-11: 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
  5-12: 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
  5-13: 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
  5-14: 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
  5-15: 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
  5-16: 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
  5-17: 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
  5-18: 2jU7vdOnX738zj29pIjAvEIHsrx6WSO9DSiCvcFNUT2KKju90EWBvK+mLz38nIS8s5FkO6vKtjyiDDY9nmHMvILTPT3y6Pq8Yo3dvOgAZLsI9eu82R8GPEM/2jzhi449thkxvcOrhz0mbLs6dq9julLYybtVALy7+wZGvfUBQbwyIQ89XxhIPa5H77t1F9E80zaFvXJyVry5sDm9JpsHPJuREb0LtCa8oa31veIWubx2Huq74hY5vJaOYLy3hy093CF6PeDDFr3ZXh+8pavhuwJK4ry9Jnm8AOK0uzI2ojz3CNq6fMlzvGO38zzeh9O8PZzzvJgPFDvBbpq8YhyDPUYnETta1CE9gNzqvMWyID32VW27qQ8HOyedaj2OIIS8kXRQvf3bJT0P6iq8YB0NvVg8j733zxe89Vu8PLDX3jpmngA9/M0TvVg+47ydRtI8Oia8O3E6rrsDqSI9cKpOvH/FC75DkTI9Mf8bvYtN2Dz9ljW9xmdhvK7YYDxxXJU81g7jPETAjb2X7aA8IsJ7vcibgbykjiM96c6qvY3xqLzgcb48tKu0uvJwGTys2Ei8H22FPCM8Jjzli868TwNavVBIWr0N+Jw8N2f1u+R8Er3+gTo80aaVO/PzDrtcXQi8OySAPYw9Er1kTTK92zxUvW4DkD0GVIQ8tyBKPL9wTriZVvi6ReKAunGx37xoDlE8oQSDvDlWGb3HdMm7nLMEPW2VEz042YC9e3sWPWn3iTyS/aY6qNkyPPp0Irzd1Oa8aYTwPGV1DLy+fkA8JMwFvbqolr2oEcu7Ka8XPbI8Dj10XEE9NwShOnGPeLzRNw89XwtgPYtaQL24M5G7UEhavB/dtTwNUhi9kMHjPDpm/7yIKhs91l+ROlBqTbz7ZYY9kiBEvLjb2byHjDm93+YTPS8Apr0q09688SyxvCi+M7ty09o8mn/kOdlJjDu8y8O8dA8cvIwNLb3rnbu8e+RNPQPoQz2YefW8atB5PTe/MD3RIoQ85NjhPJBQCbzVKuc8oNwxvAv5JryBXZ48ROu9vJuGfT2OFfA8KwI6PeLCjL2ZGP28ceYBPC/t7rzsVge9BEcEPcd0ST34mDE7WJjePKw+grwXHqs7fFgZvUZF6Twvy/s8Y+ydOxiGuDqbkZG9ZtA5PE85njup/fm50xZmvA/qKj2y6Qu9kb4FvT+wdL2Y59G8J0k+PekNTLxf7jE8cecrvQEmm70ar0S9CSqWvZFtVzyKI0I943/wvGneazyDoYQ8MexkvaZxhb0oazG9z+ZAPXyXOru/KQo9Ln9yO5syUbyhEgW8sPI4PSBnNj13kYs82lcuO3XlF718gi+9TAtVvAQgbLyRbC094dLSvQfmrzvZBnA8mXCoPUTxHLtsGSU94jI9PJ4oEjx5hf07ZkuAvEeD8Ds0TO+8KUARPb6b7jpgZFG8MGAQPuRFlDyOreK8rmErPLzmrbzavy285HySPFnkZz1x1PS9zrURvRqnIT1qxyy8eXUnu2U+mjy4xs68Z1tku721nrwnsCE9jJAcvDnN2rsUlAq9aT/yOrfjfL35bQk9DJ8rPZEaTbtLhpG86ph2PRewvLuVsd07XfWavGJ3qDyH85w9F2RFvWNTgTwvpYA99tCtPJFKuroFquw87Ce8vAzyLT0fSCk8oNuGPfECqzysKhW8JsDnPP3MgTyqaaI8+CR+PMLDcD1N4Cy95NhhvYS//Ds44SM7IRqjPT/twb2YCcU8yMyQPIpvtzwyBqU8uFdIvOe0Wr1hArO7w1kvvfJsgrwwuzW9T+H2vBzrB7x3tKi7zHGnvD5GEz3SoMa9fTUcPfqIAz3VKBO8l7BTvdT/mDyKuoq8bLggPEd6Ezv3zKe7rTgzvFi60T1YMXs9Tf1aPc1+E71wtgS82C4ivbT3rbsB4Ro8FcwyPdfVsDxNZD69tN1tPa5Sgz1q4zC9yy3Fu5PGSLwl8Ew9La2DvM5Orrp1Ts+88QEBva6FZjxgvaI73EEZPRWP5bqRGIE9WYiYvQsr4LybF3c82XMiPZJsPbzF3LY8+p64u/4fjL0H0aQ8n29evF7hSb3qGjQ91uTMu4QJnrzbJ8k7HPmVvF0tM7wKOdK82Eomu6pUk7wh8Iy9pAMJu9/TXD3/nc68o7+ivOgTk7wXXKI8ikuEvClqJz18URQ9pathuU5BwbwhgYa6GkhhvdX4rbxlwqe87KqjPNTOBz0Ux+076ZFdPTicM72oxKc8mZIbPYanEz1+gSU9pU+SPXD38bz1RQe8xBQ/vIV4ODwd3+k8rLd/vTu9HL33bz29HAJnvT8qD7w5gdk8MSiIOw3s3ryG2Uy9MOVLPPWtlD2vk/g8DX3YvPjHBL0af987UthJPZL317wnFwW9PJqfvE9bkbvzhAi8UrsbuZ8oGj3pXyS7jauOvSXjZD0LKQy9yuARvBN0W7yMYKc7FjVqvdS86jtL4Aw9VbzlPDn9xz3WB2o8r3ZKvJfYFb1u20096bvzvEU+ULxR+0a92sBVvAgAgL2VnFK9vU/lPNpDTbzGz267Uj4LvSJRIT3WZpq7TLFRvH+697zC5WM8tCJmPDOCI7ypcIu7+p0OPfCpubzMNN68mdeLPFqPsTvbvhG9Xh4XvaixZLyoevK7BrUAPWShXr13XPE8BSyqvdrGNL1M9tE8l2kPvcOCm7zYlQW8SjzUu1ADarsbKhk9nKjwvFPrFrzBG5g8hX6XvNu+ETp/iLK7T04pu9FUPbqbuyc9ZwHpvNIbAzwOWTE9kcfSPLtlej2NoPq8yREdPa9ul7vYNsU8VYKJPTexLjxG1lI8tu4AO9AItDwYa169qfoBvMcuLzwAPVq7AZ7uu88BG7sk4qq8nvpovVXcBD3e2/88/ONIPCDPM7wgRcO9szWVvYojQr0TJ7g8LebFPHnQTLwmzum7LBarPLj1obyoM648buGcPZJ77DsjdWg6wt24PE5OmTxjKz+5Uj8tPY/xSLyCEIu8tI4GvFG2Vr3xclu9FiDfvTPzfT1Q0Ia8zX4TPaPULbzw+5E8UPMPvMGg07oOsgo9/XtLu5gQvryHXNS8xRmEPNfqOz2IAlm86BMbvN6TkTwGzN88sga6PIqSSL0+XEi9nZgqvT461buRnma9Kx2UPfIzzjx7DJC97bE8Perd5rxCMB692XqrPPFIRT3pbaa8lo7gvBWCfbw6Ag09Y9cSPV3HeT2gN1a9sceYPWk9LD3M4DE9X8VFPL6mAj24BfC8elmju71+tDyr5ZC9N7inPADaEbsD6EO9id9bu1QNlDyLGx89MPgCvSfaNz0FTp28Pr52PCTMhb2+aTU9rW+hvNAWvjxERnM99vmdvDxldbuWEnK85nsIvGdumzzftQQ8kUKXvRIZpjwANI098IyLPGOaxTx1dhG9bbeGuvUzej2QWDS82VhIux3WFD3oE5u8qweEPQ8hqbwDvi296I8JPfwgFr1bdNe8M84cPe7wXbzq6SQ9p4DBvLMiXry+5/c7JGUiu8zuvbyscLu8VWFAPMeBsbsgANO8Z8pqvdUB+zzOGGo8S4HUOw1no7yp/Xm7X34BvWb78Tzj+168DaZEPUk0mTzwVre8J3t3PMFFrrxyMzW8EIgMPcAOMDwV4JM8DkzJvK8C/7wQsiI6+tfqOx7COz36iAO9kuNqPP8EMr008J+8n8AMvRpq1L0GZfy8G4xHPWL6D73JWGU9Z8pqvQMa/bx1+iK7gNRHO/A5CT3H0wm94DKdOuK3+LwTudu7oW2qO7lxGD0jS1K9bMfMPCDX5rumFwo9Ny43PbqTi7zHXqQ9XJbKupz4hLuJ3rE8g8saPVjVKz1huP27vu7wvG4gvjtFwuE8NEqbPNAl4jxwQkk8mp8DPAILwbzdoq268KpjvG0TVjxPY7S8cGb4vESgbry1sk28T7fgvEORsjy6OZA8iSTMug97JD2HhBY9E2SFPPcy8Ds+HSe9dw4kvc18izyE2tY9IKymPH1ms7yPBIA9aqZjPZCytzzMEms9jcAZPUBbPr1gvkw8rTEoPLz7OD35B9A8yLAMPZh4y7wGygu8umtJPa11gD2mLJU8UcmNPUuPXj2W4Dg9
  5-19: 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
  5-20: 3l5EPRt1Ab1XlkO6czXCvEitE73v6hA6wxw/PGBpgTuYMHE9LB1sPHUfTD3y/4E9m+1VvAQEH70J34Q7hoXxu03ORbyP0Oc8JyKAu8KelDwTNIW8iw+TPI+B5Tslf+U8RYcjPTnRDD3/u109lqbDvDpeKLvuMVG8LRgovfK4lb27GFq9oz4DO4b76bxpcSY9CQmfvMDIHD3rGBG9KJW3vH9QQ7pu/mK8c205vYN6Gr2zpyS9KBO1vKb6hr3u+zw9R3+LvMFqlL1BZjI9fZrCvFSMmbxx3iI98C0mPR+oXjxtwGe7fZ29PW86pz0agTU94Z3OvAr3zzzXa6W95WuHPM2cQbzdnlG7WRv4vOCpKr249DS9V1KAuwZrurwhZhc8RJxPvW5UPzz7iVE9T2IZvb/pFDxpcn+9k2oBPWLhib3kfvm72ygJPVBz4Ly42OK67WKQPLoVW7zqBYs954wJvd+iKb0PxZc9Gs0Wvbt3ibv2QnK9V1x/Pf8j0by9+ck8M9QovFLNubwWcJO8NjBEPMzDAz259jQ9X9KkvW8NgLx4OAo9Q5SZPFnZCb26a2I8gz8/PWj2DD35wE+9mpFYvTlJi7w+nf28p5SJPWMHHLxnuAw7xWKjvLacnLxDrQS9AIwQPVZ2lzzYV6i8TAyCPd83j7xvOHQ8fDomvMYLvDw71Xw993HcvGFz5jzaS6I8j9Z9vEv3obyp1NK8sX5Avesk3rzAorK8k/lgvTThtry1nCA63OCyvMiqM73GA028GH+pvcoQmr3eldM8MKyPPE5vvbw9bWC9UyNbvBuMPbzC3j+9KySpvNFOuDwVyw28k86zOxKKWjzOj5e7Yb8YvX5gLzy1z1+8IVEiO1koL7ypdVA92SuWuy9KKTziW148MfQQvSeLwjslfAQ9p86KPWN4E73lXso8wl0Du4f8Xz3SeY+5DsAvPRScSTwNs9Y8eZ0CvenDsTyfFfC829aOPZMZPj0ecnS95mjrPFn1F70b+OM64kktvFkBK71S3H88g+amuzKHRLt5q7A7CKwGvZ4mYr04M4Q98dS3vOxTpb1WY4O9ib97vVG407sSYiA9kGpYvRXjozvxdOc8ZcoYPc+Dhb25/Jc8Rs9TPDDVsbo23Jk8t3yvu5YUTD0pNLi8p0EqPQ/wKj1ONkC6FGwdvZGjLbwBtDW9qIwvPewAYj1+BGc6jjzcPCYjWj10PVc82heVOgJ22rzwEQk9YNRmvf3smz0e+ee7xLMTveJOrLzKljI9MGDhvJaDkD0T6pS9+CYFPIQxhDw6Csy8cf8XuzEhFbysnQw9vS3ZO1DLtbwvmXo4nxWduhioxT13Jac8GL0APas9zrtEm+G8afGavQdYdzviFgW91+6VPRXGQr31vks9dN6vvHQdsjxaaIe7pgqcvMD0Pb0GrhA9t8MYvDY7Wr06GgY9O8+CPZITvryBwMw83GyuvNXDjb0yhXk9AC/AvBEc+bzMsds7hjHUu9N68zyMaQg9ry5evZrp9Twgr+I8y5YqveYOdj2/rGs9trEHvTLEhLvQTGW7+7CaPNkYsTwxSSC9T5eCPHXGMz0dICQ9Yi7ivJZ5/DwYQMa85cx7PWPAJ7w66Rs9YCcMvf1wf71JhzY9/s7fvMowDb0OmXm8HKmEvDtOTTlf8n07uZ4JO/m9QL3ElIe947mwPaZiZbroCLo97JfRPAkQOz0L3d87rSc0vVZycz3ip0S7VQOIPZ1tULyc7+q7L2M1vSskKD0dipe8S6VTvCGtObv8yoM81OvNPHccoTzzbaU8LGorvXUCkL3YyP68wFWAvAEpSDxl/DC9opmevL9U2zyZOkW8CZo2vJllPD1So/i7ObCXPBcO97wXzRU9hWOLvbprqz3AiT89NcCfPZ+ADT0fmWK9xDgpOMb3kzzkLBe8pYSgPXVKtbyJ3iW8XIq9Oo73ND2Q9IW9ZWUiPQ3JOD2Cxpc9L1oHvRNTBTx/Ly09zUKbPOsGyr1r3Na8oSsOvdTUUj0El6q85vVdvQ5+uDzp9mi9HPYhPTcUibn9iAe9XTG9PIrGj7vHy9287zwwvH2b9rqGOKI7wuWEPWBZFz3FByi9B5pZPIMBizxVXzu9hUsKvPV3j7yqtA69jq6ZPED4HL04lhG9kt1avFX/NDzjfgU9D+OBvRI6VDvYk/I8PouXvOAaqzwp/aM8qLqRvWMXzrsZfMy9ZmVrvYgqSz2LsLI8FXboPfSUfL3186q8f1iYPNFiVLxVTQm9O194PbcHL7tlsw29m7TyuxRwVb0noAo9qZCkPKUhuLzd5TK8prWLvQWMm71Wixc9pdtyPNWSB708uwW9BRA8PZf5ST3ls3y7wPmVPezNJTx2Y8C6+9AGPXmhh7y9zpi794UAPV4Hl7yREUm9d6QvvV8LFz2P2zc9lLSuO+ZGFD1GMhM7HWBpPQ72UzwRcxa7FemGO8w4oTxQl4a7iUwOPS/rzzwisAe9pL6qPMXXmLyPZEk9kdoeveBujTy4GlU8NwcKvZIT5zu4c7O8ivOEPQ+K7TyFulU9NBrGvAxRQz3Grii7MgO+vMOyjb0On8a8K+mEunGzu7wHd0U8P2VjPAbu7r05Qxu9V8M4PB4zNr0e02A84/MKPerNO7zBdR491qvtOwTYUz2JeQs9gVQSPbPjq7yQwg28Hu6jPLsSA71SOl681sluu9/2yjvmjxa7pvvwO2ErDL1MCLQ7Ut78vHMsyjvAJS672x8ZvMcyHr3hXG+8P8tgPf/gdT2fnn+9umPSPAMnprsrX/I8ookUvFuG+Lxh6gI9kOYYOb0dg73mcgU8s31wPH0bD73mEGQ7SNeVvKLM+LtrPNK8psAiPTwo9rzCqYE9mWUkvVBxoL0vRd087gUGPQBFJLu9DCm928nRvPWDFr0vAnQ9sGgYPC0yFT2LK/w7ykMEPI4Vz7xF0i89knORPOu1Uj1G5Vw8zXzBvIc4+7srjtK8tsoUvQXR5byi78M8rdrzPHi8jr1pAjY85GKBvaExODtvzfQ7qaeIPQL8pryGxB48HFb5PMENl7x24VK7kesAvYqVT7to2mK6Jej2PK4worzYDgY9SNyOO+/51jmx3aE8m7sTPXs3ULxXquE8urSEvGXDiLzWUzw87GsePVTPxTjDBRk8I4hhPTXLGDxxnZU7lh1cvA//+DlA2hE9zSkePeFLm707oig5llpvvfz3OzzPhlQ9xA3dvEAt2jz57NQ6R4TmvKCGbTxtxA+9hfFQPTDEBj3ZfWu8l/lpPR+R/bttHc+7rJeMPMn7/LzB9Ew9zUNLPcKRG71YrDk9vJIBPaYIN73n7wE9M7y/vE2KIzuWSty6wQDzvHj/x7sL9o68i/+jPNRPM72L2aY9VyCMvOQ2dLxC6hs9Cdi3PFMdwrw3huC80Z84vXc2m7zXQAu9/yyXvCvLaL0E/uA6rgNFPZQItLydZMe8OSBrPSMA2Tkn+hI8q8IVPQHqHr2rUZs9ecc4PfEMzLvTH3281gH4PG8tWbyfPNg8qXnovFlEADySi00925q5vJXJh72/xJK90VNsPQBAXLz1oj+8rQAJPDHYRTyg7/85Q40iPQ+DlLv9RT49dCTtu+fISbwHK708P/saPImPL7qAvqw7QiEpvJ8aFjz3/388Kaw1vYTpOLxuNei6RHQIPcNVPTvZLgi9JcOovN4SSL2i8dA7GcCtvFNlcrxVGKY84MYFO3/cmrxHSIU9DJ2qPP3NwDySvJ27fL0hPIhPGL11DlM7xDIRvbD6gr2DFDu8dNCjvOvMgTzSKGo7vYDePJpCUb2OZfo67XgbvLdVB70ynRq9lhBWPUjnSj0JaYy8EYPxPNrDgTxp3SA9Fog7PZR9RDypf0M9FFvFvLGBQDzfQk49TFu+O7j+l70C6Ie8Wg8XvZryHr15gKu8AEZLvbMLKb3S5iu9tQgIvTeBcL2Vq5Y7l0U/PF+9L7uMwrY8l4PhvNQhN7xXbm89cNmVPPbXXr2lZ2e942jPvEE4AD2MX2s7kUXnPJvtXDxOD6A7VipPPeUozTx/oBO87NpBPBKLnzzeZ2Q9rjNtvBIOPjxO2iw9tKMQvVmOV7zU7q87
  5-21: dZjAvOd/vLynyK29T2eJvClpyTZi9E68Y3l+O0R6pzt+sks9Fcb+vIYpH7xE4tY8ftBUvVZazDpasTK9Zklpt8D/szzB1e88RZubvHAGEbwsjhU9soI6PUi+k7swQ+s8WH5Eu5TsVj0ma+I8PHwxvbZglbzQ3Mo8St+Euqf6Er1p4bq8qmpLvcWcFbsWYoY8uvqRushsbT0nm+a74LHjPCHuWb0XeE29wbTzPAFNgrzAEyK6GVJDPevCD73RhKw936vGPMwGwbxFB6+8kwBsvCtwgLlm1t47K+JmvdLRhD3U4dY8ZuxKPLzcYD0SnEM9x6LkPHe6Ij2Jrs28IKkWvVTpGz3AJ3k8ry8zvZVHIr0tkMk7vo5LPT6c6jzTGQy9lTVcvTTpHz0d8oo9i3gRvD+/9jwd5hW9SearPfBmEL1t6fQ8CgovPdu5Uzw5WIg9ZC3rPHhhVzzA+1s9tfYEvGb6qLx5fQw8YsjrvFy3VTyHnMS8QrusuwP0G7yDbjM9O7vOvA8Uqr1VMni9hKPrPPyB+LvJ8yE9IvDYvCQIDL2cxAQ72pVUvA3oHD2qYX28QplTvJcFVj0ElOG8pm3SvLHy0bxD6aQ8naETPG+mvbw05xm76aOUvPl88zut1Ce8YGSYPMvD1Lxzn2e9LrW3PNhzfjw+grK7tzoevFc+vry51Ik82iClvbYhsLwJEki9LTYSvSk0E72XG8g8BZhevYhTKr0pPGW9oHZ2PJVqtjz5v7u8EWxvugwyoTylDH48/5eHvAwxC70HcKK8gPS9O3c6Gb3JJJk87ee7vAtPabxH3om9bMqsPGthAry0hws9DeDEvIuRiryYXTu7V2wLvauHdz3uq4i9C6ENPfJ0nz0MxQa9IQ3kPFtt6zwRqTw9Y0/avCQpRjyRaPg8GURUPc5GAr1Anxm9pxATvZOuozyG/Qi8rNmlPBHS6jx68d28vdeTvbxRZju5BOc7BPqjPJnhqjw4Sy+9BCMTPTCSAT3HmB49+klMPZp9lb08wnQ8p5VfvENxB7yJO/G8vu7OOxo0cL2ycdY8Gf4HvWfyz7ylnYK9JOWFvaj1Kz0d+2O8wnMxPcX1CT1TQI08VEn6u7h41bxuHyE7i5yKPPp2ervYVdy7M2U3vSCwDz3F5Qa+nJYTPc1w4LxoT0w7L9hivJBEZDzchDG99sbVvOqK8LrQL6M75VhEPbxtWDxnKBa9Xvukuww/t7vLidQ7B93yvOM8JDyYTcg8wqG7vNvIVLzAkJu8dERrvcn8obteG727CIMHvHYrOj051AM9a9hpPTDp3ryPiaU8RalxOtRBVrxJjt68xLG0POisdz0eUVK8QJtkvIg6vrwu3K87yZoXvQ57azxxoVa9QcK8PPncnr2TvJw8Qp0hu+3wYj1OAtA8r/q0vYcXJb11WTA88m5PPdAV3LxUnOo89ArHPUbuYz1Mi3E8gz7uvFZIt7y6OzI9wvqZO5XEAT3etLW97j8VvIS1aD3/5908jxvOvG2FWT2rIdo7TPfyvO2mFT1/yYU93ig+vZXiJ7zEdBm9bWSHPVMtTz38cLw7tKExPSviDD1mfwS9pgoxPeJN/Tw+SYA7sm4NPQS3yTuP46O7xQeFvH4b47xkO0O8HTqivOUVN72zWHu8uP14vehKjDwpYNo8KW4NOzSjOz1Dim05ob8EPcE3Db3frpc8G5pTvEYalj2o9vq84IUDvesy2TkEf688wuApPa6/dL3Mu528dzlvu1N8iTuwIvY7SEU4vXPuSDxON3G6hU88vCG1/Lx6B1k9Moe9uwxlHr2T1kY9hnnOvPzY8Lw+RnS8xURGvXuCVj25VKs9o+1FvQBlrjx1oRQ8NEcavD7Tk7xshvM8vgaNvYABBD0NG7k80TDWPWlm3jy1Wju9cIcyvHRuuzymrJq8MTizPXN8Nb1PG6Q8nFXMPDXL2bxjTR69Ee4lu4IQlLyQnYA8RF9NvYXG5jyWJ5S7kQGjPGSihTyZs6e76NtIu+U3S7xcvH892TC1vcQ9uTyyIFS8xesSPSakQbwkEWQ85yiFPMyHDb1Wtcc7d3fkPNhnpjxwslW7590YPR+XubwtUhm96VutOwleWrzKs5C97WaqvDVYEr1Trk290MuiuxHDcj1gFmO9DvUDPVM7BT1qE587iG3rvHwfIL2ia3E9GalFvClMpDyM2/K7J07ovPU/qzwq62y9Cv3ZvFgiiLzTrTO9+lVrPQduhb27PpU81KT+O0Du/Dvlqge9Z7O/PXIGdrxJMZe8plnWvK16B7y6l4E7xfqkvWNWWrwcNhI8TtmyvBkxEr3yaTA9MzqSOwqq+7zd6HS9yxDXOkj5aT2Z78y8VQIJPUYDuDzdM0Y8PRMYPXy0/rwmF1W9Nm/ovBFKhDuJKQg8UtTqObF1Kz2D2bk9bYeePPn2Wzxloey8a4M6PL5z4zqbOua8H0UuvNUIYz1tFc46VENqu2O/hj0UG4A8bRk3PUN9Vr2CWEs9x4w7vd16Qj1UZjA8OdsNvNZxrjuagFG9f1W7PMN947yfDEw9Cw34vJ2/Bj3qUiY7toPKPEU9mL1FL5i8+3RlPbsei70kuuA8UB/BvP+Gn70wcpM8omfLPJzY+7vaOIm9578yvHgSFzyTuIQ7cZkYPT/l+LxCeEw8PzYtPbyiFL0+3eY8ZOz0uywMNrzD9wS9+8IYPfPkgby31IS8wCrxO8Ylqr0QKZ+76KCMO4PTlbzSZwA9hbswvU0ZRDwhWYq8/Z6BvPlWrbriGhI9OQYSPcoikTzPxeg8T9UPvBO+Lb1d0TM9/Z88vZPGOrw+lwa8EvrZPEDj3jy9G0e8FRKdO6LaWTy8Wya8aLiyPQu8fD1OOAY9UxYpveMzuzri+VM8BrneO6Tq6ryVMzG9q+qovbtDTbyDLBM94OwyvdtQSzsStgu9XvACvG4QTL2rF3O8B96bvHPtBz0yHrs5epmEvf6/IDt5abK8lZFVPVumK7urV8k6PZXdu09Oq739K+o8+MQ9vKPGjDw4TKC8kBYkPVjPLryDiqi8lPBaPRo/9ztFwzO9OQYCPRPoM73/DtC8GT2uPMEyqTw6wzq8UodZvA6X67vi2Dk9JJbnPIns0bzWI6Q8P1IyvL/XhLw10Z28EYhhPPK/wTrm3JQ7IzCbPaIHIL0x1cu74UCjPBlRvjrOlIA8KdAMvVeWor0b0Q06hT3HvJliQz14m8u86SToPBNW0j3G8Fe9TCdIvWzMq7yNeGG9cfrPPGoBIj1iUQg8srkuPeSRizvCnxC9knYsvQEaTzzjzAA8/+udPdQEZDynqQy6GQaFPFSILrynziw9mtAxvK8iYr1rBwW99+C3vKbzsbmeYga9WTlJPYjk3byAyqo9tv1yvLaPQDxJ34k9v2xEPPzsbrzJFxW75ueDu8VepTxYgCS9xvxHOw4mvLwAmV+8kREUPdxeL71dPCS92jsuvFM6Szx0mQ88B22jPfimcrxH5T49r8H8PJ+SazzGuj+84WEWPeEzobzofN07KhWlOwh4VTxaVHM97eZZvdnwJ7z6p7g7WzTEPA6XFjzI36270hKePaHWRrzyCC29PAwZPNT8Sjtp3Ww9r4AZvbddibw3JoY8HMypPPgjvbzmSN25Y19hvUIK2Lv2Jg+9ftNCvflxXj1m1pO7ZYQ5PCoPZr3HLBa9waD7O9D6H71apM+83zhTPKYrxrwx4X89KOoevTwb8r0zqUg884KcvAoayD3bEwA9vFSOPB/krbz7cAe9eN5pvP0icr2fYiY8af94PAkbjTybAmE9ostZPZbKuLx+/oU8B2XRO70KcL0FK4c8CphaPX7yDjwVJwW70K/xPEVVGry+a6Y9mbLFvHbfUD1n1n880mDGO05oh71kuBo8zbzEvANTzbzlDRU8GF8nvaZlYT3M1i49UQAkvSo2ojtR46w8c1SqPP+3h7qE44U80sDWvBLhbTxOPvu6XoeQvS3TWb1xdMI9kpi4vLmfjb3UskE6jQUZPdDMOzvXeLm8j82ePMBLvDyFnwi8qW5/PR/huzwTSPS7O3XVvGUl8TvmFLm875FzPY5XajzjtLc81K5LPWx3pLsSAVY9
  6-0: QiiqPH6cDz110Iy95AyWvGHAJr2ekQG8moQLu2OYAz3a8lY8aPOPPNuaDzz5c6W8nQohvYNe0jzo5IU93IsWvIsLfL3WGme8P/+2u52TvTtw8WK8CCKoO9A6vLyA6ng9A0NOPHzOnD0zSeU7aCxhvUhybzzI5bw8hCHaPJA+krvrlxk7tWTsu99wJb0i+hO8N6JPvMkCzDxllNK9p7rTuzlAhL19AcE6+uS1vfspxjyal0g9bUs2Pc8Srb2tRvU8hkRnvdtlkburkOG6ZkwIPBvuqLwMEJU8Od9dOzHKuTzqKmc7gt2HPddw8ry1N249JmNlvDRnGD2ef6I9JQwZvfeBM71ojKk6jl7gujoWRjypwoG9A2A1PR+/wboyxLm8J3BsvXOWvjwrWz89CDJ/vKrqHT01dpw8lv/TvDkwdLzS1Aw9VZlqvdrOa72x9Dm9yASDvLckV7y+FVA9IGvYvKq8Lr05yXo9koZVvR8BHzwPDY69+A+sPBrnvrzBU9W8Cpb4vN1Xp7y0+KO9hTc9uyGczbvHW8k88lGqvQgOpzxZJle8TZZ/vcQ5Wrm8niy9xjreu//cHzuh7mM8D+SAvAgKJL0Rb/89D4oxPcvib7w9w8O8GMPtO7x5fTzQA0c8xxG3PHMUhj3WiUK9PPIGPfjPgzzviYo8qnSrPKVik72Ev1U9WhYgvXHLCz0j4yU8Zc2cvN43wDyLSWg8BkYaPHYwvDwxETw9VOVLO27crTxD1bE85A5lPamsXjyvIZK9OkU5vcLEZbymIHa7z/wvvWcjjr1WVZG6fg16vNb4A70Y6ms98VWbvJDsNz0pP2O95SUZvce4a71mbQ29sJbTvDIYBrzOBKW6PEYQPTZGS73tGvY7VeuEu2lBJj17axS9wx23vBBBQDx+gju8XQ+iPBXE+LwE5lE922hJvHhqHb14pmE94D6FvLl5tzwtq/e5lGCUvAwVijynsPw84sFZPYISjj2UY1S9ypf5vFA7yzyEqok9MQ+qOvYRyzydvHe9hRx4vZwvV73G17u8RtBIvX1BWLxBLYy7tpxFPFxbVrzkLz2928DjvB/y0jruVku8TuSOvYS/KD2ompI7L1FOuxOdp7zAFfY8WT9nPBfhXzq/jYo8i5vvO3QQtTwz7Ci9W3kIvY28bTz2bnc7H80MvWyj0D0uvws9l4kHPW733zvWdvG8NKxtvGQHMj1cnK+7R/SGvYFsF71GB7G7/edbvf+usDpL1ro8Hf5lPZUODT0zZtk8XSvlu5ERFD3Oake9ZNukPdG/2rwLA1i9KVY3vYiZWLzchOy8TWNuPY+buzw0Agy9dl8CvdlbeT0yER88OydHvBegMz3OoxE9vsB1vSgR4TvizSW9XH05PfWh+LyRZru8n/OFvTlsET1c+CA9CH/kvI52Mr1d/4q8ghNZvQC9uLxzqJo8im5ePq9d1jtbxHg9DqMBve+Jirxmuj+9LohjvL4pkbt+RE89zSIXvdbIm7xpr6O9pHgwPCD1uDv4ses8Z6obvV2gc7xnaOs8FaGRvPcHZDyq1808eE1WPMOoNb0d5CS9vQ+9vNT1Cj3owy28joHnO80QuD1yNrY8yYKdvOz8MLy+g6A9idOivO2607w1qyI8/pH2PKRc2ryGhpe8pI56vGQ/dT0LZk094jg9vTS6iDwk8jG9HLGAPcanqjyMdZs8CNUCvWhDYj33Lp+886xKPNqmQrv+s7+8obtSPSSEh7uZZoY9l732O7c0VLyZCU493VTBPOE+hDuwBW86GsDTPBtpKr33CRk9IgX2u+xVPL3hyDA9rq4fvCNzGby7po69UibSO3pToryIz0u9SyLcvPgtBD3U5Y28cGqlPAeFZDz620+9eVF6vKlviTxE7MU8Xyb2PMuDUb3hc0O9XdZqvVHJAjzu8uw8WYhIPYa/6DzWZ/m7jJQRvchqqDwgOxq9GLyPPC5M2btY7v08TpU0vMWvH7xzRnM7MC++vD8i3ryuPpM8rJzaPBqfDjx99ym8jN8Uvb4VUD0Ocj+9x1knPKX/HTzUZog8nKDBPNdaCDx7dLq8wKxdvP6uHT2E0PA8mvKIPFkbHr2OpvC8mBn7PJKDFb3+JB291i3RvKYBJjzm5gG92/IpvIDiFj3alFa7ja7SvXMHKT1Gpuc8tUz6PFvIPD2BmJe7DRPovIuSybw/1lY9nA6SvQWCET35qGC9qMKbPP6ckT1OBOO8u+xcPFHFvjwQMwO8nuh3PA6/JD3dcpk8HUh4Op5VxLvktzs80mCPPGCyK72S2hE9k5EwPS+sITwWkHY9D9BsvDljq73/G1c9+Ka2O/+tv7xf7oK90bjWvPj6Hz2wOKa83fYTvXR92ztNiPc7z+vUPAesT7zbwGO9mrkRPTnO7zysuyO9XlnHvDXDbrzV4Vw9aro+ve1WQLyPVI+8dcAPOuXlqrun++y7G0+MvK+V/LwjdIq8tnsTPWtkhr3g1xa8YcuBPZOQErxoUB89fMDhvNzdMLzBMIG8m7XNuRkiCL0R/ZY8VMBCu9LclD0TTQI9/oGfvP41GLyEHse9mt+LPF4vnL1tyz+9SJJvPZmpsTzvuJq8qBtnvGtz7LvIODU9W1zhu4g0oztG7Fg9VEOfvBFsPztHGoE8AkN7PePE7DwzQmE98kpmvPtpBzy51yo9qHz6usN1hLy1oPa8jvy7vLx2UD0YMSu9UOq0uMfjx7xATaA7pCJSvaomVT2882A9nJQuPTXaz7sKu4E9DHKZvFJdOj2oKga7MJizvM4z8rxKHAk9lj1tPIqCH70L4hK9KoEmPVwKAL0+6hS8gg3iuwLhtjzPOSs9JyqxvCE2CzydCZA8iyKQPOAHqDybkPE7PJqmOxe/KbzTkDO8QNyPNwF+pDx7+SU9N0AevLTkNb05gR08mrGMuywonj3P61Q9TdxzvLQUx7wZUEw8QAEZPBuwab2daoO7SOMrvJ/LqTz7cPi8AGmiPHQZm721vKy8XZhRPIHkC70agQk9xz4DvagMAT3SYw89mRpsOyYcFr2p5hm7FikDPbpeeDxXseI82cDQPCrLpT1tHAk8gROMPCSwFz1GKsU7dSVUusSD7Dw4FyS8g8f3PNxpTbwqyVa9CJopvcl3Jby8ocy8C/VPPJA/Xbzh9Gq83QyEusGqCbzToB09dQ6GPKgN37xJTWU7jpnGvGnjcryzjhe6RbQSPOZSnbvLrnq9HSgkPHqawbxr4/g7WHwivVUVMD2c8Iy8vQCxvCdh7jyLCBy96Bw5vb9R7bwWFbU8rDWHu2LDebu3rNU8iHMAvS/p9rxsjAU9nXPWvCDS/jyEQ9A9bNHSvIvwSTxotN+8bC58vHyadL0894i8oZg+PeLrKr2MNFw7FReEvJWB6TsazPk89iZ0u4YXVrzmvMM8G8X1O8/zSTw0Ut68paZsvbZl8LzNllS9Neh3O/83DT29EpC9BuwdPRYa7Lys+Pi80AwgPfb9OT1KpUG8Qe4BPQVFljvd0ug8Npf0OxkSmzwd+4W8NO4dPEHA/7xjlqE945kjvQVjm7yMPYU8dgC+POKVTL2b/N+7nNrpPO1lOb08kcA9nuKXPPvVT7yLQlE9baIFvFMir7yN7L68g8S3PHTnVDqWSSa8wpNDPVOrIz2gb0s92rJbPD+mGD2osZM8ThcguxadYLy675w8+rnzPCLhcDxRQCa9txvEvCG27roL4cG6few0PZtg87jBEsk8zSoMPav2KT2HYJC8Gp2sPEYmFLzEJNu8ShWyvGUeM715lSw86Nm9uydkRrzZIIY8pQTAPFU/vryjexC9K09zPKAetT1JAkK970x8uT//tjuaWbw8Cqq5PNAyujxjr347xICsPWtwrDsifg697GS1vIJzO7sAjBm9iTsdPLXb/Dxjn4c9oxBTvRMxH721qs28nq5vvXsDkLwHBDK8bkI2PYXPpT0m2JY8jXgBumoUOzqwLjw9WQSBvRg3+7wVo2A95IHEOf0HFr354kC7axxDvGQf/rrMP3K92m1YPWHuVb26Qbe8EtaOOyXhVjvpbQi8K7dqvTWO6LuHULO6b20lPYXferyzoxa9EjoyPHdMUrshkAc7
  7-0: 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
  7-1: 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
  7-2: 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
  7-3: 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
  7-4: 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
  7-5: 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
  7-6: pALLPHwtbr0IDmK9whzivAh3Mb32XVQ8woqYvA/MW70QYAc9b4dyPBkzGjpu7Cg9ASCwvPVpgj2fbdQ8mPEsPEHsRrxZyFk8NGSRPbdLh71yOEk8ZAcFPNtSHDzu6JA9MLBePelrSz22HcC7jW7uvGnsDD2ovXq8CMN4vNTtpLzukEk9AVOXO9gZdzvCArm8lf/QPDQIiz09p8y9GMarvFYGFb25n4m95egzPYED2rz4WAE7aU1gPOZy7TsBMyq9MyVEvUOPM7xXB5e8L8l8PRzBBr1X0q87XQBzvY2eCT3PyAG9l5MyPaFaxTy4Ivc8pt0wvfKuFT3QcQg96jy9vGej0LzjDoQ8hYRmvahXlTwy2qa7ZbmCPQhmh7xyTeG8pLagPNTdMz1HPaU8ciLOvPbefr2RGHw8l78xPYs05rzjIYY8TTIAPd0yp7xJgKG9wsfYu7QC2bsvTpe8S0pqvCny8zz52YS9XHSJvVd6iDyDzcK7aNKxuVMHNTwSQJA9zGPevPXpDL10M1a9oGAcvRAiO71vs6S8k3ezOrzniryGED28p+QlvelN1rww0Da8T8RHvHg+l7v2RUa8z0tcvGnDUr2+MLM8tugcPEzWy7w4/Ja8vp4pvRdcvzxxISy8TcdwvVBG3Tu/6du9oYTuOy3zkj0+GES7KvoWPXAZmLxJO6m7zJOkvZ9GfL3iaIo8FfS+vPIEET2c7Nw8Tl6FvHT91bwu4mm7GlPXPBX0Az7reIS9OX0bPayKDD20BGw8/o3kPMRA6Lz6jSk9sjyuvTShfDwhUV88mxyGvF2T6Dzt5249x0dcuwQ0w7xM99G8UVMTu028P70RjWE9jkoWvfLoyjxupwy8nWu3O1dTD7yV4O+7TmdGO2uLI73Ra089g48wPHBWJjwALgW9U/TdvFZgE72RYwm9/cQdvdnrdz2x9c48AlSSPP7KxLw0nRI9a3oZPfulAT1JpMu8oXJvPJdMMTz9PMe87rCkO4KiOT0vsN+71PBcPI9W8zxO8dm8M0WFOiRVDr22ib07WNVAO6rtAT2PVw693wQ8O2o+mD2P5JK8KeJFvf66NDxI89E7BKdKO7Ar0DwAYTA7YZbrvDagMrzPNa689Si1vCUhWDtVNeW7mQ0KPUvxgT28KX29jWG2vH22fD1QvDS91swCvUK0Cj0fGr88ILTaPOxa27xJnJM7/CvWugICXzq7/uy8EnNcu5IYirz6UmC8w1UNvBML/TyUd0I9AkRcvREEGrxmpE07bSQLvTx1Ezyw9EK972LUPH3N3zx4hKm8ovcOPanbqjqOWBa9ijAyvRLJTD3wS168Rxgjva52kzx53pS87iKpvIQSAj3Yoo48JNanu11kubu0TKC9eTbkPHdXC73SDaS8SCbjvMEZFL3qeio9qwBHvXheOr0/z4A8k5M9PSCcrL0GHYw9inkCPpk5tz0KUxW8Q3vvvDTfpzzFwYa7zyOXvP2WcjyVZ2C9LFA6vbSp4bskj1y9AeJJPYNe9zxxEX05cPoJvUQYcLvX+zk9qBTKPMvALLx5jh67vyVHPVF7zbxYgBq9gQI+vc72sr0RxQK9ad8UPXbYPDw15Ay8D5K7PH1vq7oqhoo8kjACPeKSwroYRuo8Z8g1Pa6MSL3u/Os8OfXAvKo9a72Wbpw9k6BtvLX7jTzOBSI9tdBmPKKy7jzjrKA8izZ9PEhNUj2gxJ289qMSPQ4yPDws4L+8MEGRu+UPCr2l0mw8qZoePUOwdr3lwDQ9gk9EvUBk7DzF2do8MIgTPSoUoL0Tzkk8xaYcPWEqkTuT+gg9GNg2u+qpFz1WP0O97y3gvL69xbvSgwM9bjG+vFAQXj02pIW9PTSQPbUEHzxxJAE8GzjvPHHVrT24P4a8BNyiPbQ1ojwpJT+9zQ+KPLdVSLymikg7NBcbvFw6D7vTYcO7TrjfPMVZ7jzPKik8HBEzPS7s+by5DgM9AgDNvGne2Dy0gW+9geg7veUlsDx9XCc9UXeiPIC6g71E6Xa8r2QivW4jMjsUkLq6Ne0IPcNqTz2WQc88ugDLPDV7Ob26D2Y92wJYPTJ/Dr1dRS2981DjOyh4iL2uqUK8aXg1Pew6Pz3lE4q9CKFcvQlhCrq6aeu8UDrIvCHAyDrgVRa9wBbTvDiUpz3ceyY7nhHGuoMhvjsuzBk9d9oSPL3ZXb2jXtY7jxtAvTFRir0k/kU8UdhGvPzcmDygf5Y8j4/QvGhxwbpYBA49J1VAPZPPlz04bzc9xrDlPHPPszxeRmg9dDWeOgHWDLzZRJ67FllnvKfDEr0Hl9U8ePcEvPIbdbzEIR672L5LvRo4fbxmJVy9L4GLvD/rnTw3MKy7PEGfvSu+Gr3tMBk6w4yXOxdIJb15Gd28ydFyPd9u7ru8+ti8e1B6PajuhT17md48v+rFulbLhz2pU6a8ZJsUPIHbHbxgMdK8/dlyvIbuFzwjqWo75mTEOx8HbDzELFE8SCmxPfbUkD3VJh68tA2TvHwCxjsVPJm8O9cHvc+puTzOJY48bWpJvVfuTTsnSgg9DVoiPeYbpTx47K29b12KPe8XGrzt5WA86MGOPc7GqbyD3lM8vmOTvMH/lry35ec7G6vqPPcDi70Bm2s8Tiqlux98tDtdCq68HPE+Pc8dDzxHp4g8kEAEvfa7UrzweYY922+avGzyDr3Z5Pe8CJYLPTz+xbzJprS8nwNKu5B0B73/Yxy9w4fRuzDg4zsz7NC7LCzhPElnqbqSyZK6IyRDvflOobxmK108vmzBPBKQ0jzlWBE9lFcePQzsnLxYXIS7QkRaPfebnzzxHx27FctxPaSOKj2Jte27GjHDvIbKPrwBK6c9S8eXO8+GyLwFqA0819LwvO/GYj3Wz028jCspvD3pM7uU46Q8elMTPep9STxuNnE8xKaougGwID0FkZc8M49LveGZK7340Ok8gL+xOfMT27wqr0W6pWdBPatGlzwgv5S8GtaxPL3IEjzdgAc7lZiEvVgk4TzsM2E8Ca1TPJQ3mT38KYC8Dq8/PGBuHLx0RYC9vOapOpTKUb0bN0y8Yd3TPBUZiL3GJtw8S8CRvJWYg7wWq9m8WJbLvLyRkTvuTJk88JpiPVSp+zwf6h292qSBveuH0zzQOtu7o4RXvak9LzwVUuc8SCt/PWq0B7sSyv47mSncu5mvlDuEbKy8tIu7vSY6o7wJYcO8334iPcwTFzydRQw8BbyAPS0lzjt9vgW8/aiTvZhLgz0nv5+7D4UDvYwRjjwddJi8BrgIvS1qxLv3vZS89ExKvfDHCL3cXZs9DpMDPdmP271tGL+8uRGiPOLFgjx5O5U8dI89vZD2pzqsg4E8v7pPvQ4CDzkzm6y73xidPUCkQL2OVw49cgFpPGdr2zuq7uA73WuuPBmlhz3OELU7YwEEPRCLJLtIHUw7tL/Gu7YKAD2Ivve8ERu7PJ6mXL0H+Za8pOIQvLFzNrzx8e28B/7bPAuYvzx3dHy9XlfWPOBgUT08ufW71YhHvI4n+Lo34iW9WzE3vHvSrbpOYK89ALjkPOdn4Lv8ZDM9JESDvL1T8L0fkb28TbgNPdUWYbj4g0+8r5QSvbc7Rr1JeRm9Y3yPPEpekTw3mzm7pH1WO6RWfjwoFRc9jdbIOwnblbx/gx09uJoBPZfZKr1DIFq8Me8GPKZ+ebwXhqO828KDuZu9B70RdeI7cVgpPWuwD7wQ+LK8coeovMQ9t71XOzE7Sp3tPOFtgjyN8wi9psqZvXZPTrzXis+8R/mBPNaw2LyquBA9nNlYO3oRj703Z2A9bBMrPX313jyLwjY8Q45iPW69yTzWefM8rcYpPYX4jrweDv46tE8bPYCwHDziCMO7W987vBKpwjtlx+u7ZnkhvefQbjtoc3E8NZNhvPK/Kj3K9kK8aX8rvMpwk72G38g8BzmKveUsHTyPWLG8mEIUPADWALu9j7K8CGKwPErX9Lw1dTs8TluPvXm0rDmdH6s9rdzKu+5sCLulogS70eZRPYe8Bb0vQKY863QxPTgQbj0rjZW9hVZEPSRBGTx52Ck87UafvC7gEb0ta5G93MPvPBYv1ry+Cu68FUeTPMesHD0CM5W7
  7-7: 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
  7-8: BjsEPWRElr3pJ3W9rpZJvT8JHr1RLPI8ZAYQvAoUQL1OLOE8+/XcO5rwUzzsEgQ9GgMJPC58bj0TGRE94cJPPE1uoTl3aiQ8SKNoPfg5Kr3dHrA8cZEkPb36+jwl61c9brzGPOopfD35y+g8wwUJvVee0zyiQ9y8wPCcOgM8y7rKQkc9RmxOPfo4lLvcZWa8OGDXPLkLRT0jj4y9Gn1nPDI4g73fo6e81mSJPS1SKb1QLbM8dCgqPb/SxLtM6Iy8+LW0ve8ekzvkyDA9CC1FPY8qJb1lbyw8p1zmvB1sXT19Gpw7qJknPakR7TwNMSU8dxUzvcZXAjz3Noc83VuivYJJEb2eXHU81qEfvb+hfDxnrbu8g9wwPbVFujwSjZ+6YntPvNgxgrsC5ne8Q6VpPM5wXL3By4u7rq5CPXInfb3xzcI8gTBNPbteUzwa35S9qViVPEzhUjiYglo8iOnlOthJGzwik1u95kFJvVgd8DwWgiy7Lb38vHKErzscVlE9gCkku0ZDFr1wTli9+yKZvHaTYb3sm1m9vHUgPdQ1ULyrsYK8J4GlvBgZirsf3+i7SGn9vPc/QbrGvYk8PNDjvDXwVr0hDJo8jdfcPMqsYLzwg4u8jzlPvYGhtLqjU7a8/kw9vb0spzytR4y9pCmCPAO2lz3KI6A7IA+ru5+VTzsS6rY8I4WFvX0+jbzhvCY9P0gNvedAfT2KmBk9Y0fxuyNs/ryz6Ak8F7a9Owiw9T3vgQW9DpQCPc7PeDy8Iy68ZG2rPG57Lb0HUwU9gm2uveJsq7tgzx09Dpg+vYa/9TyuYJA9o3HMvIMuP7z7qIK9TLjvPMBvgL2V5nE91rRbvc2FjjwY/Mk7EWaFvGXoEL11sAy9ezlmPGyQCbxey/Y8p/w0O04p8zxKykc7KTyYvBJk17scuJy8PvX6vJEIXD0ZB1I8CgOoO4a1dLyd9CQ8RM2PO8+SjDwisrK7/QHNPDc7wDwrAy48zX0YPLkshz11PXi5K5l/vPgd+TwBohG9SoTPvAbD9rwD1lS7CZvousoNKbrh0Ua9NQX8O9N2jD1wbAq9vLOtvOid8zuVUYa8rwyAOygE5Tzfm/M7JQqnvIs+47sSQc87cGNQvRJ3d7xj0AK83+8sPag9FD082be9FTZmuwZcMz3vuAi9XHkLvcRunj09pk09Ms0NPZRi4rueEEc55D+DPEvOLDzxVRy91qCDPE3wBbzR0t+8xNACPEOklD1MMpk9o5EovUvRlruxdcI6tN4RvZSAwjxt9i69zOT3O0YAmDtMIIO8csK3PEkOv7zy6oC9tTSWvddVsj3wCJG8mqzuvNfS8LvFiyq9mZZIvEMaMLwiOLM8oxQhPVqC6LxpXJa97+uXO5YhZL2p1A89dRgKvWQ1wLyt6yU9QbRNvV+sC73492Q8vhiaPBNM0L1rI0k9rrqxPcfi5D2I1ym8HMlZvKa4oDzj4SI6dw2ju5JCpjySnRu90ScfvbcrkTu6dSS9zH/QPKn5xzznApQ8FlxJuvUwazw0fVU9PsmJPEV1Rjur7iW8Op74PCV0EL3M9UO90zBjvdcliL3nvyG9Q2QMPZ+fzrveX567W7NZuwVDIb3XsM+8ey74PBsNMrw1gTE9szybPdZjSr2PLss8yKHGu1gtOr3NG5c91V2FvdCyn7vDNbQ9QxifPDVJgjx7B/s7owqjuzywST26vQC9TwwtPEFuBrw1TkG9dDsFvWuRL72iNZA8HTtWPRdJNr0bACU9rLE7vTgdprt5KW09FoFWPBGJNL3arvm3HCZqPcELED1o08c8CfECOwkcWD3ObOO87cE2vfsgKbphnjo8gjcBvbskYz2mr/m9aT+ePe+zFjt89MA8EB7HPHw9gT1vyUO9h4/DPXQ5kLtPhva8Ve4UPCri+Dc1S5M8LvcEvW5bDD16/yk8TP9HPEUcGT3Q5ls7YYn7PD6tkb3jjtw8tLLMOtXO6DzzWoi9QwqAvcpsiDsX6mc9CG2pPJ7Ar73Ns7a7Aisbva63oTy0FYC8v8YsPR1BCD3i7gM9vaoCu8mUI72xVfc8AXD4POgGLL2FOPq8SpwcvMRo4LxJsYQ6y0mQPQEuTTyvC0+9QCVzva2exDxFXpC8HBe7u7EZ9Txcvg+9vIkWveM22z2rMos8ye9DvUOEOzzLV4E980aOvMGMhLyAxfE82BtwvZxKaL0yEiY967USvTqbw7xXr2A8FW8EvVlFvLsyebo8KRcaPdtTqz1f2w09gFByPWHg0zyInw09y99kPHO7kLzTbm275AHnvPPbAr0J/VM9N5DwvEGkjTyB8tc8GaxsvT+NCL2G0jO94ie/vEcMdTxGa107+qSevU4awrz2GXE8bhKWPGM4Ab0INJC8jQI1Pe56HTyXv1e9wMpgPYTIiTxhvr06e8KzvMQmIT0Ve5+88qGyuw08ELz39zO9q7uCvdPqDzx9IVC8IwLovK/+vDoOKJG8Znm5PfStJz1i+lE82Ms3Oo1CUDw682w831u8vLNzuzsmlQE8ATNIPMfZILz99To88dSWPTr7xTut3DW9ay6SPQ6WBT3UcLk81sVaPXbspLztPA08Mc6KvLohbTwZ5sc5GMpvPTLWOb1l8Dk80KUEvHEjmbxgd0a83p5NPbfIWzwBawu7oL+HvIkxuDtBGsM8rTWgO63q9rvx3Fs8YEEWPXHSyrx9txe9KgOfPFBSCr0xGhS9v+J/vAiT/TxH4iK8XDkPPRmtET0m15g8nYFAvdMlRTz+oYS7SDMpvEHPnjyUxX89eM0JPUdER7wIscK8V6YbPdbLCD1zGQC7SVamPbvCDD3Hhx48aCCEvJ3c97qGjHo9fIq9PNqLN7zRq628lgD2vKqSHz2dhx88x8spvFn7KryA5/U832uEPJbCbb07ADE9YukUPdqmbzzjLnA9KCWlvfp6S72VlDM91ajEPEfhwrzTTOa7RTQNPLlfoDwF1OO8IbYiPNwPTrzkO4I80Z7vvDmSDz0JEtI8f6sYvKtUcj1MKAG9gCzdPJSqIzzVQHK9NkITvMPsKbwZ66W8erf9PI/xYr2u+3M8CyvEup37N7y5O228tFsevM5cijyT2tc6wguAPeyLAz3jOYy9/5t8vJyR1rza61q722VbvaJS9DyuVf88aX8mPTI6PLto8WG8jRAavRKdtzql5oY7iqyQvXXC4Lt5kKW8EA/IPIPB7TxnBpq827ehPeK5i7vaeU28MG2ovGYUuD1lK+e73KJ2vU+cgDxwhNi8HGqpvIvbFL0brOS8RcNpvRv7w7wHu4E9n1CoPFSb271myw69HgFbPdAVOzwi4KU8EQLFvPGUkbzB3+w70FlJvP4k/bwvj3y9Y3lNPf/21LyEvx49gWWsu9XQTLvwI2W7KxVpu7Nbnz1e6ZM7pxZgPHlYFz1xoia8RiH4u3oO3zyoEjm7Mi4EPa7f+7zux7u8Pa5zvA0ucby85Fq8t2QUPbEiCj3lY2O9z2g5PcHn6Dw6BPo7JRbkvDEsjLuUl8u8ZpCaOxfSLLx46og94qygO1eLWzxtWLY8jlRCvNVArr1G29q7XHZdPPF8HLyBWJ88DXcHvdosML2IBRu9kqxEPOwNg7sb/Za8Vgb5PLtFmDyfim26V1xKPNgTibzSyLw80O8pPHhMgr1qaPO8XrMYvdmgn7wH25s8huITPKP0dL3g9hg8p3+qPKvJCrwO5Ws7Ak0CvTquu73yDSU8hRCcPGsTULw75bS8j5BsvbY/uLxZDwy9LqqWvOnibr1qIjE98yb4PC5g37yp+RE9qgPkOw7Pgjz54cY7LqV0PLp1pjwpQjc9+3sgPbh5nLurlIE8UNstPESsoTzmURI6df0qvOXGZLwfZY48a4yHvPQSijsjQ568o3sVvawYpTzjUgo8wUfruwYZrL1jEJu8Tb1jvUrPCrt3wxm9uZoRPOKpzTuDG3S8Dq/kPJMz4bvznb67Wb62vFo3DLzbaJk9d+I0ugind7xnf208nkYEPRVA4rwxSwQ7UVw8Pbcbaj29Doe9ZKVIPKGg9bubHFw8PWnPvDWSCL1Mzq298pcaPFXQELwP+FS8ck0hPejL3Dww5im7
  7-9: 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
  7-10: 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
  7-11: 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
  7-12: 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
  7-13: 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
  7-14: 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
  7-15: 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
  8-0: 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
  8-1: l2lGPFxbZ73tIZO94pGWvfgv1zrQjZy8XnY+O4kXCb1NpMU8av7Uuq3f0buirI08zhsnvURz0jzyv+c7wxknPFIiDD2Stxa9jMSWPVaM8rweiLQ8gXGdvU3/prxOS4o9/9WvPHzfGLsUYoI8JZEMPL8hsjytUKY81iFxvarAobwDvcM8sDcLPVw6v72rNFC9viehvG60Jjz4Idq9p5nSO6rztzrY79+6SUcOuzmNX7wG5aC8N6aROwM7Sr1i/wg+g/GivN1POr03SQu9QN6VupvIYb3w5qc93EBJvfYQhLzwNeO6EV2ZPaLX6jtxAH08d2ppvV+81jxxeWw7pSUEPctj6ruDhhi9O0LIOuYeELqAEy29R2ipvDV7ILwsrRW9r8eYO25yPj3MzsQ7bkC8vcOgODwZu1o9yK7OO+bJF7wumlA9GTqBPAOws7yOvSS9SS8FPSJzRD3PG0s9fDsbPGMcRLyNVnI8l5EXvWuQkDyGc668if5cPftEDbwb5f47JD0ovUCa2rzw9g+80iYsvH4wb707aSI9A+PPvQTFprzG13S8XTe0vZZGX702zWM8mvX2PPQXMTs8NCC8TGDhPNQlJ72tKzs9n/J0PUQv2Du5DPy8QqO6vE9CHj3mzbm8eWsaPF7I5zzoERe9r/MCPFvOY7tunaY9JaGVPAseH73YgiE9MPTDvDEsQr1zEqA78HklPfr1O72g6lM9FlOTvOm4SzzOLzG9FOyivCI3wD2UJj88cuyLPf4/RD1RhGq9W/DPuyTog7zyZek789QBvfSNLr3AUQK94JGIOxz14DtZfxi9/dOwu6UhhjsofN08b15IvJTNib0aNde5ZX3GvJgjK7yKtym9G2YoPW9S+bv28Oi84CGMPGxLbT2liZG9pxJEvVSffT3DLY+8Ap0xOlcgk7wNy4y8QM8zvKQ+0zyEgz09fgxFOw2rmjzbp7i8HXDcvFPIujxJY3685JjFPMttHj2ujp68ISDMO5rmGj25GAQ9D9oMPAdBST3hetm8fBM/PAlugby1z2W9lA6BPGVZEz21pe+68iYJvalVbzz2rtY6XECdvadU/bvo4hi8TR/+vNP7STwRjse7z5wJvB7qBb09jnm9ldqlvPqL4LxueEA9sdLWPKiQgj3c/ui8mLAnPdkVxDxyVve8JRBOvRtSrT353qK8dKMQPZxqljziNf68eFRCvJlrOjwt0J68GOeUOArDlbrNwSs9AHnhvPke7TqAI3w9zHpNvJhDaj0LN4E7kZ2EvN/9nrw+JYW70pEfPQVZ7LxhICq8kgwEvJ3USzyFCda8ehqQPVpuOrx667s6kZ/6vD5gzDxfn8Y8AvkjPNf4dz3qWMM84zgIvgdPL7s6FPC8ybo9PQPWPL0fgxu9jF9IvTdJCb2+Apg9dmb+OEYx3bwviX44dhJuPejuS73N9yM7lAbnPdh51zuzv108MxwGvfH23LxAeVC9IQdevOMa8bsia726Ls7zOz7nNrxE4JK9t16cOyIFTz0pUhQ9mexMvQDdRDvR5Hu8S95WvN70oTwO/Im8krL8umFBtztb/S68+zYyvefs77yuRca68/0TPb+ZfT148Xa9e9eNPKB3FD17B9Y9rhmyvLAxv7yTfEs8defGPDmPO72ippA9av6Wu6RQ6LudG6E8rVlqPb0igz3ML0290TWiPYyXmDzS7g86N/EXPaYDij1CLGO40FoZPKLBR7wWD/W6SS0VPTgwXb1YBkk9IKwvPDhHHzsCRtW86kwtvR905rwjp+k8N1WdPKsawzfqs8I7Cv3XvGyMUr2Ph9g7/eK8vPSm+jwDV8K9z3VZOoFvrzxGn5Q8Rb7Nu4BKmj2/qrO7Gwz0u4QIwzxpsXs8t5oFPfrVfj2cYlw97DoTPNaefb1lqGW9OWcbvVkDbrvc/3u7qegcvAy3YLzAbPW7ezsoPMs0eL0jNbg8pOpDvGwNR7uU2K09vMPFvCPwOTw9/ZY7wdBoPPlagTxeYfK5aB0pPQsQkL1zVYM9ZzN2vUvQfry6mB+9nC6jPNOGEz1MxP086zYIPeg6KLzmibs8GO6BvT2xFbybyUC8+L9EvCqI2Ls4GCi9i8xUPC3Eh719jyq9tBOsOy8p9DsCUxO8aAOvu83ZoDsCyKS9OOu1PItzCTwQGaq8X7ftPGBZQD2rSaw9pKTKvFbcCD3IIas8rG9gvaVVNrwjR0C6VBTBu26fTz0nOZM8ak0wvLKU+rz5bU89y0BHPIYrjTvvPhU9NS8yPORPO7ziNDg9E3XNvJqzc7ynjGE8Fa2UvC9toLzssIq6kVaVvLozor2oHhQ8eQ6lvPbd0DxdYpO9JFJzvfuUmDzSGoA8PKF7vBp68zzkn+u7J5DdO7kgPLzKFlu9lwRPPTVaKjwk+gK7iR5pPHM4Wz3qKgg9GljQvLQzTjtOLUy9Pgt9PSHOEr1VmKW66VKRvM04wLy339u7VLOHPP2N7Tz9J/O67szWPBY1pTwv/sW7bVq1vUeDYz2LSAk9sO2UPBtvHT2iKQs8XlWSvFoZPrywhG09TIjsvNuNjb2izkO9zbN8PN/ur72E0dm80JhKPXDYLjxh3U+8WmBXvEf0cr1mIL28HTCdu3IJer0fIgQ9KLP5PGA1ubxcmwU9+x2APQcHBDxtdYs9e+kDvAyTGrynyZs8CfJrvBFMmrsEpYy9DReOvB+RZ7p5hZq86NB+vFmSHr0Z0MK70PkXverCMTwiNyc87wq0PHsLhrxIXgi8ofALvUGxuzvWLqe5KdgnvcCoYjx5c6o8WgevPPBuA71EkyQ8WfqcPTThMbzuVxG9Bm78OyupOT1L0d88jUZRPOqO3rzdoTw9iRnuuyXDX71BUVS7m7UUPKhz/Dxrpog8AUICvd6Veby0UQO98rgBvYR7MTwaQ+481v7OOyRGZD2GEFq8yHQmvRR5Rb2whU09fwxyvPsZK73TJta8qAiGPI5a9rxJaIa9sJhgPYGpg7xXn8I8bPGEO0aZjbxA8hy8GlPpPBtGJD3IU/i8eSofPa6Nnr0yr6A8frB6PDo3obvC1So8T/m9PNfqwDso6ri8EFMAPVQ5Nj3h5jC8yOsDPfUL27y1mQc9Y+wQPcaPUrw8ctw8ty8XvEoBpTw7n608+mRePboUv7sg14S8IEqCPSCgvzurToc7L0Z5PWgujTzTygS97v5yveuPGzz/jvq8Lu6Bvbk1Hjzs1wi9/h6HPBdOCj0dBKm8hYP6vC5XJz0YsVK8wPrhumT7rTudXcc7Br0EvShCw7zcGHw9NujpvBpfnzv1qyM9d+dEPZOIlr1qD0Y9hytDPaKizbvI5xk9ZV7AvSmpYLtC2UC93TBgvd7GWr2Bhw+9pixQPYXqZr2bO3k9RZ2SvHB/q7xZFQU7PtmYPFQhNb15OqQ8QKEvO2PrZzzIF2u9HnJ/vHKfAbzTWWi9BbahPW0jiryvyNG8KfQGPfGfnjsm0ZW8oPYVPY48mTxFy8a76nsKPVszhbtAAm87mjomPeS2TDzLVQe9M9onvZQSNbzjO3494kcFvRTkHj0zapG7oXe8vCOnILz/Tf08PxHVPGpO7jwvfg09VNK9PA5yQLymPza85wYAPcHMgjfEDLY8Ntu/PPS+hbwh2gI8HpXjPJfg1jwUXXk9XFIzPMdf6jqRH1A9ZH+nPGmWtrz5okS88ShfvOtHA70swAW9+A4WvYbbabtyrWu9I0i7vCDperxSj6i8JjUKvK0feD0WLbU8/6bRvH0AirzQdV28eL7Ou89DBr3WgBO7i0+ZPLqIZ70T+i49I1PVPZSADD27hAO9hgJmPB/5Xj1FLs08G9qfPUIEAz3fTIo6+43UPFOBlTzy0ws9Wf3IPNCRvDwSvXW8VdZvu/LPnzw8uJe8Mag3vUSyGzx0xaC6wOeHvf0HQT0uVaU79vLXvCaTuDwEToS88u2kPFDr+Dz7Fnk8mWu+PEIMobxG9Cs970CNvWWY77rX/DI9sFKtPKYhJ7uHTYa82sNNPcvYmTxsXKC99eO0u6cCG71vVd68LrAsPGbOgzwGqwK9uhocOq5qDTxC2bm8hlRcPRxB5DyXJTs881FUPIc30Lx+fUW8
  8-2: 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
  8-3: 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
  8-4: 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
  8-5: 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
  8-6: XLMavL8Kwr0iKZS8IfTivJUioLyLrTi9xJjxvARVlLxo9mk9kqRnvHL/ujyxKLm7R4k/PJLMhzxDK3m9Mz71PA5UQz1K/Cm9/t3+PIgUJ7xrqQI937Bhvczj+js8GnU9/jacvLWVGT1pugk9FRodPfOa1Tza9bW8CrmMvUzx/znwQJE8vNRFPcQLdL3Dkdu7LYPJOwNNiLtAMby9bEaIPQqZtzuelww9VkDFPCjAA73GouO8fE4Ou/BAb713hu09cAFMPA2emr2M39W7wP00uilcPL0LWUY9l5iRvIQdZTxbjVA97MbMPXKK4DvPwSE9XuxyvQu+p7viZsM8uhXhvHI4iDw2hNW8OG4kvZnlFLy2C4a78ll5PLrSkD3HJ3i8n3wwvM6FVj1iO+W7behsvYR84Dv5RhQ8RA6VPOHa8bzxoUE940DLu9XSn7zjqBq9T9xkPUx8rjyWuj49LuvgvFQLXbze0YQ93Qxqvale5jyLjMO8R7LsPAV6cDzXE9q8Jeb3vHg7kb3o4fG88FZUPRBIjL29m7Q9LCKtvS+7FD0Gbi08hljnvXfpDb0yosU7eKoSPb6Pe7w6AHM4NmefPdJeU71xd5w8BGslPT6ZlztH90u92maSvEsLajzlsuQ5+BTmO0vGYjoYyqK6vfkEPTgeOjqKhy09JNV/u/TxrLwqugk9fyo7vT9LBLwQnWe8j2ozPdiOV7xY5kI9x6wfPHvwSj3wHaG8MYykOvk1qT1Y+h09wr6UPack/zzbPVS9k4Z8POJasLjfE4w66T2dvDiLkL0JpnC9o+FpvJFkzDydyiS8Dh1gPBPr+bqMo5u7dYFLvChbD71qiAA8m0IjvDkNAr2P9jQ8DXwZPaJxSb0S3KW85XkIPU2+Cj3u87u93mDevIpKUz075NO8GyA0veJoP72Pkck5D18IO/8xnDw/9k49oaH0u/PzXjwLx8I67zqnPBnKDL0OnEi9ZAk6PaERBz25uv2803n4PClamTw2qDQ8GpacPLYzUz1cVFK6PiXYO3GpirzXPcW8K4ZMvB92DD0CZiA8isS/vUx5Ij29VWE8Kg5tvXjMBbwEDMm8JC8ovEM/ojxntI877ei8vF32O726T2+9PZVAvf9b4LvyC9I8ZUQSPXK3Oz36GCu88DbyPLEnCr3zW7y88WLOO/VTsj0MsmS9ZErLu4AOnDw3iSu8pN13PPMrvrx/GVg70iz0upVEc71Cn+c8BZznPGA47bzws+M8gtTxvHyRwDw9ABG9jWwVPPDU6LyYk/07MOn2PCnUIzwun6w8SKA5PYLTa70CYEu8Wa1OPSwUBD187xC8UpRQvJ4UzDyMnBm9/VoTPP+/fj1RmXg8Au35vUAdSr0Y35G7lM/9PIpNHrum4JC8ZldWu/R3C72f+Bg9Zj0AO1qDiLxpw8w7KjdOPc0oSr0auLQ8/MDBPdZpU7x10J481c2FvO7XCb1ID5q93Yq9vDwCHzzFS9C8PqORO+yWh7xFDQy9zVfVPAPd0jzVX5M6daxovUS1DD0hjCA9U2QDu0frfLtCgou8Yn13PE6+PDz90748TwsJPe/xoLyQ2Ae9YJrzPNNbnj0KVxS9hwYdPdyWHT0ytiA9iP2Tu92ar7xVXdu7oy19PaaU7LyNu0Y9K1zNPAdekjwo1IS6YixhPcMWsz3wcsC8n1RBunaK6LzEgG+8sjIYPU80jT2oZCu9myw4PDEmdjxKf9A8XOGQPLOLLL1xjnq8My4/PXQU4rv73uG8VkJ/vTy6Ijxsyi897POWu4OgAL046308z/srO/fm+Lxm16y8artEu496Gz1pf3C9tdGAvO+A4DzDTB08BoxGO5MskD2gb7K8GGg5PJAAmjxhjg+90IgjuFglnT3YiJs9sZKKu64Zgr1RGxq9QW9lvVuM7LuPX9e8xxiRO6YeFr33zsC8FK/aPI6fpb02MZ08DANYuxEAAL3zrHM9SteTvDjSZrsWVBi9ZH0hvXabuDwp/eu6rFELPRIbPL15QIs9gvz4vHUzY7zihWE8af/Hu+yC8LvCVZA9C0VcPV2HaTvKpU08PtSKveqwlzzL1p47RNe9vN6vxjuvcSe936NKvFtis71ErJG9p54fPaccabyabEG8gxskPL0zoTyPRHq9Xz9QPSUB1LswguC81I4SPfCqRD2Gm189LrFbvIysrDq4NWm9vLnGvL4UOL33AVE6yvjiOvTBHbxsXyY9dxgmvdjazLw7BXo94EcGPTXFrDyBogw8MCSJPOKmrLzlCBE8RmSmu7X6kzxa+i49MhBqPGG1ZDwAy7G6I7YlvRUkpb3Od/g8b8zlvGB+zTxVLFq9pmx5vdRtszxLHQQ9PcwYPGaYOjxoJOu8wQ2VPOLkTb3Avtu8iMsFu6FSljsXRB+9N9vVPCRlJT3GlrQ9JVmAPEZxAr3skIq9S+kGPWbLkL37jkI98QTBvJ8ZBb3tot48JQ6Pu7qjCz2tKUC8MJW1POmhxjwazeq8vY+/vcdaQz1uK2Y9GUu2Ow7xC7wu9hK9wC8MvLS+Fzw8+pw72YBYvPfenr1nMKS9d6iuuyBFab2J/9S8Y9NKPfbWjzwAaSo7XyAPvXkJZbxDchG8eFzSvDS8Ub1M4AU94Mcbu7B7MbwsNRu9iGxvPQwtizycDyw9G9PivEakDLwoqUs7UlGQPHtPoLtYtsG8oxJ/O6pEqryLbGS9OB7xPGBxlbx7OP+7ARK7vJi12DuN6EA82B4nPLD0V7wK20a8CmHzvM1pdTzSaK681xuivcpLGD38vxU971UTPad0xjslLyw8lHehPcj+urxJmdu88dhiO3S7Dj2c/lw9ucigu/BkLb1MGEg95y8RvSu+VLzBrQ69rfD4vKtGqTxMMm08freUvLa0kzynONW8Hw45vfZzBzyAnkC7VKY2vMTjwjwsWEi8jxACvRfoYbtZ5as8/UP3PBsXLb0YCi89I1YtPWw+Ib30VYS9woc0PWsrqLxhV5E7h3MGvD9tP7xlb6c8TbkIvNRLzzxlkCw8IDqXPQ7FNL0DQxi95PWvPOXtrTxOrug8CfV2PRGenrzZYZ68xLT2O3/ONTxbuzW8MAV4PEEeM7x+fKO7dF+WvDBEMr0DHDw6EV1YvIBROr3FYlM81UiQPYxPwDpJtdo64hCdPHBKJLwpdri8tMcYPfipDj3EJJu9AUPGvFIqRz327tK8SbcqvekO0jy1acq8XsORvGGcnTzCCjc8MC4ZvVrgwjxe90E7d8SLvKUEBLxvyLM8NSVhvLoGWL06PPg8dLr+vGavWTrTh9M8q+q7OxNnC73zIBY8OOk4Pa8by7txC4g9lMOqvVVeNbwOvGC8k7CfvSbyGr1dcju8tHtiPaYQHL1jH3o9IVI4vJEtiru5HBW8MDBePLUQj7wihgY83A07PGTN8DqZLQC8QHervOfGbDxsDjO99mviPHLGVL16Bxe9c+8dPWRh77yS+1W9YC2bPLNTMjwa18a5KI6GPIMMt7y0sfk8FBMBPXot9jxeXKO8A96nvWFfcDwWpvE8YYqVvPD5XT3y9B67Vqc7vWTwXrxf3vi7uM5hPSsNQj3pDZY95pGbvCMDDrtzjBG9tQ68PGGTAjyLFR08rE+LPCzdODwkFz89aTmRPDM35DvIy2k9qVwQPf6R7Twc6Z48vknzPNsqE72ECDa9Wjk5vDV5cr3oZTK9p1a6vOuOFz3uqEm9bqVcvVvkBb1xI4i8QywavHXvUT1qpqI8S+1CPG8BaTtdfmQ7Mi3cvMeivbyO8Rm94ydNPX8si70f+RQ9JKfbPYlgmjvyR1a9cdGCPM/NuT3w8KQ8txigPZQeErx5bgo9qNaZPL/IdLy3ZY09ZYGUvM+f/DvVgpo8/M6yOro+oblU7vC8EfMKu2N7lzwGZkS8jgAZvX3/fTv4b6s7umjavFUUIjzY87i5jjmoPSc5Gj2BRaq8QwhVu9OJsTzKx+A8vwTZvKN9Pzv0rrU7j95FPUmUKDzZlKm4ho8zPdE6Wj2r2Lq8niypvFhwkjwuW6S8XZKrvHDTqLvnd6e8ACS6vC0LmLwrj4Y8VeIlPUKHszxWmJM89swqPEEaxbxPtQ88
  8-7: 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
  8-8: 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
  8-9: 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
  8-10: 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
  8-11: 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
  8-12: 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
  9-0: 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
  10-0: nbp4O57fjL2Y/LG9hZg2vRgHEr0hePe7MUX2Os9axzzDNa08QW3UvOczRz2xnlo8hcLFvK/A9zyWFss8tzONvHRaUDyPhL48tV+0PF/NLj1K7CC8pPvaOzY4qLl5s1k9xyamPJl7xT2B+7k8dPe4u0GdAz1ZBUG9R/eGuzycMr2/OxO9K+CrPO6EvLsVidS85+8KvL8BpT1U87+9l6//OwPSJL3BwhA8a/YPvbONYr19mFU9/5ynO42UL70FDcU8HH3FOzvGRL2+mWA8Y02BvViO+7shD8080iscvWKK4jpvXnI8ssXYPbbuMb2RyT49d8ZdvVkShrzNrJI9nCyXu6rw+LwUtag8QNsuvZ4Sebz+PQW9iorJO4llb7vGFom80iGYPP9ByDxMxxW8ICS0uxHgiL3Jfu88P5faPAo/trzpml07WnAEve1g/7wzmKq9kTVwO7fiy7yokgQ95K+1vPmoqbxtEP07yzAqvbMxuTwPUIC9wZEJPY3Q5rzqqAa9xWGpu9QHt7z56YS9lQI2vL61W72rAlo9uv+GvCW6LbuGa/y7e9YnvfmbSzzS9lO9UV54O/P9Kb2rMiC9PTEXO5pht7wk8G678gEaPZ5uAz28ovk7eutGvRkYHzzfocG80oz6PBMQZz0D+Qa9lIohPY6TLjw3FX49FZ8IPYtKBT3dE1881ykiPGO1ZrzS3109S0mjvAGtizvtyo49nkpyPb5Cm7x7GrM8Nr4/O472sT0uhEA7vUaXvE/MMT0u+EG9oE+JPCRdTjxC97E8GxfpvLC7kr3IcsA8TLBEPOb7Izw5eiY9XAyEPCNWHT3VMTS9k29ZvQvnkrx7EAu8hVGevN84MLtfw3O8CYWQPHaci7zQgL67vO6zPCkLjDwlZsO9ihE7vZrz4jzcF+Y8AT3SO1OFpb1kS+g8DjeHu4WMhDxXBio9ggB0PagxTDzZC0C8wL1YvW4ghLuqY4O7jbtoPMayUD3eZzW8X7HfPNYQKbxSZLM9fs8GvXVpJTzW9B49oHmUPAFmhTscCmE73pmJvT3JMTzXvVu9QQbbvFfTTj0KDjm9XvkvPcgPVTx3sas71/YHvDb6UT2SkQA9wXcXPLxf1Lwx4ok8jp2ZvCF55LvukC888g6JPL74Cj0dz5q9/X9RvEf2Dj085dw8KMSMvPymxz143Ck9+yn2PJEmZLwDJim9w86eveB7aLzkqyi91lE1vU6M1L1DCkC8EzosvIOGq7z8hQc9hYnevGgWVD0U3GM6fWYwvWnf7zzDqb27IuPZPC67Pr2Ghn281es0vWdyg7z/ysc7FvFiPSkro7yighg8RKEyu4h3yTuE0XK9Jol+vBmuGj2QDwo98gcbvaTIf72tXqu8SM9rvJ+02rxA4hy9DepxvfExATyfn/I8CHtwOxqHZbxW/4M85ipsPGBnEb1z/4S8LQ2mPX68/TxlCgu9sgMoveq78Lzo8uI7aazzvPKm5TyuYMi8MUDXuuk/0byqzn69zJgIPcEcC73y8Ek8tmhdvCSEyLuy2zE9l92HvKhKV7ywdzc9ByuiOsKRMb2wonu8QMf5Oh5cZjwgl0a8MNtuvTizgj0Fgku9aGutvLA2ETwiqGM9iWlTPJekwbx99tG7hygaPXmWtrxtmj086MPhPJQtmL361BU7uCFfu6NdIbxyR5q8iTsLPZejTbw/aDo99+CAPEUEiD2RUZq9dVTbPJgaSr1IHOa74MAAvPyuEDxNt1A9x3chPQn74TwTgjc9MdyRvBZctLyTW+880iIyPVPIQ7zg89W8pG4wPTqoO70pxGW8zXMGvMA1lj1AEnO8MANsvMyuBLy7ntc7S9EfPBQ0GT1gdeg8gmyGPOhSUD37SEA8CppCui4h0TvTvlM9SH5RPWbPar36Jd68y82SvWYBhLsjurQ8VTwDPVe2Ar0UHa48Z5YEPF5PJD3ZyEy9E44LvM5ssrwQRcQ9EMFfu05BWzzr9ZG8RXiCvNWsV7XkRU07pkmGPYRAgLxjLuQ8T35xvdrMfj1gDKi82TmJPMMawDx2XQk9pcYvPQIwBrzb6Zk9oP1JvJZS+btwKyG8OsWNvDpusbxfRMW8hPq7uiReML0+Wm29ZmGDvMnSNLxgGlA81D7TPJn5Dj2V51e9gj5kvNfpmD0UMxI7F3dVuxyQmD3Go088prMEPfiOs7wmONA8sBBOvbJMWbzqvHc80ywjO++rrTyoIwE9LmIbvc7t5TwJpvA8Ob4MPdkcTT3y9KI8EitBPYn9Dz00WMa8SnS3u6rNprr1x0w8VKnYPKlkIj0HayK8NjuYvaLMqL1qOUk8zx7fPPPPrbtIgki9GxGZPDmcezw0/5e82od7u527Hb0idTS9TACMPSXFkr2Txnu9/zU+PToqsz1zOaO953abPLe50LwAI5U83ZEqvWTIlLxnLB69okmiPZK48rwPgLU8Xv6/vCZodj2k2bW5I8XqPEHIijzYcJK56xYLvBCyjbt4aCY979xnO8knkLzcXgw9j36NvPxsCL1Ceu+7JrZUPSCoIT1O0xQ8fP3VuuhX1b2YY3S92T+vvGv4vL3m8Pm8XMjjPCVc1jyDt8K8BKugvMa47DysCFQ83Jk1vFdjtTxx3jM9F8dtvT8Zarw8ZsI9MSOLPfPlqbyhwWs9l97JvKaK57yUrx48NjRPvSz1jrzSlOa8trBbO3KjpTx+4fg84QWIu/r2zLwOjiu8M7p7vU74ZDxArnU6PWM1PWaD+7ugVI4904h8vZwHTD2NALy7PZBgvFvACrz2foK79Bb1PFmD9rzcr1C90JymPBUanbxHxnS8dK0jO8PGbz1WskY8srd4PHCqHT1ctJM9ZzYWPV2eQj0VP7k8QW2LPO0QqD1TzRy8yAEZPAFr4zqQM2m9wuUxvSPaAL3aFAI9O3GCPbD+uzxmCLU9AqGjvFhgzbyneYA7eA47vPg94bzUzuU6fpAlvXcy27ygPJG9H1y3PI76KL3D+J68yg0jvJs9Kr13kO08cuYWPIzMpT1yHXk8MEhcPcaxmrxNAxa96AAmPLl87zyFw3E9B26zvLU52zxAkzc9KtaMO0G48buZZ4Q8pUfJOt+Z4ruRiTU84QyQvJ1TOr1nTBA7KKR6PFOyrzzv08Y8cIUbPSWDLzwfDzu9Q6Gju+jXhzubxTS9n8O2PP9tRzx1+YC8d5I8vdk+KDwH75G87NkWvf5mujtSC0S9XLVMPSjcxDv2/ks7vCuDu78IuzxrVF88ckiGO6fgDr2W8iq72K69vI1y+btr+JA7olAJO2aYjDtvFXS9bTyvu1ZyYr3Y0SO8Rx5WuyN/mjwHnIe8SdGmvbUXWzz6DmS8PWnMvMu2Db2ihIG9d77vPIB5C72IF/M8yKdDvFhwEj2DO4K8xFI+O4SOVLnYp9A8/X60ukLjtrzEK1689v+BvVv76ruN2NS9DdcUPPG32jzzy7q9FTdPu4LbV7wBNFa7WKyxPTuZpLzyAB68X3HaPGw/vDzkYyo9ArpivFp1CT3ok/S8HeyJPNtJ0LvVcE49P90evXPUIrza36E7Z0DEO/5Bm7zpR5o9tjfcugyxezyGQqA8+deMvF5qWb1OFyu906DuPJtMtTv8TNg7tRdFPZQEkDtXxJK95FUhPSsYHb1uGqg9iGbYPFxmiTz9IfE8+hr1OgcxHzwBhMm8IjwAPfMYBb3QU6K8eNyGPFWKwTvXnSO765YdPURQc718fiW6QuZHPE14qT3M9kq9knDCPMtfZ73q+Ag7ARFYvBTk0Tv7hCI71+nbPDyi+TyZfdM8C0GGPWZGpTw128i7ZCdTPb2hxjtq5rW88HpJPXYcE71jwAE91UA8vBVyMjwB1h493/iFPLWaqbxsYi29YKZzPE1TOT1Q5rW8UgUnvDUb9zoA2LO8f/dgvRwzGLzuup08W71gvfFfszx0/Vo7Ez/WPB1PPD0eiBw6G7/jPHg2G7246SW7S7T7vABytLxZRqw9xUEDPY2kY70D9Uy8pHjYPCC4PD08Ege9BX0SPWFbfrvusJq9RINzPKd0TDxpBRK94K4eveN3t7xJdqW8zpfPu/KTR7zzqBA9xIoXPW/Y9DvIksG8
  10-1: 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
  10-2: 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
  10-3: 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
  10-4: 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
  11-0: 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
  11-1: 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
  12-0: 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
  12-1: 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
  12-2: uartvFuYg70e6329QHdXvbXg4btjCaQ8pP8iOrYu0zwVFj+8eYwtvUfcHT2pATw7cr0BPB806LxrpdA8X8sxPNJWKT2PR008FaOAvONbpr1YIhk8LTqUPaUYAD0pSvG81Hq1vFBOHD1NqWS8Ej11vL6iRj0IQUq9r3vRPCzjVb1d1RI9ydrIPMFscj0A4Uk8lyQHuq1Tijz+JYu9YGnIvJob7bxw6Jq9sUXpvDZ2IT0TIi483VAZOq44OjsF0qU8R3cGPfHQvLywVVG9NdY0PHZQ8DzJ3iQ9JzUfPUM7sz2rlvy83AixPTDMtTvSNvW8bjJfvW1MAzwn6Ao80nHMOPXOqjyfAZQ69uKbvSq9TDy0Xpi8qWhQvB5+Jj2sW6Q8EG8GvSSdhTxlo1Q9i8RFvDolDb0iAAa8wnG4vCZO9DuHI3O7elR8uyhrOb2DMYK8ggcWvG/dobv2yHY9MY1gvXc3jL1q+qC86qkAveIwLj1e5mu9gRg2PXFFMz0Vo4I7Em8EPK4VybuB3667/W0GvaaAI71Qll09Nrr/u3GrCj2f13o9ejwSvSlNLD1yaM67Qy2mPJu6LTs8jUu9Jxi1vBA/ZjzbWhq8KBN7veXiJz1+dkM8cvaFO4ZDCT3X69S8jD9YvZjw6Ttd7fG8H7QYvczTjz3frJ09nxe2vNUWrLxxwuk7YOuPvCGWOz3ZNQ09TKALu8wzOz1n44q70z9lPRcLZLsSqx499GwQvbUcRz3vGFK9aRzYO5Sibb3Fg5y7ZhaYPa5azDy0RkS9LYeCvNQN5DziNfo881tjPdTBfbzz8mC9MEmCPWr5vr0cBio8fVopPFVkd7vnoxA9OAkKvPq+Br2FbeS8PTL3PBhLwr2jToq9YLv4uzPhA71LO2w9ufpOPcEXiD2P/oG9flMvPMdbn728/BS8zG1EPd1NgrxSzTY9gdravAxbTLxBruW8KK//vE0PEr3SArW9yDPpvA38rDxhElI9kx2ZvNAfNT2IcOc8M6RiPQUvMb2MX7E8bNM6Pe8uM7wcHzw9YoXuu77QR7x6QGa8edJBPJE2s70PHu684lTyuZbAo7ukwWI8CAQEPJUL5LpTPsi6a8+MPKryCb3MXyY9I9GBvUnhQru1Ahu9uontO7gk7zxfMPY8uFS1vPpWjTxbCnY953v1PJxy5Dw01be8SCWOPTgINzvEA/27fAvHOq5rK7waRIi7rsp3vCpmlTxCci669p4rPaV5GT3Ymyu8Q5vSPLi4NbwJBL88WI2gu0vjYLw9N6C8Mqc6u77rCT0PRum8/kMkvZMTw7yHM/+7TPlBvIZdD7wjv0i8QDhNPM47UbzpEB29Ou/9O+6y17ynRJu7yxuOvTxpPb1vwci8yRx6vEVj9Dy40yy8E0ffPBjIN73ohIY9jsAHvalamrtMzd27r/ylu+zL1jsBUS28z4MyPkaX2zwkq7I8gH2PvEp9pbzELy28t+g2uzAulLyrGzq9G8wCvOzmMj32xsI8aUQ5uoQdoby4VEe8Vt4XvdSdW7raD589+RhdPImFb71Pn0U958xFPSlrDbzE1PK8cG9rvKrKuTw/jEe98UmWPYEUPbsEA1K9ACM8PG3iJ72p57O8VBsjvRUjIDzDn1K7wGoCPMnnsDyDKR+8aDT5vPm9gLx7Ooq9Ag+SO8gAFr0uIcS8xY1lPS4ln7w0FqS70RyBPK8XuTzhBIy9fGGdPKGgsDuHdpW8zCHTO1WpRDuLPFc9sZHgOx8fmjw/8YM5dtZBvIipj7xcLe27468bvRV1jzpV/ny9OV1DPPDm3bw0B3u8+8RuvZrc1ryPcI+8QG+CPKssZj2TMA09NQ1UvZ6CvLzUkR69xvqoPGrQVb0/ymC84Cd7PE1R8TxMoTo9vnShPck54TxWAZu88Q2ZvPKUaTwR6l29QK87vQf3P7pvCcK9CaM0PIi1I72+hgm9C4JtPX+MMLzISzE93UPkO8InWDq+Pum8RTGRvCmUFj0p6LS7Mcl6unKK8bwC5HW91gSqvYeknjwkas68JHojPdGFmzuTxek8LSEOPf27l73AzVY7l9MUuzbww7mgfhU9yO0cPehDT708mbI6zlp4PbcFEj0rvlW9Rz31vFaeAzxfJJY8jqHWPPzeWj31DdA8CkKTPOuETj09PfY7QwGLPIjHaT1diwa9Z2e/PHOHAD0mnoC9js+2vHAzjb20NZa88J0tvfbTWD34zzE9pi0vPU35kzzjYAQ82XsFPdh2A72FlIc9k4WnPIgG1zyCIF28bOqfPGJVG72bbiU8tkbYvPuuU7vpfAk9nOdQvesggb3n5IE8ari9PMolxbxUPH67Hp1JPWoKdzzDkRa91Tyqu6DBzbthFzA8sscwPYscXjwIHT+9FKuTO0AU/T0rAly9HLIjvRBAab3JOCy8BiK2PHkuVD04M3e9BQ7pvPCe4jwd7Ke8G6/QvEBlkTsedi27pukrPYhcQr1ehIC7AU45vYcklD3LlL86IjPEvEGbIr2xNDG96+CuvA5uiz3X6n+8CoqFPRrFATuWVnE7f5vXvI5x1Tt1M9m8VdXJPNV6/DxNWOA8F3qFPVH3xLx3ita8z6HjPD1A1rxvuvc5yO65vDL7bzwIE708AwukvE8HYr2q6RU92hWvPInbXTydmC49gQ1sPOoQALzStLe6u/5OvdpGODzRbqg8NJkRPMq/hbwansG9ITGfvFQbF70YZBM9k6KgO/ggVDyP29Q83rTGvOsaMj1Fbxw9kFMLvd8LFztMy/u6bjIevStt6js/7mA778qaPcZA7zs3qwy8trQkvfD4ej3MXjU7jTt5O90GKT3aurO68kWSPA5eND28Sfm8bP1nPZPNmrwyr5Q8INd0vTxVDL2xSDC9sSblPGGyAz1AFQS94giFveTzUL3Qgg29DfAevRofQT1C4cs8vqH4vO0FSb1hlOy7MRWsPWJKRbw4GvG9sWktO6o1nDyLm/S8j7cCvdYAiDxGsuC8YlMEvWtbo7zVIW88RyEsvds9RT1znP08CKG6vLswWzwowM28EB+KPK+L5rsuT+88SBP4vHeTVr3j/CI9fwz0PDY1B71fz189JrWAPHzKSDzLicC7VaDQvGbynrzj1OO8wRhgPG+jhjvMr+g8P2YTu9y2mLyfttq8KsYjvAScgrxl1Oe8yug5ujSBgjxu/cG8lwI2vHe7hz1ZtzU9n28dvYiLjj24L+g85L00vTeK/Tx+1cg834JJvIEoB70ErBq9No0cvTuPDLzzFdi87y3fuw9pljymwTm9HofIPAlEKDwGmD89zJ4JvP33ybwEd807wj05vaS6bLwzSxS634wCvcQBdbxL35U9mFb4O9kkrL2Fchc8yhqFvNdHwTs38L+8BuADOxaJGj0gK+M89XN/PbLlID1F6fO7WlNTPE6yKby4qck7eLyWPGTWPrvYGZs8Th4cPV6Narw9w9+8+QoCPfGRVb2moxE7lVr5O3KTaLxA9YI9BByjPEntqDxixCa78ZQ0veTsiTp5uEe7rw6mvMF2ELroiFE9vj9Cvf0Qg7tmhnm8ZvkBPUP7n70K3Lg8sdUrPbMs0jw4kRA7ao7DvBkAJT1/VoI8ooYMPfXQg7zWLJw7YtZPPDIK+rko5c87BSCovBdCBzw2k+G86ou/O8rxJ7vh4Ro91TQHvLBeVz275BY64gEuvfzZDL1DP/I7vH+TPavGjbtTVJq8HvAyvcq0173Jl5q85BJ4PeQjnT2f8JC8UQT/PHGBML2Tfk08HGaDvDbRRTzfNAY78/Asu6YSgzzgtPk7QeW3vBHoBT3RJ7A9VCm7vH0NADw7gJS9LFiRvHO8C73DMck8YpP1vGQgfrzmG1A98cLTvLzLPj1t2Dy9FbkPvU6c2rsEfwY9hvo2PbOs/juvJ6C9NlOHvffGPT1+1R69pIVBvCFkED3B0e+7fyI6vUVwX7mHKtA8dWeSOz133Dx7i3K8WNMfvWIp/blexp87E/oLvXH1pTsXmDc9mUm5PB+gmT3mLE08C1eDPVIhjjziWJ68/iKDvADoMj2BTee7BPMHPS/39TxfCTo9uqaiPP+iKTy8mCs9NHXBOybvejw8JKk7
  13-0: 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
  13-1: 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
  13-2: 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
  13-3: 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
  13-4: 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
  13-5: LdjZPHr2wDq1wrq9IiVjvdMMFL3+tOM765QpvDcPlTyQBME8kSvyurqoBTuVxg09VYDDvYqPWTwSZnk8aAV6PV4TJL1AXyA6WaZNPWE7VT1UhDc8U7I5PEinHr3/qbk9uF76O8U4oDwNdqo8FZpMvcJ3Nb1lTEc8Hk+KO1KWNr1pNO67UN7CvLSaHL2lZZM7bWkgvDkWUj3wz8e8kSJVPIUxZLwELAa93ciVvftzYbzJNJK7ADSYPCGleb3hDq093cHXvIG6A71M6o48XUEovcB3JjuBsls9udssvCWsATyxYda8QnkdPa2VPTyvaUo9kmNUvQgXMz3SFJU8ZtdlPAYfNL2wFyq9Wt/mvCOcPL3aQka96+hwPaut8Tt8gUs8xAfSvONNEz21Z5W8Hu4ivTByvLz8afE842GrO77Ij70msxy8AflZPBlTML3s6428YwslPXURHD0bD0o9Vu3QPEBYNL0Sn9m7f304vZDqubvWQna8+Ly2Os55QLycNQs9M/pwvZh4fr0149W9sbUhvIYoMbztjRk9qq6+vA+rqzxY+X+897ZCvesbubxTNkq9kb+4PMD4M7wpU7w7XDCfPItrjrzVQnc8guSyPNVM97sOKXw80ZNcvGspx7wB2gy9oYpyPZsepjwUAHm8fvF2Pfh0u72ZcCw97eVVPS48hTwpbgA9p1EuPB4kS7zJpPm7eMqvu6tENDyNVHI9FVmzOp5DXryiV1m7PY2Qve7wHz1AjrY70PDkvNHQdjzdowm92YelvWmPvDxBwoK7E3Dtu6PsZrypjC02lxnqvImmjbzo8qK80yBbPSvcXrx0oXU8GjIRvaCSYr173Km8aZCuvIHdjLy73eS8O+JWPBZwdrxMRIe8OGzYPAwuO7xiHkW9M2bpvP/htTub2pM8XpVTPVYhjrtX7PC72kpru1kSkz10IF49ZY0mPHmkAz3idYa9U8y8vR9MGDuaYAq9w6ZtO+XiCz128xu9Yh4hvMiJujvUdIo9YaQ3vVZS5LwXkpa7RzWrvJ+zqLydJxW9q/ZcPbbFsbyK4B08xUMwPVQ51LwBL5C945xnvPkssDogz5O82ZxUvd78Djy8qd05tqmuPIb807y46gU75Iv3u4NksrxuAi88WQ6Euh8tcD3AXXW9BgH6PH64dL2zfzu6i7IovZLFhj3kAXm9XrUKPOn1mjzyNBO6cYWUO5euTD3+yva8NTEtveRj6ry5b5I8IxWCvfkGILx+f7c8DxgoPeLjnj0Z0rs7z74Vvfrw/LyB/LW8PgpHPEglLL2GJ/+6BZxEvaFvNr3E+S68TXqHPa4dO7xvh+C81juHPMMtYz2+x9E5uFlIPIkAZLwOAmo9I3/ovSkaGbzpSC69LRtZPZHHhb0U/NI8Izn/vKXabL3007Q9vTEFvI7EmzsrvqI8hBVMvf6WGryyv8o8b9XJPbK4mLy+UdI7+MSSPB+is7ybsZi8hlgQPFIuc7uOsVO9v+wtPHatIzv7LIi8+aGLvCvF4js2wB09qXMMvRH0FDw1JTM9BknAu6lVrby3Ug49R+raPHYtvjyHyly9F/gnPJhrkz0Cmce8c57iOuT7nDvgzOG8oOP4PPnMxrxN/+E9jnQLu6yC2bx4qlY8rHigPNtW6Ly9E2w9l5dROz17CzyPlQQ9IoIYOwHYiTy720m9859lPVXqZbzLcLg86zg1OuXTwT33ioy9wAwuPXRvizxEerW7pZnIPIGccrxy3TG8ckS0OodC5DzngMY7ZRFvvegbWr0ij9I8LvioPSnmzbyHRrw7sZlCPRSI8rwT3eI81On9vKTXNz339828nlEtPLz4Yjzl0Z08DrB/uhMNbTz4ErS84eWaPHtNlT36Wk08CFHdPGPHLj172Xk9Bud6PTUoX7zt2hE7qOprvZnWZLzPmVw7j40PulmOWTtya1Q8bbG8O/BCxDytpf68v+8bvH6ojb0os0w96UxQPEFKhjltVpS8fpLQub1/57wr2qy5I6+0PHijWr0+1oc9zO/gvATcPLyxeKm7exQ2vIt7UjvNtWU9jl5AO+X+Gb12yaC8vNUMvZCDBj1h7sg8uIqAPCpHnrwXiKo7ggeYvE4rzrw740K9jKmovJX6X7yr+r68kh89veDq9DzpORS9Uy3+vJ8vgT03Iwo98PyAvSn+hD2A3so7ykaeOcJsZz0V8Fk9Me16vZlYXz1/ZEC6n8LyvBSiED1htTC98oplPJjcnLtoxRQ9VexgPSp8cz2Pii49AVkIPDOVYDtGcj69DhVcOQQcfDtIHJo8ktH9u6Uhyzyv86G8WC0Du/rnpr2rc608wueIO4afb70vuim9ElBvPCvXMj1nf+48q07FPMpK4DwHt8+8ZyVQPVNhXjtDlsa8a96GPaS6CT0UvJg8QzbCPD5Whbvz7vU8uGNIvWaN8jxhqMm8Qkp2PZyUoLz5Uai9MVVsvNw4Hz25zpO90x5LPAE9qzy0sec7lOEMPJT6Qzwxq/A8/MCjvQJemDwj1Mc8vwcpOw0TL7sNYAC9hx94O8PhKjxvguY8tvMxvePuPru6DCe8eGNhvMjGlb2k1iI9O7UWPZ1mbr0INZU8k+IsPOCLHr1SIgw9k0RRO1vzcDxxn9u7XVEOvTzpj7vJSSA9WzO+PEpw1DzBSGA9pPe/POVoN70KfpY8CuMePCmSpTyz4IW9eL3lPGN/P7w4DBO9hv3rvPQnk71PQTO88zSIu/iS9rxsRmM9Qf8ePGXA8rxZEXc8wnWJPNbDqjwvFSk9Tx28vHApR7tmggs9zC0Wt27wSjsUKJG8mh/uu5r5zLxIEgO9b6AFPHOgyLw85KE8gLz9vI/uzLt4QO67WNWaPMg03bxKcXc9JDKKvDW3fTyk1kC8VitkPcmN0TzaVtG8X9mzvMl7tTyHOUk9VqELPFg4Iz1jopM9CeHcPAyhj70FHnM81GRpO8plCT1gW7W9J52kvMuJnbyZlZS8HyNbPRecAb3AZvo8VVUhPXkTv7x1gAC9gKCIPafYaDxeePQ8EWINO12BqTyDHBk9M8KLPGEsw7t8yKO8SaZpO5G7Oz1E9G474+8pvNTeujwf6VK6B4bMvME0JDw1gCS80SYfPXAr0r2ALIE8GvOAPPHS5Lxe68+8czoZPdPs2zxdOMi6OuCTPAGyX72v4Cs8F50SPT7cLTxVXmw8G34vvUbhiL3E+r27gY2Uvd66Ez0X5M+8LAIHPcnmaD1vKou8bvbAvJ3qEj3T8Oy8FH2TPPz5Rz0R+sg8L4QGPWa7HryiEl072Bx8vSMhGrsxQgo8xOA9vJ03CL39oKo74tkGPHNJd7zsGLq7LQayvabForwCv507Q0llvBPvprzhMa69peAKPdkL9rw/OkM9Q50bvacUsry6YKs8dO8yPHbKfLtvRbq7KnLQvCAVBD2lKfu8AJLKvPA4ULwB3Si9gdiePD40iDxVk6w7YrjXOjfsQz360la7pNmJPUhYbbxyv8i8+FSIPK2KDjtgFl48a3WpPFFycj0nPoU8Uev+PHg97bwfIuc8XEIevaNkIz0iaSQ7zmVivAb61jxmEVo9P/R7PSUp9rw/CSg8YrxnPGqWQ7ycmyC9o4aNuzFenTtQd4g8+y2/POgG+7yMzzi97aL4PJImebw+jPU89VVAvcKA+LsfmZw8MjlyvTtyKj34hnS9LGfiPGGqNL3Ezzi8v10PvDjyAr1sZVe9uvfEuusZbr3rlYY7wSmrvJCt3j3q6mS8ypliPTm26bu2OQY8i4UMvLrCh72Tfz47N6yRPSZfE7zWnCE9myjBPct6krxhoKw8y5ggO53Y8zzmKBC8NFaRPSGTET3Nv5I8hAY0vEWj5zzXboc8Yp2gPU5dAToBeAW8GvayvFvB5Dx/Y0i9YBnjvB4cND0/m3k8ndGJvTConL1TNrK6nU4vvXQ7Hj0v3UA9pzMYPXtGszxO1Ry9QGlcPN0UETs/dGQ9j3ERvV5JF73Usag9ei2NPF6WDr2ecgS9kDSBPb0mcbz6HHu9lIByPacMR7tyEue8RaT/PFTgqbwMUWe9qWWEvbyzM7vQl6K8foKIPRIGLLsW9xA9spCyPK3057wGXGc7
  13-6: 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
  13-7: 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
  13-8: ApUiPKC9M72+fLi9YiBKvWaHS708uSk8ARrpPIMFyTza36M9Iy7GvM3g0br3q/m7UN2fvc4NDD04oYS8rlhNPSpoNb2pRgE9p9gsuu7jCz2etBA88DL+PBpvHb2zVqA8BOSYuwnncT0UcDM8tJB6vbJfgTzw2uG7TYSjuq0Kqrwgkn+71oDSvIQmnLxoy5Y8A3jvvHaopz0UwtC7MJkNPavL7bxZYZS9eJB9O5RVjTxLX2E8F+IfvDutVr3LKBI8LluVPAaXJL2vwdg8ntlHvKtWIz26/+E7QF4XvSS9Iz3ZuUK9fQcrPA7WTDxWw4895zcpvfyK1DtubyI91MKDvGOAjbwta2C8EK9NvdLvdb1siuC8Ds+YPTx9orwlOSo8zPTtu2k56zwUYcG7Be+BvMoOJ71/l5s7I0VKPRy6v73LClO8ENQcPUVcOr1t+Lo80WaPPevAbTuALNc8gJdkvOEbH73hpR09RrR7vZvL+bwLi6m8FovPvFpu7bprpBg91oJZvdgI2LxKpn+9Itu4uyEjSjw3n8I8jETlPOLJqzr+rSc7Pk8+vQTTBDzg4GW9ZWtOPZ6NoLoW80W94o0UPYOs5boR8nE8x16uvLPpd70OLdc8/i9WvP3QezpQMRm97oXTvDMd/TyUVPS7oetaPRYjAb0He0o8JCszPR/40zxjA9U8uaIkvZM8rbwmfB29gXDnu9i0nzthS2U9Xg4NvcYYBzyLKBM7uPo/vTawiT02nRe8qPi/vLSmvTsMYvG7YE2NvbnyN7ycqcM8Tx6JuzRptTt8R6q6CVV9vZe5rTwoc7K83hFXPdyG5Lw3mRA9xJcfvdjPa73aiLY8KiQ0vZNyCb3mDLS7+z3CvLrgYTwJQIQ8DmnwPOaQQL3s/iO9X85tOvpI5rxhqWw8is/XPBtFwTzt3Ta8yf0IvVHLuT3mwhM9DcItPaZWBj0SxQe8k+JAvSNLhzox/ku9Z4w/PD4s3zyFslS7Zzj7PHWJZzzW9PU8eKCCvbqsz7vrsIy80m5KO3VSZDzXTIC9L5QzPYbxLb2L1EY9vCImOp/qPT0QNKK9VlchvGJu7bxUpAY6GTqSvI/BGz20+4i7GdgxvWWRo7y/oTI88o59vBzfyrxJ8no8vGBgvFeo8DxXGpG84q0dPa/7Kr1sEac7LzMUPBOIHz3cyH29aYbJuwo+Tb1uBg89NWX7uRj1+jy5LUa6g70kvVuE77w9y528sCI9vTSEHTrjj6g8f2dRPJm8Jj1ck+y7W86wvOTnj7380UI86gB9vHJzrjzbHVI8TjMEvP66fL0FDcG8MdEcPOjrlTwWdAm94ppHPZg4cz1ocLa8paMkvI8DGrudIvk8QJZlvRRrN70R8629xEFNPaYNW71ekG09iJRNO/N+kLyvLaI9zgscvS2N/DsLAhQ8ClTUvOgtKrsChkI9Iwe6PTwoKD2J64m5lFY7PUuJjbyfGnU82H0kvJRMiDypYqm9839wvNChPTwNIf47t52AveSy5bp7KxW8Stt1vVbBzTvVFI097ycRvPi3gbwRr6c8wVpOPXQsIjwtrRq9xT+9PH1sPD1oXlG9lMhOO/VeKD36L3s8qWsBPVB1Ob335Te8qSvQPDkNzLw1oKE8ByMePcC3Jbi8jsO8YXzluKkfKTtZB34735ulu5mlLbzx6OK8R2BHvQn5f7ymmxI8TKOkvHZHxT3+Qbm9sIADPd2VHj122bq8XSYoPOMEZDwdRwM85c0iPb7dYTzEm6I8fIEKvU9zSL1xs3A7DJmiPXmpe72cVls78pd1PZha/jtLSN08A71wvB7BzzxkRTI8SXT0vB2dcDo8SpC7gdEsve0JRzzQDzm9NRZhPRGfTj0gYnc81BETPUNsqTz8NAA9zT6TPQfinjy2ch+89s8kvZSGLzsAWdC7vd7gPG73oTx7tGY9JkC/utZPCLsDRVO97EyDvGPgG70OvvM8KGAaPeOI7jvteR89MSSGPKm/PL1A2Om8V4eWvKiGur2t/Sw9yHqGvWZgujz0lA09dpGGObrnvbvDSUM93m6uu77Kkr0/Why70l8GOwsrMz25pOg7UUIBvaxi9rxCJ6089aUGPUNECj2aWsW9+xW/OoyoUb3vbgS7hCchvUr7Fj27B9684KnQPHOQrD1sl8Y7QM6hvXKzFj3p1eY8wUCpvFvvuTyu8Yw8GTI2vfUMfzyStR8804snvQPATj06mKC9Dv1fPKjk+rvz1lY9j7cxPUqrgjxp+pk7V1c7PY7FOjs4ZyW9+rWWuHDyOzyzVyS7Vi9OvYXlMbxhMve8PC4tPS4MRb3Rn9s88sgevCg0lL27P+e8A8CpPBuZhD1GL+08/PkwPWlhpD3n+gK9jKyKPTm/A7xkH2K98zloPQHP+Tzge2o8mq4/PejyULugUS89m1nevM22vDx6qz879jsJPcj5j7u0rW+9+aCfOt3HBz37ELC8vwIYPTX4QbvaBFE8pUgqvFriWjxwMqw8v15dvcPIoru2WB67AO2dupVHk7sVTSW9FPIgPbQebDzA3hK8rgtPvHwqojyKziq9QkV3vGlFgb0+Q1g9uYX9PF1Uer35AYU8hgKlPAgg1LwF9Ra83GPqui2XYTw8iNY8+yZovR55vbxuGoM9jnxiPBkXBD2LIQA9J34lPIWc9rzaWn49V09zu9MoTT0Lniy9i7diPP5ovTwPG5281gEZvROtj71KrzK8OANKPAyf9rx41TU8aMrfvGm3nzuupLW8lxNZvPUyDLrPwIQ7M/EPu7km+rtpUo88qctJvFS5R7psPtM6ECESO8KIhLzffTU6yVyWPLdGJr3p87Y6p2wrvY4WEj0xAso62GkOPImSQL3tPU898j/2vOfo8jti5PQ8OF11PTWKLz19nhK8/ln9u109sTzXjCE9AUf1vDvZ/Do49Qg9SU+yOy62a70aBeK7rc4YvSjprD3xd9q96U16vCYLB70bD6u8HUNCO31LNbwStMA8U/n1PNOuT70X9tE7C8ZZPeukRT16JKo8PGkoPbeccjyZsNY8m0ggPQGEcLyYnxO9nBYxPF4YMLw5mJW88jrFvK6m0ryw2RI9zfxUvamWLrwqC7284Lt6PW6VhL0QBd66L9PfvDwdTr2QdtE87B1PPOjHNjxRZSs8zz8JvIlSlL1TMpC8ge1xvDrYzbxwSDW8TgihvW/fnr2cGg29eHZHvYUjfD0Kr428h6u9PfQSOz2ROSW93yyPvDtrPbtJdaC8/pYzPRIlQT0dNZs8xsf0PB2O/TvcL6K8QvdjvbOaJDwlimq7x+wfPKgfqjsH1j+88w0tPbQfCDsOYwI9KNeHvR2Fhr1y2x49v+xjvAVzSjwAzZm9EYh3POfmY7xNCx89nMmlvO4WmDy/Mrc8yW/BPE7wKzzvcj+9WY/Ou2X5Cz3Vi9y8voh3ut1rFDwiT4+8YnPCvCokxLv10447fYADu2XuIT0zhs08Hj+ZPV42lbxwJTa86ldNvSb+5Ds5z0A8fnRCPUq9Zj2kCHc8k1vFPPi+xLkHjkA9Cr5ivOjWWD0StO87paqBvFtH4Dyqcrs8uupkPY2ul7gRiBg9OPo+vcpwPDi5fSy9dAa8vGd5Gjo+PjA8lmd9PSUQU7zANoC9DOjRO6/l7Ls+Jds8rJaJvbKOBb23VV89iNAivSip6bcZ78+9TTnhPO087rv5CjG86BCMvLAZ37wXGSE6UrAcvTzfbL0Gg4s8JAW1vBnX0D2d/DG75yDvPCRzrzy0Eiw9GHXQuoyprbwkqd287uCYPCW/Fj3trUE9Tz2MPXVwxLx2aq68tPjKPNHID7vNXDI9QpM8PTrcCT3nPps8xqsCPYHsvrwPTgU9XYGSPdUCsryJq7Y854pAvZUsYT1enQO9RuBsvPZ3HTxQvt68sndFvV0TPL2E28g7uuxBvccPTrtNZSg9jAQju3y3Drz3R0K98m3RO4z7jLzZxrM9IrQxveZmJb0lILk9ka0VveRykbzjcu67X3CSPTxbebw/Kj07Ovu/PHv04DxDSfq8Fsh5PYdTgbyrmni96SPBuyKWzLqwMkW8eqW1PTmpH7wYrtw8TS3CPCrUpjz0CQ28
  13-9: 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
  13-10: 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
  13-11: 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
  13-12: 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
  13-13: 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
  13-14: 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
  13-15: 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
  13-16: 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
